"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[884],{4732:(e,t,r)=>{var i=r(8507);class n{static init(e){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame((()=>this.resize())))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let e,t;if(this._cancelResize(),this._resizeTo===globalThis.window)e=globalThis.innerWidth,t=globalThis.innerHeight;else{const{clientWidth:r,clientHeight:i}=this._resizeTo;e=r,t=i}this.renderer.resize(e,t),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}n.extension=i.Ag.Application;var s=r(4458),a=r(7309);class o{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,s.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?a.R.shared:new a.R,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}o.extension=i.Ag.Application,i.XO.add(n),i.XO.add(o)},9935:(e,t,r)=>{var i=r(8507);class n{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}n.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"filter"};var s=r(9313),a=r(5101),o=r(3513),l=r(6011),d=r(5811),h=r(4492),u=r(2437),c=r(5099),p=r(9636),f=r(2208);const g=new s.u;function m(e,t){t.clear(),x(e,t),t.isValid||t.set(0,0,0,0);const r=e.renderGroup||e.parentRenderGroup;return t.applyMatrix(r.worldTransform),t}function x(e,t){if(7!==e.localDisplayStatus||!e.measurable)return;const r=!!e.effects.length;let i=t;if((e.renderGroup||r)&&(i=f.o.get().clear()),e.boundsArea)t.addRect(e.boundsArea,e.worldTransform);else{if(e.renderPipeId){const t=e.bounds;i.addFrame(t.minX,t.minY,t.maxX,t.maxY,e.groupTransform)}const t=e.children;for(let e=0;e<t.length;e++)x(t[e],i)}if(r){let r=!1;const n=e.renderGroup||e.parentRenderGroup;for(let t=0;t<e.effects.length;t++)e.effects[t].addBounds&&(r||(r=!0,i.applyMatrix(n.worldTransform)),e.effects[t].addBounds(i,!0));r&&(i.applyMatrix(n.worldTransform.copyTo(g).invert()),t.addBounds(i,e.relativeGroupTransform)),t.addBounds(i),f.o.return(i)}else e.renderGroup&&(t.addBounds(i,e.relativeGroupTransform),f.o.return(i))}var _=r(268);const b=new l.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class y{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new d.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new o.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const i=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,0===r.length)return void(i.skip=!0);const n=i.bounds;if(e.renderables?function(e,t){t.clear();const r=t.matrix;for(let r=0;r<e.length;r++){const i=e[r];i.globalDisplayStatus<7||(t.matrix=i.worldTransform,t.addBounds(i.bounds))}t.matrix=r}(e.renderables,n):e.filterEffect.filterArea?(n.clear(),n.addRect(e.filterEffect.filterArea),n.applyMatrix(e.container.worldTransform)):m(e.container,n),e.container){const t=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;t&&n.applyMatrix(t)}const s=t.renderTarget.renderTarget.colorTexture.source;let a=1/0,o=0,l=!0,d=!1,h=!1,c=!0;for(let e=0;e<r.length;e++){const i=r[e];if(a=Math.min(a,"inherit"===i.resolution?s._resolution:i.resolution),o+=i.padding,"off"===i.antialias?l=!1:"inherit"===i.antialias&&l&&(l=s.antialias),i.clipToViewport||(c=!1),!(i.compatibleRenderers&t.type)){h=!1;break}if(i.blendRequired&&!(t.backBuffer?.useBackBuffer??1)){(0,_.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),h=!1;break}h=i.enabled||h,d||(d=i.blendRequired)}if(h){if(c){const e=t.renderTarget.rootViewPort,r=t.renderTarget.renderTarget.resolution;n.fitBounds(0,e.width/r,0,e.height/r)}n.scale(a).ceil().scale(1/a).pad(0|o),n.isPositive?(i.skip=!1,i.bounds=n,i.blendRequired=d,i.container=e.container,i.filterEffect=e.filterEffect,i.previousRenderSurface=t.renderTarget.renderSurface,i.inputTexture=u.W.getOptimalTexture(n.width,n.height,a,l),t.renderTarget.bind(i.inputTexture,!0),t.globalUniforms.push({offset:n})):i.skip=!0}else i.skip=!0}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,i=t.bounds;let n=h.g.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const r=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,s=e.renderTarget.getRenderTarget(t.previousRenderSurface);n=this.getBackTexture(s,i,r)}t.backTexture=n;const s=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(n.source,3),e.globalUniforms.pop(),1===s.length)s[0].apply(this,r,t.previousRenderSurface,!1),u.W.returnTexture(r);else{let e=t.inputTexture,r=u.W.getOptimalTexture(i.width,i.height,e.source._resolution,!1),n=0;for(n=0;n<s.length-1;++n){s[n].apply(this,e,r,!0);const t=e;e=r,r=t}s[n].apply(this,e,t.previousRenderSurface,!1),u.W.returnTexture(e),u.W.returnTexture(r)}t.blendRequired&&u.W.returnTexture(n)}getBackTexture(e,t,r){const i=e.colorTexture.source._resolution,n=u.W.getOptimalTexture(t.width,t.height,i,!1);let s=t.minX,a=t.minY;r&&(s-=r.minX,a-=r.minY),s=Math.floor(s*i),a=Math.floor(a*i);const o=Math.ceil(t.width*i),l=Math.ceil(t.height*i);return this.renderer.renderTarget.copyToTexture(e,n,{x:s,y:a},{width:o,height:l},{x:0,y:0}),n}applyFilter(e,t,r,i){const n=this.renderer,s=this._filterStack[this._filterStackIndex],o=s.bounds,l=a.b.shared,d=s.previousRenderSurface===r;let u=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,p=this._filterStackIndex-1;for(;p>0&&this._filterStack[p].skip;)--p;p>0&&(u=this._filterStack[p].inputTexture.source._resolution);const f=this._filterGlobalUniforms,g=f.uniforms,m=g.uOutputFrame,x=g.uInputSize,_=g.uInputPixel,y=g.uInputClamp,v=g.uGlobalFrame,T=g.uOutputTexture;if(d){let e=this._filterStackIndex;for(;e>0;){e--;const t=this._filterStack[this._filterStackIndex-1];if(!t.skip){l.x=t.bounds.minX,l.y=t.bounds.minY;break}}m[0]=o.minX-l.x,m[1]=o.minY-l.y}else m[0]=0,m[1]=0;m[2]=t.frame.width,m[3]=t.frame.height,x[0]=t.source.width,x[1]=t.source.height,x[2]=1/x[0],x[3]=1/x[1],_[0]=t.source.pixelWidth,_[1]=t.source.pixelHeight,_[2]=1/_[0],_[3]=1/_[1],y[0]=.5*_[2],y[1]=.5*_[3],y[2]=t.frame.width*x[2]-.5*_[2],y[3]=t.frame.height*x[3]-.5*_[3];const S=this.renderer.renderTarget.rootRenderTarget.colorTexture;v[0]=l.x*u,v[1]=l.y*u,v[2]=S.source.width*u,v[3]=S.source.height*u;const w=this.renderer.renderTarget.getRenderTarget(r);if(n.renderTarget.bind(r,!!i),r instanceof h.g?(T[0]=r.frame.width,T[1]=r.frame.height):(T[0]=w.width,T[1]=w.height),T[2]=w.isRoot?-1:1,f.update(),n.renderPipes.uniformBatch){const e=n.renderPipes.uniformBatch.getUboResource(f);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(f,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,n.encoder.draw({geometry:b,shader:e,state:e._state,topology:"triangle-list"}),n.type===c.W.WEBGL&&n.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new p.c,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,i=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),n=t.worldTransform.copyTo(s.u.shared),a=t.renderGroup||t.parentRenderGroup;return a&&a.cacheToLocalTransform&&n.prepend(a.cacheToLocalTransform),n.invert(),i.prepend(n),i.scale(1/t.texture.frame.width,1/t.texture.frame.height),i.translate(t.anchor.x,t.anchor.y),i}}y.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem],name:"filter"},i.XO.add(y),i.XO.add(n)},2067:(e,t,r)=>{r.d(t,{Ls:()=>i,_Q:()=>n,mA:()=>s});const i={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},n={...i,vertex:{...i.vertex,header:i.vertex.header.replace("group(1)","group(2)")}},s={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},7547:(e,t,r)=>{r.d(t,{U:()=>s});const i={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8,min:9,max:10},n=class e{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(1&this.data)}set blend(e){!!(1&this.data)!==e&&(this.data^=1)}get offsets(){return!!(2&this.data)}set offsets(e){!!(2&this.data)!==e&&(this.data^=2)}set cullMode(e){"none"!==e?(this.culling=!0,this.clockwiseFrontFace="front"===e):this.culling=!1}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(4&this.data)}set culling(e){!!(4&this.data)!==e&&(this.data^=4)}get depthTest(){return!!(8&this.data)}set depthTest(e){!!(8&this.data)!==e&&(this.data^=8)}get depthMask(){return!!(32&this.data)}set depthMask(e){!!(32&this.data)!==e&&(this.data^=32)}get clockwiseFrontFace(){return!!(16&this.data)}set clockwiseFrontFace(e){!!(16&this.data)!==e&&(this.data^=16)}get blendMode(){return this._blendMode}set blendMode(e){this.blend="none"!==e,this._blendMode=e,this._blendModeId=i[e]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){this.offsets=!!e,this._polygonOffset=e}toString(){return`[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`}static for2d(){const t=new e;return t.depthTest=!1,t.blend=!0,t}};n.default2d=n.for2d();let s=n},2760:(e,t,r)=>{function i(e,t,r){const i=(e>>24&255)/255;t[r++]=(255&e)/255*i,t[r++]=(e>>8&255)/255*i,t[r++]=(e>>16&255)/255*i,t[r++]=i}r.d(t,{V:()=>i})},8928:(e,t,r)=>{var i=r(8507),n=r(3302),s=r(7547),a=r(8218),o=r(2760),l=r(6954);class d{constructor(e,t){this.state=s.U.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],i=this.renderer.graphicsContext.updateGpuContext(t);return!(!i.isBatchable&&r===i.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let e=0;e<t.length;e++){const r=t[e];r._batcher.updateElement(r)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const n=i.resources.localUniforms.uniforms;n.uTransformMatrix=e.groupTransform,n.uRound=t._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,n.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,i=this._getBatchesForRenderable(e);for(let e=0;e<i.length;e++){const n=i[e];r.addToBatch(n,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),i=this.renderer._roundPixels|e._roundPixels,n=r.batches.map((t=>{const r=a.Z.get(l.G);return t.copyTo(r),r.renderable=e,r.roundPixels=i,r}));return void 0===this._graphicsBatchesHash[e.uid]&&e.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[e.uid]=n,n}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach((e=>{a.Z.return(e)})),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}d.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"graphics"},i.XO.add(d),i.XO.add(n.GH)},5285:(e,t,r)=>{var i=r(8507),n=r(9313),s=r(3513),a=r(5811),o=r(8639),l=r(8218),d=r(2760),h=r(8734);class u{constructor(e,t){this.localUniforms=new a.k({uTransformMatrix:{value:new n.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new s.T({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),e.renderableGC.addManagedHash(this,"_gpuBatchableMeshHash"),e.renderableGC.addManagedHash(this,"_meshDataHash")}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,i=e.batched;if(t.batched=i,r!==i)return!0;if(i){const r=e._geometry;if(r.indices.length!==t.indexSize||r.positions.length!==t.vertexSize)return t.indexSize=r.indices.length,t.vertexSize=r.positions.length,!0;const i=this._getBatchableMesh(e);return!i._batcher.checkAndUpdateTexture(i,e.texture)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:i}=this._getMeshData(e);if(i){const i=this._getBatchableMesh(e);i.texture=e._texture,i.geometry=e._geometry,r.addToBatch(i,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.texture=e._texture,t.geometry=e._geometry,t._batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(l.Z.return(t),this._gpuBatchableMeshHash[e.uid]=null),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;e.state.blendMode=(0,o.i)(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),(0,d.V)(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){return this._meshDataHash[e.uid]={batched:e.batched,indexSize:e._geometry.indices?.length,vertexSize:e._geometry.positions?.length},e.on("destroyed",this._destroyRenderableBound),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=l.Z.get(h.U);return t.renderable=e,t.texture=e._texture,t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&l.Z.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}u.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"mesh"},i.XO.add(u)},8734:(e,t,r)=>{r.d(t,{U:()=>i});class i{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(e){this._topology=e}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get uvs(){const e=this.geometry.getBuffer("aUV"),t=e.data;let r=t;const i=this.texture.textureMatrix;return i.isSimple||(r=this._transformedUvs,this._textureMatrixUpdateId===i._updateID&&this._uvUpdateId===e._updateID||((!r||r.length<t.length)&&(r=this._transformedUvs=new Float32Array(t.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=e._updateID,i.multiplyUvs(t,r))),r}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},5060:(e,t,r)=>{r.d(t,{u:()=>l});var i=r(949),n=r(1132),s=r(6011),a=r(4670);const o=class e extends s.V{constructor(...t){let r=t[0]??{};r instanceof Float32Array&&((0,a.t6)(a.lj,"use new MeshGeometry({ positions, uvs, indices }) instead"),r={positions:r,uvs:t[1],indices:t[2]}),r={...e.defaultOptions,...r};const s=r.positions||new Float32Array([0,0,1,0,1,1,0,1]),o=r.uvs||new Float32Array([0,0,1,0,1,1,0,1]),l=r.indices||new Uint32Array([0,1,2,0,2,3]),d=r.shrinkBuffersToFit;super({attributes:{aPosition:{buffer:new i.h({data:s,label:"attribute-mesh-positions",shrinkToFit:d,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0},aUV:{buffer:new i.h({data:o,label:"attribute-mesh-uvs",shrinkToFit:d,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0}},indexBuffer:new i.h({data:l,label:"index-mesh-buffer",shrinkToFit:d,usage:n.S.INDEX|n.S.COPY_DST}),topology:r.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};o.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let l=o},9305:(e,t,r)=>{var i=r(8507);class n{execute(e,t){const r=e.state,i=e.renderer,n=t.shader||e.defaultShader;n.resources.uTexture=t.texture._source,n.resources.uniforms=e.localUniforms;const s=i.gl,a=e.getBuffers(t);i.shader.bind(n),i.state.set(r),i.geometry.bind(a.geometry,n.glProgram);const o=2===a.geometry.indexBuffer.data.BYTES_PER_ELEMENT?s.UNSIGNED_SHORT:s.UNSIGNED_INT;s.drawElements(s.TRIANGLES,6*t.particleChildren.length,o,0)}}var s=r(9313),a=r(5811),o=r(8639),l=r(7547),d=r(2760),h=r(949),u=r(1132),c=r(6011),p=r(8306),f=r(1460);function g(e,t=null){const r=6*e;if(r>65535?t||(t=new Uint32Array(r)):t||(t=new Uint16Array(r)),t.length!==r)throw new Error(`Out buffer length is incorrect, got ${t.length} and expected ${r}`);for(let e=0,i=0;e<r;e+=6,i+=4)t[e+0]=i+0,t[e+1]=i+1,t[e+2]=i+2,t[e+3]=i+0,t[e+4]=i+2,t[e+5]=i+3;return t}function m(e,t){const r=[];r.push("\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            ");let i=0;for(const n in e){const s=e[n];t===s.dynamic&&(r.push(`offset = index + ${i}`),r.push(s.code),i+=(0,p.m)(s.format).stride/4)}r.push("\n            index += stride * 4;\n        }\n    "),r.unshift(`\n        var stride = ${i};\n    `);const n=r.join("\n");return new Function("ps","f32v","u32v",n)}class x{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,r=e.properties;let i=0,n=0;for(const e in r){const t=r[e],s=(0,p.m)(t.format);t.dynamic?n+=s.stride:i+=s.stride}this._dynamicStride=n/4,this._staticStride=i/4,this.staticAttributeBuffer=new f.u(4*t*i),this.dynamicAttributeBuffer=new f.u(4*t*n),this.indexBuffer=g(t);const s=new c.V;let a=0,o=0;this._staticBuffer=new h.h({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST}),this._dynamicBuffer=new h.h({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST});for(const e in r){const t=r[e],i=(0,p.m)(t.format);t.dynamic?(s.addAttribute(t.attributeName,{buffer:this._dynamicBuffer,stride:4*this._dynamicStride,offset:4*a,format:t.format}),a+=i.size):(s.addAttribute(t.attributeName,{buffer:this._staticBuffer,stride:4*this._staticStride,offset:4*o,format:t.format}),o+=i.size)}s.addIndex(this.indexBuffer);const l=this.getParticleUpdate(r);this._dynamicUpload=l.dynamicUpdate,this._staticUpload=l.staticUpdate,this.geometry=s}getParticleUpdate(e){const t=function(e){const t=[];for(const r in e){const i=e[r];t.push(r,i.code,i.dynamic?"d":"s")}return t.join("_")}(e);return this._generateParticleUpdateCache[t]||(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e)),this._generateParticleUpdateCache[t]}generateParticleUpdate(e){return function(e){return{dynamicUpdate:m(e,!0),staticUpdate:m(e,!1)}}(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,1.5*this._size|0),this.staticAttributeBuffer=new f.u(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new f.u(this._size*this._dynamicStride*4*4),this.indexBuffer=g(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const t=this.staticAttributeBuffer;this._staticUpload(e,t.float32View,t.uint32View),this._staticBuffer.setDataWithSize(t.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}var _=r(2577),b=r(9113),y=r(3012),v=r(8475),T=r(4492),S=r(218),w="\nstruct ParticleUniforms {\n  uProjectionMatrix:mat3x3<f32>,\n  uColor:vec4<f32>,\n  uResolution:vec2<f32>,\n  uRoundPixels:f32,\n};\n\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\n\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\n@group(1) @binding(1) var uSampler : sampler;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n@vertex\nfn mainVertex(\n  @location(0) aVertex: vec2<f32>,\n  @location(1) aPosition: vec2<f32>,\n  @location(2) aUV: vec2<f32>,\n  @location(3) aColor: vec4<f32>,\n  @location(4) aRotation: f32,\n) -> VSOutput {\n  \n   let v = vec2(\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\n   ) + aPosition;\n\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\n\n  return VSOutput(\n   position,\n   aUV,\n   vColor,\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>,\n  @builtin(position) position: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var sample = textureSample(uTexture, uSampler, uv) * color;\n   \n    return sample;\n}";class C extends v.M{constructor(){super({glProgram:b.M.from({vertex:"attribute vec2 aVertex;\nattribute vec2 aUV;\nattribute vec4 aColor;\n\nattribute vec2 aPosition;\nattribute float aRotation;\n\nuniform mat3 uTranslationMatrix;\nuniform float uRound;\nuniform vec2 uResolution;\nuniform vec4 uColor;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n\nvec2 roundPixels(vec2 position, vec2 targetSize)\n{       \n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\nvoid main(void){\n    float cosRotation = cos(aRotation);\n    float sinRotation = sin(aRotation);\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\n\n    vec2 v = vec2(x, y);\n    v = v + aPosition;\n\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    if(uRound == 1.0)\n    {\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n    }\n\n    vUV = aUV;\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\n}\n",fragment:"varying vec2 vUV;\nvarying vec4 vColor;\n\nuniform sampler2D uTexture;\n\nvoid main(void){\n    vec4 color = texture2D(uTexture, vUV) * vColor;\n    gl_FragColor = color;\n}"}),gpuProgram:y.B.from({fragment:{source:w,entryPoint:"mainFragment"},vertex:{source:w,entryPoint:"mainVertex"}}),resources:{uTexture:T.g.WHITE.source,uSampler:new S.n({}),uniforms:{uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new _.Q(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class M{constructor(e,t){this.state=l.U.for2d(),this._gpuBufferHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.localUniforms=new a.k({uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new C,this.state=l.U.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return this._gpuBufferHash[e.uid]||this._initBuffer(e)}_initBuffer(e){return this._gpuBufferHash[e.uid]=new x({size:e.particleChildren.length,properties:e._properties}),e.on("destroyed",this._destroyRenderableBound),this._gpuBufferHash[e.uid]}updateRenderable(e){}destroyRenderable(e){this._gpuBufferHash[e.uid].destroy(),this._gpuBufferHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}execute(e){const t=e.particleChildren;if(0===t.length)return;const r=this.renderer,i=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const n=this.state;i.update(t,e._childrenDirty),e._childrenDirty=!1,n.blendMode=(0,o.i)(e.blendMode,e.texture._source);const s=this.localUniforms.uniforms,a=s.uTranslationMatrix;e.worldTransform.copyTo(a),a.prepend(r.globalUniforms.globalUniformData.projectionMatrix),s.uResolution=r.globalUniforms.globalUniformData.resolution,s.uRound=r._roundPixels|e._roundPixels,(0,d.V)(e.groupColorAlpha,s.uColor,0),this.adaptor.execute(this,e)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class R extends M{constructor(e){super(e,new n)}}R.extension={type:[i.Ag.WebGLPipes],name:"particle"};class B{execute(e,t){const r=e.renderer,i=t.shader||e.defaultShader;i.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),i.groups[1]=r.texture.getTextureBindGroup(t.texture);const n=e.state,s=e.getBuffers(t);r.encoder.draw({geometry:s.geometry,shader:t.shader||e.defaultShader,state:n,size:6*t.particleChildren.length})}}class U extends M{constructor(e){super(e,new B)}}U.extension={type:[i.Ag.WebGPUPipes],name:"particle"},i.XO.add(R),i.XO.add(U)},7252:(e,t,r)=>{var i=r(8507),n=r(8218),s=r(8734),a=r(4670),o=r(5060);const l=class e extends o.u{constructor(...e){super({});let t=e[0]??{};"number"==typeof t&&((0,a.t6)(a.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(t){t={...e.defaultOptions,...t},this.verticesX=this.verticesX??t.verticesX,this.verticesY=this.verticesY??t.verticesY,this.width=this.width??t.width,this.height=this.height??t.height;const r=this.verticesX*this.verticesY,i=[],n=[],s=[],a=this.verticesX-1,o=this.verticesY-1,l=this.width/a,d=this.height/o;for(let e=0;e<r;e++){const t=e%this.verticesX,r=e/this.verticesX|0;i.push(t*l,r*d),n.push(t/a,r/o)}const h=a*o;for(let e=0;e<h;e++){const t=e%a,r=e/a|0,i=r*this.verticesX+t,n=r*this.verticesX+t+1,o=(r+1)*this.verticesX+t,l=(r+1)*this.verticesX+t+1;s.push(i,n,o,n,l,o)}this.buffers[0].data=new Float32Array(i),this.buffers[1].data=new Float32Array(n),this.indexBuffer.data=new Uint32Array(s),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};l.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let d=l;const h=class e extends d{constructor(t={}){super({width:(t={...e.defaultOptions,...t}).width,height:t.height,verticesX:4,verticesY:4}),this.update(t)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,t=this._leftWidth+this._rightWidth,r=this.width>t?1:this.width/t,i=this._topHeight+this._bottomHeight,n=this.height>i?1:this.height/i,s=Math.min(r,n);e[9]=e[11]=e[13]=e[15]=this._topHeight*s,e[17]=e[19]=e[21]=e[23]=this.height-this._bottomHeight*s,e[25]=e[27]=e[29]=e[31]=this.height,e[2]=e[10]=e[18]=e[26]=this._leftWidth*s,e[4]=e[12]=e[20]=e[28]=this.width-this._rightWidth*s,e[6]=e[14]=e[22]=e[30]=this.width,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};h.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let u=h;class c{constructor(e){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuSpriteHash")}addRenderable(e,t){const r=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=this._getGpuSprite(e);return!t._batcher.checkAndUpdateTexture(t,e._texture)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];n.Z.return(t.geometry),n.Z.return(t),this._gpuSpriteHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(e,t){t.geometry.update(e),t.texture=e._texture}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=n.Z.get(s.U);return t.geometry=n.Z.get(u),t.renderable=e,t.transform=e.groupTransform,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.didViewUpdate||this._updateBatchableSprite(e,t),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}c.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"nineSliceSprite"},i.XO.add(c)},8723:(e,t,r)=>{var i=r(8507),n=r(8639),s=r(7547),a=r(5099),o=r(2760),l=r(8734),d=r(5060),h=r(9313),u=r(5611),c=r(2067),p=r(6665),f=r(8475),g=r(5811),m=r(4492);const x={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},_={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        "}};let b,y;class v extends f.M{constructor(){b??(b=(0,u.v)({name:"tiling-sprite-shader",bits:[c.Ls,x,p.b]})),y??(y=(0,u.I)({name:"tiling-sprite-shader",bits:[c.mA,_,p.m]}));const e=new g.k({uMapCoord:{value:new h.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new h.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:y,gpuProgram:b,resources:{localUniforms:new g.k({uTransformMatrix:{value:new h.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:m.g.EMPTY.source,uSampler:m.g.EMPTY.source.style}})}updateUniforms(e,t,r,i,n,s){const a=this.resources.tilingUniforms,o=s.width,l=s.height,d=s.textureMatrix,h=a.uniforms.uTextureTransform;h.set(r.a*o/e,r.b*o/t,r.c*l/e,r.d*l/t,r.tx/e,r.ty/t),h.invert(),a.uniforms.uMapCoord=d.mapCoord,a.uniforms.uClampFrame=d.uClampFrame,a.uniforms.uClampOffset=d.uClampOffset,a.uniforms.uTextureTransform=h,a.uniforms.uSizeAnchor[0]=e,a.uniforms.uSizeAnchor[1]=t,a.uniforms.uSizeAnchor[2]=i,a.uniforms.uSizeAnchor[3]=n,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class T extends d.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const S=new T;class w{constructor(e){this._state=s.U.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_tilingSpriteDataHash")}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const i=t.canBatch;if(i&&i===r){const{batchableMesh:r}=t;return!r._batcher.checkAndUpdateTexture(r,e.texture)}return r!==i}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const i=this._getTilingSpriteData(e),{geometry:n,canBatch:s}=i;if(s){i.batchableMesh||(i.batchableMesh=new l.U);const s=i.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),s.geometry=n,s.renderable=e,s.transform=e.groupTransform,s.texture=e._texture),s.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(s,t)}else r.break(t),i.shader||(i.shader=new v),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,r.uColor,0),this._state.blendMode=(0,n.i)(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:S,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:r}=t;e.didViewUpdate&&this._updateBatchableMesh(e),r._batcher.updateElement(r)}else if(e.didViewUpdate){const{shader:r}=t;r.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}destroyRenderable(e){const t=this._getTilingSpriteData(e);t.batchableMesh=null,t.shader?.destroy(),this._tilingSpriteDataHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new d.u({indices:S.indices,positions:S.positions.slice(),uvs:S.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,i=e.texture.source.style;"repeat"!==i.addressMode&&(i.addressMode="repeat",i.update()),function(e,t){const r=e.texture,i=r.frame.width,n=r.frame.height;let s=0,a=0;e.applyAnchorToTexture&&(s=e.anchor.x,a=e.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-a,t[5]=t[7]=1-a;const o=h.u.shared;o.copyFrom(e._tileTransform.matrix),o.tx/=e.width,o.ty/=e.height,o.invert(),o.scale(e.width/i,e.height/n),function(e,t,r,i){let n=0;const s=e.length/2,a=i.a,o=i.b,l=i.c,d=i.d,h=i.tx,u=i.ty;for(r*=2;n<s;){const t=e[r],i=e[r+1];e[r]=a*t+l*i+h,e[r+1]=o*t+d*i+u,r+=2,n++}}(t,0,0,o)}(e,r.uvs),function(e,t){const r=e.anchor.x,i=e.anchor.y;t[0]=-r*e.width,t[1]=-i*e.height,t[2]=(1-r)*e.width,t[3]=-i*e.height,t[4]=(1-r)*e.width,t[5]=(1-i)*e.height,t[6]=-r*e.width,t[7]=(1-i)*e.height}(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let i=!0;return this._renderer.type===a.W.WEBGL&&(i=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(i||r.source.isPowerOfTwo),t.canBatch}}w.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"tilingSprite"},i.XO.add(w)},8422:(e,t,r)=>{r.d(t,{K:()=>i});class i{constructor(){this.batcherName="default",this.topology="triangle-list",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}}},4243:(e,t,r)=>{var i=r(8507),n=r(1979),s=r(8218),a=r(4670),o=r(4985),l=r(4835);class d extends o.l{constructor(e){e instanceof l.T&&(e={context:e});const{context:t,roundPixels:r,...i}=e||{};super({label:"Graphics",...i}),this.renderPipeId="graphics",this._context=t||(this._ownedContext=new l.T),this._context.on("update",this.onViewUpdate,this),this.allowChildren=!1,this.roundPixels=r??!1}set context(e){e!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=e,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}updateBounds(){}containsPoint(e){return this._context.containsPoint(e)}destroy(e){this._ownedContext&&!e?this._ownedContext.destroy(e):!0!==e&&!0!==e?.context||this._context.destroy(e),this._ownedContext=null,this._context=null,super.destroy(e)}_callContextMethod(e,t){return this.context[e](...t),this}setFillStyle(...e){return this._callContextMethod("setFillStyle",e)}setStrokeStyle(...e){return this._callContextMethod("setStrokeStyle",e)}fill(...e){return this._callContextMethod("fill",e)}stroke(...e){return this._callContextMethod("stroke",e)}texture(...e){return this._callContextMethod("texture",e)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...e){return this._callContextMethod("arc",e)}arcTo(...e){return this._callContextMethod("arcTo",e)}arcToSvg(...e){return this._callContextMethod("arcToSvg",e)}bezierCurveTo(...e){return this._callContextMethod("bezierCurveTo",e)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...e){return this._callContextMethod("ellipse",e)}circle(...e){return this._callContextMethod("circle",e)}path(...e){return this._callContextMethod("path",e)}lineTo(...e){return this._callContextMethod("lineTo",e)}moveTo(...e){return this._callContextMethod("moveTo",e)}quadraticCurveTo(...e){return this._callContextMethod("quadraticCurveTo",e)}rect(...e){return this._callContextMethod("rect",e)}roundRect(...e){return this._callContextMethod("roundRect",e)}poly(...e){return this._callContextMethod("poly",e)}regularPoly(...e){return this._callContextMethod("regularPoly",e)}roundPoly(...e){return this._callContextMethod("roundPoly",e)}roundShape(...e){return this._callContextMethod("roundShape",e)}filletRect(...e){return this._callContextMethod("filletRect",e)}chamferRect(...e){return this._callContextMethod("chamferRect",e)}star(...e){return this._callContextMethod("star",e)}svg(...e){return this._callContextMethod("svg",e)}restore(...e){return this._callContextMethod("restore",e)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...e){return this._callContextMethod("rotate",e)}scaleTransform(...e){return this._callContextMethod("scale",e)}setTransform(...e){return this._callContextMethod("setTransform",e)}transform(...e){return this._callContextMethod("transform",e)}translateTransform(...e){return this._callContextMethod("translate",e)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(e){this._context.fillStyle=e}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(e){this._context.strokeStyle=e}clone(e=!1){return e?new d(this._context.clone()):(this._ownedContext=null,new d(this._context))}lineStyle(e,t,r){(0,a.t6)(a.lj,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const i={};return e&&(i.width=e),t&&(i.color=t),r&&(i.alpha=r),this.context.strokeStyle=i,this}beginFill(e,t){(0,a.t6)(a.lj,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const r={};return void 0!==e&&(r.color=e),void 0!==t&&(r.alpha=t),this.context.fillStyle=r,this}endFill(){(0,a.t6)(a.lj,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const e=this.context.strokeStyle;return e.width===l.T.defaultStrokeStyle.width&&e.color===l.T.defaultStrokeStyle.color&&e.alpha===l.T.defaultStrokeStyle.alpha||this.context.stroke(),this}drawCircle(...e){return(0,a.t6)(a.lj,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",e)}drawEllipse(...e){return(0,a.t6)(a.lj,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",e)}drawPolygon(...e){return(0,a.t6)(a.lj,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",e)}drawRect(...e){return(0,a.t6)(a.lj,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",e)}drawRoundedRect(...e){return(0,a.t6)(a.lj,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",e)}drawStar(...e){return(0,a.t6)(a.lj,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",e)}}var h=r(9313),u=r(6563),c=r(5611),p=r(4459),f=r(4e3),g=r(6665),m=r(6040),x=r(8475),_=r(5811);const b={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:" \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},y={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:" \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},v={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        "}},T={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        "}};let S,w;class C extends x.M{constructor(){const e=new _.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new h.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=(0,u.a)();S??(S=(0,c.v)({name:"sdf-shader",bits:[p.F,(0,f._)(t),b,v,g.b]})),w??(w=(0,c.I)({name:"sdf-shader",bits:[p.a,(0,f.P)(t),y,T,g.m]})),super({glProgram:w,gpuProgram:S,resources:{localUniforms:e,batchSamplers:(0,m.n)(t)}})}}var M=r(1312),R=r(2763);class B{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);U(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(s.Z.return(t.customShader),t.customShader=null),s.Z.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);U(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,i=M.c.getFont(e.text,e._style);r.clear(),"none"!==i.distanceField.type&&(r.customShader||(r.customShader=s.Z.get(C)));const n=Array.from(e.text),a=e._style;let o=i.baseLineOffset;const l=(0,R.Z)(n,a,i,!0);let d=0;const h=a.padding,u=l.scale;let c=l.width,p=l.height+l.offsetY;a._stroke&&(c+=a._stroke.width/u,p+=a._stroke.width/u),r.translate(-e._anchor._x*c-h,-e._anchor._y*p-h).scale(u,u);const f=i.applyFillAsTint?a._fill.color:16777215;for(let e=0;e<l.lines.length;e++){const t=l.lines[e];for(let e=0;e<t.charPositions.length;e++){const s=n[d++],a=i.chars[s];a?.texture&&r.texture(a.texture,f||"black",Math.round(t.charPositions[e]+a.xOffset),Math.round(o+a.yOffset))}o+=i.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=s.Z.get(d);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,i=n.l.get(`${r}-bitmap`),{a:s,b:a,c:o,d:l}=e.groupTransform,d=Math.sqrt(s*s+a*a),h=Math.sqrt(o*o+l*l),u=(Math.abs(d)+Math.abs(h))/2,c=i.baseRenderedFontSize/e._style.fontSize,p=u*i.distanceField.range*(1/c);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}function U(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}B.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"bitmapText"},i.XO.add(B)},9147:(e,t,r)=>{var i=r(8507),n=r(4492),s=r(2048),a=r(8218),o=r(8422);class l{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e,t){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),a.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),i=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch((e=>{console.error(e)})),e._didTextUpdate=!1;const n=e._style.padding;(0,s.y)(i.bounds,e._anchor,i.texture,n)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const i=e.resolution??this._renderer.resolution,n=await this._renderer.htmlText.getManagedTexture(e.text,i,e._style,e._getKey()),a=t.batchableSprite;a.texture=t.texture=n,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate();const o=e._style.padding;(0,s.y)(a.bounds,e._anchor,a.texture,o)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:n.g.EMPTY,currentKey:"--",batchableSprite:a.Z.get(o.K),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.transform=e.groupTransform,r.texture=n.g.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}l.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"htmlText"};var d=r(7608),h=r(2437),u=r(5099),c=r(1761),p=r(268),f=r(2558);const g="http://www.w3.org/2000/svg",m="http://www.w3.org/1999/xhtml";class x{constructor(){this.svgRoot=document.createElementNS(g,"svg"),this.foreignObject=document.createElementNS(g,"foreignObject"),this.domElement=document.createElementNS(m,"div"),this.styleElement=document.createElementNS(m,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:r,domElement:i}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(i)}}var _=r(8291),b=r(8011),y=r(2577);function v(e){const t=y.Q.shared.setValue(e.color).setAlpha(e.alpha).toHexa(),r=`${Math.round(Math.cos(e.angle)*e.distance)}px ${Math.round(Math.sin(e.angle)*e.distance)}px`;return e.blur>0?`text-shadow: ${r} ${e.blur}px ${t}`:`text-shadow: ${r} ${t}`}function T(e){return[`-webkit-text-stroke-width: ${e.width}px`,`-webkit-text-stroke-color: ${y.Q.shared.setValue(e.color).toHex()}`,`text-stroke-width: ${e.width}px`,`text-stroke-color: ${y.Q.shared.setValue(e.color).toHex()}`,"paint-order: stroke"].join(";")}const S={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},w={fill:e=>`color: ${y.Q.shared.setValue(e).toHex()}`,breakWords:e=>"word-wrap: "+(e?"break-all":"break-word"),stroke:T,dropShadow:v};class C extends _.x{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=(0,b.V)(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new C({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=function(e){const t=e._stroke,r=e._fill,i=[`div { ${[`color: ${y.Q.shared.setValue(r.color).toHex()}`,`font-size: ${e.fontSize}px`,`font-family: ${e.fontFamily}`,`font-weight: ${e.fontWeight}`,`font-style: ${e.fontStyle}`,`font-variant: ${e.fontVariant}`,`letter-spacing: ${e.letterSpacing}px`,`text-align: ${e.align}`,`padding: ${e.padding}px`,`white-space: ${"pre"===e.whiteSpace&&e.wordWrap?"pre-wrap":e.whiteSpace}`,...e.lineHeight?[`line-height: ${e.lineHeight}px`]:[],...e.wordWrap?["word-wrap: "+(e.breakWords?"break-all":"break-word"),`max-width: ${e.wordWrapWidth}px`]:[],...t?[T(t)]:[],...e.dropShadow?[v(e.dropShadow)]:[],...e.cssOverrides].join(";")} }`];return function(e,t){for(const r in e){const i=e[r],n=[];for(const e in i)w[e]?n.push(w[e](i[e])):S[e]&&n.push(S[e].replace("{{VALUE}}",i[e]));t.push(`${r} { ${n.join(";")} }`)}}(e.tagStyles,i),i.join(" ")}(this)),this._cssStyle}addOverride(...e){const t=e.filter((e=>!this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter((e=>this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides=this.cssOverrides.filter((e=>!t.includes(e))),this.update())}set fill(e){"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}var M=r(1979);async function R(e,t){const r=await async function(e){const t=await c.e.get().fetch(e),r=await t.blob(),i=new FileReader;return await new Promise(((e,t)=>{i.onloadend=()=>e(i.result),i.onerror=t,i.readAsDataURL(r)}))}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        src: url('${r}');\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n    }`}const B=new Map;let U;class P{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===u.W.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,i){if(this._activeTextures[i])return this._increaseReferenceCount(i),this._activeTextures[i].promise;const n=this._buildTexturePromise(e,t,r).then((e=>(this._activeTextures[i].texture=e,e)));return this._activeTextures[i]={texture:null,promise:n,usageCount:1},n}async _buildTexturePromise(e,t,r){const i=a.Z.get(x),n=function(e,t){const r=t.fontFamily,i=[],n={},s=e.match(/font-family:([^;"\s]+)/g);function a(e){n[e]||(i.push(e),n[e]=!0)}if(Array.isArray(r))for(let e=0;e<r.length;e++)a(r[e]);else a(r);s&&s.forEach((e=>{a(e.split(":")[1].trim())}));for(const e in t.tagStyles)a(t.tagStyles[e].fontFamily);return i}(e,r),s=await async function(e,t,r){const i=e.filter((e=>M.l.has(`${e}-and-url`))).map(((e,i)=>{if(!B.has(e)){const{url:n}=M.l.get(`${e}-and-url`);0===i?B.set(e,R({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:e},n)):B.set(e,R({fontWeight:r.fontWeight,fontStyle:r.fontStyle,fontFamily:e},n))}return B.get(e)}));return(await Promise.all(i)).join("\n")}(n,r,C.defaultTextStyle),o=function(e,t,r,i){i||(i=U||(U=new x));const{domElement:n,styleElement:s,svgRoot:a}=i;n.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,n.setAttribute("style","transform-origin: top left; display: inline-block"),r&&(s.textContent=r),document.body.appendChild(a);const o=n.getBoundingClientRect();a.remove();const l=2*t.padding;return{width:o.width-l,height:o.height-l}}(e,r,s,i),l=Math.ceil(Math.ceil(Math.max(1,o.width)+2*r.padding)*t),h=Math.ceil(Math.ceil(Math.max(1,o.height)+2*r.padding)*t),u=i.image;u.width=2+(0|l),u.height=2+(0|h);const p=function(e,t,r,i,n){const{domElement:s,styleElement:a,svgRoot:o}=n;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,s.setAttribute("style",`transform: scale(${r});transform-origin: top left; display: inline-block`),a.textContent=i;const{width:l,height:d}=n.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",d.toString()),(new XMLSerializer).serializeToString(o)}(e,r,t,s,i);await function(e,t,r){return new Promise((async i=>{r&&await new Promise((e=>setTimeout(e,100))),e.onload=()=>{i()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"}))}(u,p,function(){const{userAgent:e}=c.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(e)}()&&n.length>0);const g=u;let m;this._createCanvas&&(m=function(e,t){const r=d.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:i}=r;return i.clearRect(0,0,e.width,e.height),i.drawImage(e,0,0),r}(u,t));const _=(0,f.M)(m?m.canvas:g,u.width-2,u.height-2,t);return this._createCanvas&&(this._renderer.texture.initSource(_.source),d.N.returnCanvasAndContext(m)),a.Z.return(i),_}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,0===t.usageCount&&(t.texture?this._cleanUp(t):t.promise.then((e=>{t.texture=e,this._cleanUp(t)})).catch((()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")})),this._activeTextures[e]=null))}_cleanUp(e){h.W.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}P.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"htmlText"},P.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"},i.XO.add(P),i.XO.add(l)},6958:(e,t,r)=>{var i=r(8507),n=r(2048),s=r(8218),a=r(8422);class o{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.currentKey!==r}addRenderable(e,t){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),s.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),i=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1;const s=e._style.padding;(0,n.y)(i.bounds,e._anchor,i.texture,s)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=r.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:s.Z.get(a.K)};return t.batchableSprite.renderable=e,t.batchableSprite.transform=e.groupTransform,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._updateText(e),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}o.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"text"};var l=r(2577),d=r(9939),h=r(7608),u=r(2437),c=r(9252);function p(e,t,r){for(let i=0,n=4*r*t;i<t;++i,n+=4)if(0!==e[n+3])return!1;return!0}function f(e,t,r,i,n){const s=4*t;for(let t=i,a=i*s+4*r;t<=n;++t,a+=s)if(0!==e[a+3])return!1;return!0}var g=r(4670),m=r(8291),x=r(2558),_=r(4016),b=r(1242),y=r(3548);class v{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,r){const i=_.P.measureText(e||" ",r);let n=Math.ceil(Math.ceil(Math.max(1,i.width)+2*r.padding)*t),s=Math.ceil(Math.ceil(Math.max(1,i.height)+2*r.padding)*t);return n=Math.ceil(n-1e-6),s=Math.ceil(s-1e-6),n=(0,d.U5)(n),s=(0,d.U5)(s),{width:n,height:s}}getTexture(e,t,r,i){"string"==typeof e&&((0,g.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof m.x||(e.style=new m.x(e.style));const{texture:n,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(n._source),h.N.returnCanvasAndContext(s),n}createTextureAndCanvas(e){const{text:t,style:r}=e,i=e.resolution??this._renderer.resolution,n=_.P.measureText(t||" ",r),s=Math.ceil(Math.ceil(Math.max(1,n.width)+2*r.padding)*i),a=Math.ceil(Math.ceil(Math.max(1,n.height)+2*r.padding)*i),o=h.N.getOptimalCanvasAndContext(s,a),{canvas:l}=o;this.renderTextToCanvas(t,r,i,o);const d=(0,x.M)(l,s,a,i);if(r.trim){const e=function(e,t=1){const{width:r,height:i}=e,n=e.getContext("2d",{willReadFrequently:!0});if(null===n)throw new TypeError("Failed to get canvas 2D context");const s=n.getImageData(0,0,r,i).data;let a=0,o=0,l=r-1,d=i-1;for(;o<i&&p(s,r,o);)++o;if(o===i)return c.M.EMPTY;for(;p(s,r,d);)--d;for(;f(s,r,a,o,d);)++a;for(;f(s,r,l,o,d);)--l;return++l,++d,new c.M(a/t,o/t,(l-a)/t,(d-o)/t)}(l,i);d.frame.copyFrom(e),d.updateUvs()}return{texture:d,canvasAndContext:o}}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:r,canvasAndContext:i}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:i,texture:r,usageCount:1},r}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];if(t.usageCount--,0===t.usageCount){h.N.returnCanvasAndContext(t.canvasAndContext),u.W.returnTexture(t.texture);const r=t.texture.source;r.resource=null,r.uploadMethodId="unknown",r.alphaMode="no-premultiply-alpha",this._activeTextures[e]=null}}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,i){const{canvas:n,context:s}=i,a=(0,b.Z)(t),o=_.P.measureText(e||" ",t),d=o.lines,h=o.lineHeight,u=o.lineWidths,c=o.maxLineWidth,p=o.fontProperties,f=n.height;if(s.resetTransform(),s.scale(r,r),s.textBaseline=t.textBaseline,t._stroke?.width){const e=t._stroke;s.lineWidth=e.width,s.miterLimit=e.miterLimit,s.lineJoin=e.join,s.lineCap=e.cap}let g,m;s.font=a;const x=t.dropShadow?2:1;for(let e=0;e<x;++e){const n=t.dropShadow&&0===e,a=n?Math.ceil(Math.max(1,f)+2*t.padding):0,o=a*r;if(n){s.fillStyle="black",s.strokeStyle="black";const e=t.dropShadow,i=e.color,n=e.alpha;s.shadowColor=l.Q.shared.setValue(i).setAlpha(n).toRgbaString();const a=e.blur*r,d=e.distance*r;s.shadowBlur=a,s.shadowOffsetX=Math.cos(e.angle)*d,s.shadowOffsetY=Math.sin(e.angle)*d+o}else s.fillStyle=t._fill?(0,y.r)(t._fill,s):null,t._stroke?.width&&(s.strokeStyle=(0,y.r)(t._stroke,s)),s.shadowColor="black";let x=(h-p.fontSize)/2;h-p.fontSize<0&&(x=0);const _=t._stroke?.width??0;for(let e=0;e<d.length;e++)g=_/2,m=_/2+e*h+p.ascent+x,"right"===t.align?g+=c-u[e]:"center"===t.align&&(g+=(c-u[e])/2),t._stroke?.width&&this._drawLetterSpacing(d[e],t,i,g+t.padding,m+t.padding-a,!0),void 0!==t._fill&&this._drawLetterSpacing(d[e],t,i,g+t.padding,m+t.padding-a)}}_drawLetterSpacing(e,t,r,i,n,s=!1){const{context:a}=r,o=t.letterSpacing;let l=!1;if(_.P.experimentalLetterSpacingSupported&&(_.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,l=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||l)return void(s?a.strokeText(e,i,n):a.fillText(e,i,n));let d=i;const h=_.P.graphemeSegmenter(e);let u=a.measureText(e).width,c=0;for(let e=0;e<h.length;++e){const t=h[e];s?a.strokeText(t,d,n):a.fillText(t,d,n);let r="";for(let t=e+1;t<h.length;++t)r+=h[t];c=a.measureText(r).width,d+=u-c+o,u=c}}destroy(){this._activeTextures=null}}v.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"canvasText"},i.XO.add(v),i.XO.add(o)},2558:(e,t,r)=>{r.d(t,{M:()=>s});var i=r(2437);const n=new(r(9636).c);function s(e,t,r,s){const a=n;a.minX=0,a.minY=0,a.maxX=e.width/s|0,a.maxY=e.height/s|0;const o=i.W.getOptimalTexture(a.width,a.height,s,!1);return o.source.uploadMethodId="image",o.source.resource=e,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=t/s,o.frame.height=r/s,o.source.emit("update",o.source),o.updateUvs(),o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,