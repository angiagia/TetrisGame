"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[151],{3151:(e,t,r)=>{r.d(t,{WebGLRenderer:()=>je});var n=r(8507),s=r(9313),i=r(6563),a=r(5611),o=r(4459),c=r(4e3),u=r(2067),_=r(6665),l=r(6040),h=r(8475),d=r(5811);class g{init(){const e=new d.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new s.u,type:"mat3x3<f32>"},uRound:{value:0,type:"f32"}}),t=(0,i.a)(),r=(0,a.I)({name:"graphics",bits:[o.a,(0,c.P)(t),u.mA,_.m]});this.shader=new h.M({glProgram:r,resources:{localUniforms:e,batchSamplers:(0,l.n)(t)}})}execute(e,t){const r=t.context,n=r.customShader||this.shader,s=e.renderer,i=s.graphicsContext,{batcher:a,instructions:o}=i.getContextRenderData(r);n.groups[0]=s.globalUniforms.bindGroup,s.state.set(e.state),s.shader.bind(n),s.geometry.bind(a.geometry,n.glProgram);const c=o.instructions;for(let e=0;e<o.instructionSize;e++){const t=c[e];if(t.size){for(let e=0;e<t.textures.count;e++)s.texture.bind(t.textures.textures[e],e);s.geometry.draw(t.topology,t.size,t.start)}}}destroy(){this.shader.destroy(!0),this.shader=null}}g.extension={type:[n.Ag.WebGLPipesAdaptor],name:"graphics"};var f=r(3391),m=r(4492),E=r(268);class b{init(){const e=(0,a.I)({name:"mesh",bits:[u.mA,f.m,_.m]});this._shader=new h.M({glProgram:e,resources:{uTexture:m.g.EMPTY.source,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new s.u}}}})}execute(e,t){const r=e.renderer;let n=t._shader;if(n){if(!n.glProgram)return void(0,E.R)("Mesh shader has no glProgram",t.shader)}else{n=this._shader;const e=t.texture,r=e.source;n.resources.uTexture=r,n.resources.uSampler=r.style,n.resources.textureUniforms.uniforms.uTextureMatrix=e.textureMatrix.mapCoord}n.groups[100]=r.globalUniforms.bindGroup,n.groups[101]=e.localUniformsBindGroup,r.encoder.draw({geometry:t._geometry,shader:n,state:t.state})}destroy(){this._shader.destroy(!0),this._shader=null}}b.extension={type:[n.Ag.WebGLPipesAdaptor],name:"mesh"};var T=r(7547);class R{constructor(){this._didUpload=!1,this._tempState=T.U.for2d()}init(e){e.renderer.runners.contextChange.add(this)}contextChange(){this._didUpload=!1}start(e,t,r){const n=e.renderer;n.shader.bind(r,this._didUpload),n.shader.updateUniformGroup(n.globalUniforms.uniformGroup),n.geometry.bind(t,r.glProgram)}execute(e,t){const r=e.renderer;this._didUpload=!0,this._tempState.blendMode=t.blendMode,r.state.set(this._tempState);const n=t.textures.textures;for(let e=0;e<t.textures.count;e++)r.texture.bind(n[e],e);r.geometry.draw(t.topology,t.size,t.start)}}R.extension={type:[n.Ag.WebGLPipesAdaptor],name:"batch"};var S=r(800),x=r(3996),p=r(5099),v=r(1132),A=(e=>(e[e.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER",e[e.ARRAY_BUFFER=34962]="ARRAY_BUFFER",e[e.UNIFORM_BUFFER=35345]="UNIFORM_BUFFER",e))(A||{});class B{constructor(e,t){this._lastBindBaseLocation=-1,this._lastBindCallId=-1,this.buffer=e||null,this.updateID=-1,this.byteLength=-1,this.type=t}}class N{constructor(e){this._gpuBuffers=Object.create(null),this._boundBufferBases=Object.create(null),this._minBaseLocation=0,this._nextBindBaseIndex=this._minBaseLocation,this._bindCallId=0,this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBuffers")}destroy(){this._renderer=null,this._gl=null,this._gpuBuffers=null,this._boundBufferBases=null}contextChange(){const e=this._gl=this._renderer.gl;this._gpuBuffers=Object.create(null),this._maxBindings=e.MAX_UNIFORM_BUFFER_BINDINGS?e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS):0}getGlBuffer(e){return this._gpuBuffers[e.uid]||this.createGLBuffer(e)}bind(e){const{_gl:t}=this,r=this.getGlBuffer(e);t.bindBuffer(r.type,r.buffer)}bindBufferBase(e,t){const{_gl:r}=this;this._boundBufferBases[t]!==e&&(this._boundBufferBases[t]=e,e._lastBindBaseLocation=t,r.bindBufferBase(r.UNIFORM_BUFFER,t,e.buffer))}nextBindBase(e){this._bindCallId++,this._minBaseLocation=0,e&&(this._boundBufferBases[0]=null,this._minBaseLocation=1,this._nextBindBaseIndex<1&&(this._nextBindBaseIndex=1))}freeLocationForBufferBase(e){let t=this.getLastBindBaseLocation(e);if(t>=this._minBaseLocation)return e._lastBindCallId=this._bindCallId,t;let r=0,n=this._nextBindBaseIndex;for(;r<2;){n>=this._maxBindings&&(n=this._minBaseLocation,r++);const e=this._boundBufferBases[n];if(!e||e._lastBindCallId!==this._bindCallId)break;n++}return t=n,this._nextBindBaseIndex=n+1,r>=2?-1:(e._lastBindCallId=this._bindCallId,this._boundBufferBases[t]=null,t)}getLastBindBaseLocation(e){const t=e._lastBindBaseLocation;return this._boundBufferBases[t]===e?t:-1}bindBufferRange(e,t,r,n){const{_gl:s}=this;r||(r=0),t||(t=0),this._boundBufferBases[t]=null,s.bindBufferRange(s.UNIFORM_BUFFER,t||0,e.buffer,256*r,n||256)}updateBuffer(e){const{_gl:t}=this,r=this.getGlBuffer(e);if(e._updateID===r.updateID)return r;r.updateID=e._updateID,t.bindBuffer(r.type,r.buffer);const n=e.data,s=e.descriptor.usage&v.S.STATIC?t.STATIC_DRAW:t.DYNAMIC_DRAW;return n?r.byteLength>=n.byteLength?t.bufferSubData(r.type,0,n,0,e._updateSize/n.BYTES_PER_ELEMENT):(r.byteLength=n.byteLength,t.bufferData(r.type,n,s)):(r.byteLength=e.descriptor.size,t.bufferData(r.type,r.byteLength,s)),r}destroyAll(){const e=this._gl;for(const t in this._gpuBuffers)e.deleteBuffer(this._gpuBuffers[t].buffer);this._gpuBuffers=Object.create(null)}onBufferDestroy(e,t){const r=this._gpuBuffers[e.uid],n=this._gl;t||n.deleteBuffer(r.buffer),this._gpuBuffers[e.uid]=null}createGLBuffer(e){const{_gl:t}=this;let r=A.ARRAY_BUFFER;e.descriptor.usage&v.S.INDEX?r=A.ELEMENT_ARRAY_BUFFER:e.descriptor.usage&v.S.UNIFORM&&(r=A.UNIFORM_BUFFER);const n=new B(t.createBuffer(),r);return this._gpuBuffers[e.uid]=n,e.on("destroy",this.onBufferDestroy,this),n}}N.extension={type:[n.Ag.WebGLSystem],name:"buffer"};var G=r(1761);const C=class e{constructor(e){this.supports={uint32Indices:!0,uniformBufferObject:!0,vertexArrayObject:!0,srgbTextures:!0,nonPowOf2wrapping:!0,msaa:!0,nonPowOf2mipmaps:!0},this._renderer=e,this.extensions=Object.create(null),this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this)}get isLost(){return!this.gl||this.gl.isContextLost()}contextChange(e){this.gl=e,this._renderer.gl=e}init(t){t={...e.defaultOptions,...t};let r=this.multiView=t.multiView;if(t.context&&r&&((0,E.R)("Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together."),r=!1),this.canvas=r?G.e.get().createCanvas(this._renderer.canvas.width,this._renderer.canvas.height):this._renderer.view.canvas,t.context)this.initFromContext(t.context);else{const e=this._renderer.background.alpha<1,r=t.premultipliedAlpha??!0,n=t.antialias&&!this._renderer.backBuffer.useBackBuffer;this.createContext(t.preferWebGLVersion,{alpha:e,premultipliedAlpha:r,antialias:n,stencil:!0,preserveDrawingBuffer:t.preserveDrawingBuffer,powerPreference:t.powerPreference??"default"})}}ensureCanvasSize(e){if(!this.multiView)return void(e!==this.canvas&&(0,E.R)("multiView is disabled, but targetCanvas is not the main canvas"));const{canvas:t}=this;(t.width<e.width||t.height<e.height)&&(t.width=Math.max(e.width,e.width),t.height=Math.max(e.height,e.height))}initFromContext(e){this.gl=e,this.webGLVersion=e instanceof G.e.get().getWebGLRenderingContext()?1:2,this.getExtensions(),this.validateContext(e),this._renderer.runners.contextChange.emit(e);const t=this._renderer.view.canvas;t.addEventListener("webglcontextlost",this.handleContextLost,!1),t.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}createContext(e,t){let r;const n=this.canvas;if(2===e&&(r=n.getContext("webgl2",t)),!r&&(r=n.getContext("webgl",t),!r))throw new Error("This browser does not support WebGL. Try using the canvas renderer");this.gl=r,this.initFromContext(this.gl)}getExtensions(){const{gl:e}=this,t={anisotropicFiltering:e.getExtension("EXT_texture_filter_anisotropic"),floatTextureLinear:e.getExtension("OES_texture_float_linear"),s3tc:e.getExtension("WEBGL_compressed_texture_s3tc"),s3tc_sRGB:e.getExtension("WEBGL_compressed_texture_s3tc_srgb"),etc:e.getExtension("WEBGL_compressed_texture_etc"),etc1:e.getExtension("WEBGL_compressed_texture_etc1"),pvrtc:e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),atc:e.getExtension("WEBGL_compressed_texture_atc"),astc:e.getExtension("WEBGL_compressed_texture_astc"),bptc:e.getExtension("EXT_texture_compression_bptc"),rgtc:e.getExtension("EXT_texture_compression_rgtc"),loseContext:e.getExtension("WEBGL_lose_context")};if(1===this.webGLVersion)this.extensions={...t,drawBuffers:e.getExtension("WEBGL_draw_buffers"),depthTexture:e.getExtension("WEBGL_depth_texture"),vertexArrayObject:e.getExtension("OES_vertex_array_object")||e.getExtension("MOZ_OES_vertex_array_object")||e.getExtension("WEBKIT_OES_vertex_array_object"),uint32ElementIndex:e.getExtension("OES_element_index_uint"),floatTexture:e.getExtension("OES_texture_float"),floatTextureLinear:e.getExtension("OES_texture_float_linear"),textureHalfFloat:e.getExtension("OES_texture_half_float"),textureHalfFloatLinear:e.getExtension("OES_texture_half_float_linear"),vertexAttribDivisorANGLE:e.getExtension("ANGLE_instanced_arrays"),srgb:e.getExtension("EXT_sRGB")};else{this.extensions={...t,colorBufferFloat:e.getExtension("EXT_color_buffer_float")};const r=e.getExtension("WEBGL_provoking_vertex");r&&r.provokingVertexWEBGL(r.FIRST_VERTEX_CONVENTION_WEBGL)}}handleContextLost(e){e.preventDefault(),this._contextLossForced&&(this._contextLossForced=!1,setTimeout((()=>{this.gl.isContextLost()&&this.extensions.loseContext?.restoreContext()}),0))}handleContextRestored(){this._renderer.runners.contextChange.emit(this.gl)}destroy(){const e=this._renderer.view.canvas;this._renderer=null,e.removeEventListener("webglcontextlost",this.handleContextLost),e.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext?.loseContext()}forceContextLoss(){this.extensions.loseContext?.loseContext(),this._contextLossForced=!0}validateContext(e){const t=e.getContextAttributes();t&&!t.stencil&&(0,E.R)("Provided WebGL context does not have a stencil buffer, masks may not render correctly");const r=this.supports,n=2===this.webGLVersion,s=this.extensions;r.uint32Indices=n||!!s.uint32ElementIndex,r.uniformBufferObject=n,r.vertexArrayObject=n||!!s.vertexArrayObject,r.srgbTextures=n||!!s.srgb,r.nonPowOf2wrapping=n,r.nonPowOf2mipmaps=n,r.msaa=n,r.uint32Indices||(0,E.R)("Provided WebGL context does not support 32 index buffer, large scenes may not render correctly")}};C.extension={type:[n.Ag.WebGLSystem],name:"context"},C.defaultOptions={context:null,premultipliedAlpha:!0,preserveDrawingBuffer:!1,powerPreference:void 0,preferWebGLVersion:2,multiView:!1};let I=C;var D=r(8306),O=r(7084),y=(e=>(e[e.RGBA=6408]="RGBA",e[e.RGB=6407]="RGB",e[e.RG=33319]="RG",e[e.RED=6403]="RED",e[e.RGBA_INTEGER=36249]="RGBA_INTEGER",e[e.RGB_INTEGER=36248]="RGB_INTEGER",e[e.RG_INTEGER=33320]="RG_INTEGER",e[e.RED_INTEGER=36244]="RED_INTEGER",e[e.ALPHA=6406]="ALPHA",e[e.LUMINANCE=6409]="LUMINANCE",e[e.LUMINANCE_ALPHA=6410]="LUMINANCE_ALPHA",e[e.DEPTH_COMPONENT=6402]="DEPTH_COMPONENT",e[e.DEPTH_STENCIL=34041]="DEPTH_STENCIL",e))(y||{}),U=(e=>(e[e.TEXTURE_2D=3553]="TEXTURE_2D",e[e.TEXTURE_CUBE_MAP=34067]="TEXTURE_CUBE_MAP",e[e.TEXTURE_2D_ARRAY=35866]="TEXTURE_2D_ARRAY",e[e.TEXTURE_CUBE_MAP_POSITIVE_X=34069]="TEXTURE_CUBE_MAP_POSITIVE_X",e[e.TEXTURE_CUBE_MAP_NEGATIVE_X=34070]="TEXTURE_CUBE_MAP_NEGATIVE_X",e[e.TEXTURE_CUBE_MAP_POSITIVE_Y=34071]="TEXTURE_CUBE_MAP_POSITIVE_Y",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072]="TEXTURE_CUBE_MAP_NEGATIVE_Y",e[e.TEXTURE_CUBE_MAP_POSITIVE_Z=34073]="TEXTURE_CUBE_MAP_POSITIVE_Z",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074]="TEXTURE_CUBE_MAP_NEGATIVE_Z",e))(U||{}),P=(e=>(e[e.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",e[e.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",e[e.UNSIGNED_SHORT_5_6_5=33635]="UNSIGNED_SHORT_5_6_5",e[e.UNSIGNED_SHORT_4_4_4_4=32819]="UNSIGNED_SHORT_4_4_4_4",e[e.UNSIGNED_SHORT_5_5_5_1=32820]="UNSIGNED_SHORT_5_5_5_1",e[e.UNSIGNED_INT=5125]="UNSIGNED_INT",e[e.UNSIGNED_INT_10F_11F_11F_REV=35899]="UNSIGNED_INT_10F_11F_11F_REV",e[e.UNSIGNED_INT_2_10_10_10_REV=33640]="UNSIGNED_INT_2_10_10_10_REV",e[e.UNSIGNED_INT_24_8=34042]="UNSIGNED_INT_24_8",e[e.UNSIGNED_INT_5_9_9_9_REV=35902]="UNSIGNED_INT_5_9_9_9_REV",e[e.BYTE=5120]="BYTE",e[e.SHORT=5122]="SHORT",e[e.INT=5124]="INT",e[e.FLOAT=5126]="FLOAT",e[e.FLOAT_32_UNSIGNED_INT_24_8_REV=36269]="FLOAT_32_UNSIGNED_INT_24_8_REV",e[e.HALF_FLOAT=36193]="HALF_FLOAT",e))(P||{});const L={uint8x2:P.UNSIGNED_BYTE,uint8x4:P.UNSIGNED_BYTE,sint8x2:P.BYTE,sint8x4:P.BYTE,unorm8x2:P.UNSIGNED_BYTE,unorm8x4:P.UNSIGNED_BYTE,snorm8x2:P.BYTE,snorm8x4:P.BYTE,uint16x2:P.UNSIGNED_SHORT,uint16x4:P.UNSIGNED_SHORT,sint16x2:P.SHORT,sint16x4:P.SHORT,unorm16x2:P.UNSIGNED_SHORT,unorm16x4:P.UNSIGNED_SHORT,snorm16x2:P.SHORT,snorm16x4:P.SHORT,float16x2:P.HALF_FLOAT,float16x4:P.HALF_FLOAT,float32:P.FLOAT,float32x2:P.FLOAT,float32x3:P.FLOAT,float32x4:P.FLOAT,uint32:P.UNSIGNED_INT,uint32x2:P.UNSIGNED_INT,uint32x3:P.UNSIGNED_INT,uint32x4:P.UNSIGNED_INT,sint32:P.INT,sint32x2:P.INT,sint32x3:P.INT,sint32x4:P.INT},F={"point-list":0,"line-list":1,"line-strip":3,"triangle-list":4,"triangle-strip":5};class M{constructor(e){this._geometryVaoHash=Object.create(null),this._renderer=e,this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0,this._renderer.renderableGC.addManagedHash(this,"_geometryVaoHash")}contextChange(){const e=this.gl=this._renderer.gl;if(!this._renderer.context.supports.vertexArrayObject)throw new Error("[PixiJS] Vertex Array Objects are not supported on this device");const t=this._renderer.context.extensions.vertexArrayObject;t&&(e.createVertexArray=()=>t.createVertexArrayOES(),e.bindVertexArray=e=>t.bindVertexArrayOES(e),e.deleteVertexArray=e=>t.deleteVertexArrayOES(e));const r=this._renderer.context.extensions.vertexAttribDivisorANGLE;r&&(e.drawArraysInstanced=(e,t,n,s)=>{r.drawArraysInstancedANGLE(e,t,n,s)},e.drawElementsInstanced=(e,t,n,s,i)=>{r.drawElementsInstancedANGLE(e,t,n,s,i)},e.vertexAttribDivisor=(e,t)=>r.vertexAttribDivisorANGLE(e,t)),this._activeGeometry=null,this._activeVao=null,this._geometryVaoHash=Object.create(null)}bind(e,t){const r=this.gl;this._activeGeometry=e;const n=this.getVao(e,t);this._activeVao!==n&&(this._activeVao=n,r.bindVertexArray(n)),this.updateBuffers()}reset(){this.unbind()}updateBuffers(){const e=this._activeGeometry,t=this._renderer.buffer;for(let r=0;r<e.buffers.length;r++){const n=e.buffers[r];t.updateBuffer(n)}}checkCompatibility(e,t){const r=e.attributes,n=t._attributeData;for(const e in n)if(!r[e])throw new Error(`shader and geometry incompatible, geometry missing the "${e}" attribute`)}getSignature(e,t){const r=e.attributes,n=t._attributeData,s=["g",e.uid];for(const e in r)n[e]&&s.push(e,n[e].location);return s.join("-")}getVao(e,t){return this._geometryVaoHash[e.uid]?.[t._key]||this.initGeometryVao(e,t)}initGeometryVao(e,t,r=!0){const n=this._renderer.gl,s=this._renderer.buffer;this._renderer.shader._getProgramData(t),this.checkCompatibility(e,t);const i=this.getSignature(e,t);this._geometryVaoHash[e.uid]||(this._geometryVaoHash[e.uid]=Object.create(null),e.on("destroy",this.onGeometryDestroy,this));const a=this._geometryVaoHash[e.uid];let o=a[i];if(o)return a[t._key]=o,o;(0,O.q)(e,t._attributeData);const c=e.buffers;o=n.createVertexArray(),n.bindVertexArray(o);for(let e=0;e<c.length;e++){const t=c[e];s.bind(t)}return this.activateVao(e,t),a[t._key]=o,a[i]=o,n.bindVertexArray(null),o}onGeometryDestroy(e,t){const r=this._geometryVaoHash[e.uid],n=this.gl;if(r){if(t)for(const e in r)this._activeVao!==r[e]&&this.unbind(),n.deleteVertexArray(r[e]);this._geometryVaoHash[e.uid]=null}}destroyAll(e=!1){const t=this.gl;for(const r in this._geometryVaoHash){if(e)for(const e in this._geometryVaoHash[r]){const n=this._geometryVaoHash[r];this._activeVao!==n&&this.unbind(),t.deleteVertexArray(n[e])}this._geometryVaoHash[r]=null}}activateVao(e,t){const r=this._renderer.gl,n=this._renderer.buffer,s=e.attributes;e.indexBuffer&&n.bind(e.indexBuffer);let i=null;for(const e in s){const o=s[e],c=o.buffer,u=n.getGlBuffer(c),_=t._attributeData[e];if(_){i!==u&&(n.bind(c),i=u);const e=_.location;r.enableVertexAttribArray(e);const t=(0,D.m)(o.format),s=(a=o.format,L[a]??L.float32);if("int"===_.format?.substring(1,4)?r.vertexAttribIPointer(e,t.size,s,o.stride,o.offset):r.vertexAttribPointer(e,t.size,s,t.normalised,o.stride,o.offset),o.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");{const t=o.divisor??1;r.vertexAttribDivisor(e,t)}}}}var a}draw(e,t,r,n){const{gl:s}=this._renderer,i=this._activeGeometry,a=F[e||i.topology];if(n??(n=i.instanceCount),i.indexBuffer){const e=i.indexBuffer.data.BYTES_PER_ELEMENT,o=2===e?s.UNSIGNED_SHORT:s.UNSIGNED_INT;n>1?s.drawElementsInstanced(a,t||i.indexBuffer.data.length,o,(r||0)*e,n):s.drawElements(a,t||i.indexBuffer.data.length,o,(r||0)*e)}else n>1?s.drawArraysInstanced(a,r||0,t||i.getSize(),n):s.drawArrays(a,r||0,t||i.getSize());return this}unbind(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null}destroy(){this._renderer=null,this.gl=null,this._activeVao=null,this._activeGeometry=null}}M.extension={type:[n.Ag.WebGLSystem],name:"geometry"};var H=r(6011),w=r(1285),V=r(9113);const k=new H.V({attributes:{aPosition:[-1,-1,3,-1,-1,3]}}),X=class e{constructor(e){this.useBackBuffer=!1,this._useBackBufferThisRender=!1,this._renderer=e}init(t={}){const{useBackBuffer:r,antialias:n}={...e.defaultOptions,...t};this.useBackBuffer=r,this._antialias=n,this._renderer.context.supports.msaa||((0,E.R)("antialiasing, is not supported on when using the back buffer"),this._antialias=!1),this._state=T.U.for2d();const s=new V.M({vertex:"\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }",fragment:"\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }",name:"big-triangle"});this._bigTriangleShader=new h.M({glProgram:s,resources:{uTexture:m.g.WHITE.source}})}renderStart(e){const t=this._renderer.renderTarget.getRenderTarget(e.target);if(this._useBackBufferThisRender=this.useBackBuffer&&!!t.isRoot,this._useBackBufferThisRender){const t=this._renderer.renderTarget.getRenderTarget(e.target);this._targetTexture=t.colorTexture,e.target=this._getBackBufferTexture(t.colorTexture)}}renderEnd(){this._presentBackBuffer()}_presentBackBuffer(){const e=this._renderer;e.renderTarget.finishRenderPass(),this._useBackBufferThisRender&&(e.renderTarget.bind(this._targetTexture,!1),this._bigTriangleShader.resources.uTexture=this._backBufferTexture.source,e.encoder.draw({geometry:k,shader:this._bigTriangleShader,state:this._state}))}_getBackBufferTexture(e){return this._backBufferTexture=this._backBufferTexture||new m.g({source:new w.v({width:e.width,height:e.height,resolution:e._resolution,antialias:this._antialias})}),this._backBufferTexture.source.resize(e.width,e.height,e._resolution),this._backBufferTexture}destroy(){this._backBufferTexture&&(this._backBufferTexture.destroy(),this._backBufferTexture=null)}};X.extension={type:[n.Ag.WebGLSystem],name:"backBuffer",priority:1},X.defaultOptions={useBackBuffer:!1};let W=X;class Y{constructor(e){this._colorMaskCache=15,this._renderer=e}setMask(e){this._colorMaskCache!==e&&(this._colorMaskCache=e,this._renderer.gl.colorMask(!!(8&e),!!(4&e),!!(2&e),!!(1&e)))}}Y.extension={type:[n.Ag.WebGLSystem],name:"colorMask"};class K{constructor(e){this.commandFinished=Promise.resolve(),this._renderer=e}setGeometry(e,t){this._renderer.geometry.bind(e,t.glProgram)}finishRenderPass(){}draw(e){const t=this._renderer,{geometry:r,shader:n,state:s,skipSync:i,topology:a,size:o,start:c,instanceCount:u}=e;t.shader.bind(n,i),t.geometry.bind(r,t.shader._activeProgram),s&&t.state.set(s),t.geometry.draw(a,o,c,u??r.instanceCount)}destroy(){this._renderer=null}}K.extension={type:[n.Ag.WebGLSystem],name:"encoder"};var z=r(1172),j=r(1957);class ${constructor(e){this._stencilCache={enabled:!1,stencilReference:0,stencilMode:j.K.NONE},this._renderTargetStencilState=Object.create(null),e.renderTarget.onRenderTargetChange.add(this)}contextChange(e){this._gl=e,this._comparisonFuncMapping={always:e.ALWAYS,never:e.NEVER,equal:e.EQUAL,"not-equal":e.NOTEQUAL,less:e.LESS,"less-equal":e.LEQUAL,greater:e.GREATER,"greater-equal":e.GEQUAL},this._stencilOpsMapping={keep:e.KEEP,zero:e.ZERO,replace:e.REPLACE,invert:e.INVERT,"increment-clamp":e.INCR,"decrement-clamp":e.DECR,"increment-wrap":e.INCR_WRAP,"decrement-wrap":e.DECR_WRAP},this._stencilCache.enabled=!1,this._stencilCache.stencilMode=j.K.NONE,this._stencilCache.stencilReference=0}onRenderTargetChange(e){if(this._activeRenderTarget===e)return;this._activeRenderTarget=e;let t=this._renderTargetStencilState[e.uid];t||(t=this._renderTargetStencilState[e.uid]={stencilMode:j.K.DISABLED,stencilReference:0}),this.setStencilMode(t.stencilMode,t.stencilReference)}setStencilMode(e,t){const r=this._renderTargetStencilState[this._activeRenderTarget.uid],n=this._gl,s=z.g[e],i=this._stencilCache;r.stencilMode=e,r.stencilReference=t,e!==j.K.DISABLED?(this._stencilCache.enabled||(this._stencilCache.enabled=!0,n.enable(n.STENCIL_TEST)),e===i.stencilMode&&i.stencilReference===t||(i.stencilMode=e,i.stencilReference=t,n.stencilFunc(this._comparisonFuncMapping[s.stencilBack.compare],t,255),n.stencilOp(n.KEEP,n.KEEP,this._stencilOpsMapping[s.stencilBack.passOp]))):this._stencilCache.enabled&&(this._stencilCache.enabled=!1,n.disable(n.STENCIL_TEST))}}$.extension={type:[n.Ag.WebGLSystem],name:"stencil"};var q=r(7047);const Z={f32:4,i32:4,"vec2<f32>":8,"vec3<f32>":12,"vec4<f32>":16,"vec2<i32>":8,"vec3<i32>":12,"vec4<i32>":16,"mat2x2<f32>":32,"mat3x3<f32>":48,"mat4x4<f32>":64};function Q(e){const t=e.map((e=>({data:e,offset:0,size:0})));let r=0,n=0;for(let e=0;e<t.length;e++){const s=t[e];if(r=Z[s.data.type],!r)throw new Error(`Unknown type ${s.data.type}`);s.data.size>1&&(r=Math.max(r,16)*s.data.size);const i=12===r?16:r;s.size=r;const a=n%16;n+=a>0&&16-a<i?(16-a)%16:(r-a%r)%r,s.offset=n,n+=r}return n=16*Math.ceil(n/16),{uboElements:t,size:n}}var J=r(6423),ee=r(1266);function te(e,t){const r=Math.max(Z[e.data.type]/16,1),n=e.data.value.length/e.data.size,s=(4-n%4)%4,i=e.data.type.indexOf("i32")>=0?"dataInt32":"data";return`\n        v = uv.${e.data.name};\n        offset += ${t};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${e.data.size*r}; i++)\n        {\n            for(var j = 0; j < ${n}; j++)\n            {\n                ${i}[arrayOffset++] = v[t++];\n            }\n            ${0!==s?`arrayOffset += ${s};`:""}\n        }\n    `}function re(e){return(0,J.E)(e,"uboStd40",te,ee.g)}class ne extends q.W{constructor(){super({createUboElements:Q,generateUboSync:re})}}ne.extension={type:[n.Ag.WebGLSystem],name:"ubo"};var se=r(7238),ie=r(9252),ae=r(4884),oe=r(1257);class ce{constructor(){this.width=-1,this.height=-1,this.msaa=!1,this.msaaRenderBuffer=[]}}class ue{constructor(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new ie.M}init(e,t){this._renderer=e,this._renderTargetSystem=t,e.runners.contextChange.add(this)}contextChange(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new ie.M}copyToTexture(e,t,r,n,s){const i=this._renderTargetSystem,a=this._renderer,o=i.getGpuRenderTarget(e),c=a.gl;return this.finishRenderPass(e),c.bindFramebuffer(c.FRAMEBUFFER,o.resolveTargetFramebuffer),a.texture.bind(t,0),c.copyTexSubImage2D(c.TEXTURE_2D,0,s.x,s.y,r.x,r.y,n.width,n.height),t}startRenderPass(e,t=!0,r,n){const s=this._renderTargetSystem,i=e.colorTexture,a=s.getGpuRenderTarget(e);let o=n.y;e.isRoot&&(o=i.pixelHeight-n.height),e.colorTextures.forEach((e=>{this._renderer.texture.unbind(e)}));const c=this._renderer.gl;c.bindFramebuffer(c.FRAMEBUFFER,a.framebuffer);const u=this._viewPortCache;u.x===n.x&&u.y===o&&u.width===n.width&&u.height===n.height||(u.x=n.x,u.y=o,u.width=n.width,u.height=n.height,c.viewport(n.x,o,n.width,n.height)),a.depthStencilRenderBuffer||!e.stencil&&!e.depth||this._initStencil(a),this.clear(e,t,r)}finishRenderPass(e){const t=this._renderTargetSystem.getGpuRenderTarget(e);if(!t.msaa)return;const r=this._renderer.gl;r.bindFramebuffer(r.FRAMEBUFFER,t.resolveTargetFramebuffer),r.bindFramebuffer(r.READ_FRAMEBUFFER,t.framebuffer),r.blitFramebuffer(0,0,t.width,t.height,0,0,t.width,t.height,r.COLOR_BUFFER_BIT,r.NEAREST),r.bindFramebuffer(r.FRAMEBUFFER,t.framebuffer)}initGpuRenderTarget(e){const t=this._renderer,r=t.gl,n=new ce;return e.colorTexture.resource===t.canvas?(this._renderer.context.ensureCanvasSize(e.colorTexture.resource),n.framebuffer=null,n):(this._initColor(e,n),r.bindFramebuffer(r.FRAMEBUFFER,null),n)}destroyGpuRenderTarget(e){const t=this._renderer.gl;e.framebuffer&&(t.deleteFramebuffer(e.framebuffer),e.framebuffer=null),e.resolveTargetFramebuffer&&(t.deleteFramebuffer(e.resolveTargetFramebuffer),e.resolveTargetFramebuffer=null),e.depthStencilRenderBuffer&&(t.deleteRenderbuffer(e.depthStencilRenderBuffer),e.depthStencilRenderBuffer=null),e.msaaRenderBuffer.forEach((e=>{t.deleteRenderbuffer(e)})),e.msaaRenderBuffer=null}clear(e,t,r){if(!t)return;const n=this._renderTargetSystem;"boolean"==typeof t&&(t=t?oe.u.ALL:oe.u.NONE);const s=this._renderer.gl;if(t&oe.u.COLOR){r??(r=n.defaultClearColor);const e=this._clearColorCache,t=r;e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]||(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],s.clearColor(t[0],t[1],t[2],t[3]))}s.clear(t)}resizeGpuRenderTarget(e){if(e.isRoot)return;const t=this._renderTargetSystem.getGpuRenderTarget(e);this._resizeColor(e,t),(e.stencil||e.depth)&&this._resizeStencil(t)}_initColor(e,t){const r=this._renderer,n=r.gl,s=n.createFramebuffer();if(t.resolveTargetFramebuffer=s,n.bindFramebuffer(n.FRAMEBUFFER,s),t.width=e.colorTexture.source.pixelWidth,t.height=e.colorTexture.source.pixelHeight,e.colorTextures.forEach(((e,s)=>{const i=e.source;i.antialias&&(r.context.supports.msaa?t.msaa=!0:(0,E.R)("[RenderTexture] Antialiasing on textures is not supported in WebGL1")),r.texture.bindSource(i,0);const a=r.texture.getGlSource(i).texture;n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+s,3553,a,0)})),t.msaa){const r=n.createFramebuffer();t.framebuffer=r,n.bindFramebuffer(n.FRAMEBUFFER,r),e.colorTextures.forEach(((e,r)=>{const s=n.createRenderbuffer();t.msaaRenderBuffer[r]=s}))}else t.framebuffer=s;this._resizeColor(e,t)}_resizeColor(e,t){const r=e.colorTexture.source;if(t.width=r.pixelWidth,t.height=r.pixelHeight,e.colorTextures.forEach(((e,t)=>{0!==t&&e.source.resize(r.width,r.height,r._resolution)})),t.msaa){const r=this._renderer,n=r.gl,s=t.framebuffer;n.bindFramebuffer(n.FRAMEBUFFER,s),e.colorTextures.forEach(((e,s)=>{const i=e.source;r.texture.bindSource(i,0);const a=r.texture.getGlSource(i).internalFormat,o=t.msaaRenderBuffer[s];n.bindRenderbuffer(n.RENDERBUFFER,o),n.renderbufferStorageMultisample(n.RENDERBUFFER,4,a,i.pixelWidth,i.pixelHeight),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+s,n.RENDERBUFFER,o)}))}}_initStencil(e){if(null===e.framebuffer)return;const t=this._renderer.gl,r=t.createRenderbuffer();e.depthStencilRenderBuffer=r,t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,r),this._resizeStencil(e)}_resizeStencil(e){const t=this._renderer.gl;t.bindRenderbuffer(t.RENDERBUFFER,e.depthStencilRenderBuffer),e.msaa?t.renderbufferStorageMultisample(t.RENDERBUFFER,4,t.DEPTH24_STENCIL8,e.width,e.height):t.renderbufferStorage(t.RENDERBUFFER,2===this._renderer.context.webGLVersion?t.DEPTH24_STENCIL8:t.DEPTH_STENCIL,e.width,e.height)}prerender(e){const t=e.colorTexture.resource;this._renderer.context.multiView&&ae.q.test(t)&&this._renderer.context.ensureCanvasSize(t)}postrender(e){if(this._renderer.context.multiView&&ae.q.test(e.colorTexture.resource)){const t=this._renderer.context.canvas,r=e.colorTexture;r.context2D.drawImage(t,0,r.pixelHeight-t.height)}}}class _e extends se.l{constructor(e){super(e),this.adaptor=new ue,this.adaptor.init(e,this)}}_e.extension={type:[n.Ag.WebGLSystem],name:"renderTarget"};var le=r(581);class he{constructor(e,t){this.program=e,this.uniformData=t,this.uniformGroups={},this.uniformDirtyGroups={},this.uniformBlockBindings={}}destroy(){this.uniformData=null,this.uniformGroups=null,this.uniformDirtyGroups=null,this.uniformBlockBindings=null,this.program=null}}function de(e,t,r){const n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),n}function ge(e){const t=new Array(e);for(let e=0;e<t.length;e++)t[e]=!1;return t}function fe(e,t){switch(e){case"float":case"int":case"uint":case"sampler2D":case"sampler2DArray":return 0;case"vec2":return new Float32Array(2*t);case"vec3":return new Float32Array(3*t);case"vec4":return new Float32Array(4*t);case"ivec2":return new Int32Array(2*t);case"ivec3":return new Int32Array(3*t);case"ivec4":return new Int32Array(4*t);case"uvec2":return new Uint32Array(2*t);case"uvec3":return new Uint32Array(3*t);case"uvec4":return new Uint32Array(4*t);case"bool":return!1;case"bvec2":return ge(2*t);case"bvec3":return ge(3*t);case"bvec4":return ge(4*t);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}let me=null;const Ee={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",UNSIGNED_INT:"uint",UNSIGNED_INT_VEC2:"uvec2",UNSIGNED_INT_VEC3:"uvec3",UNSIGNED_INT_VEC4:"uvec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",INT_SAMPLER_2D:"sampler2D",UNSIGNED_INT_SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",INT_SAMPLER_CUBE:"samplerCube",UNSIGNED_INT_SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray",INT_SAMPLER_2D_ARRAY:"sampler2DArray",UNSIGNED_INT_SAMPLER_2D_ARRAY:"sampler2DArray"},be={float:"float32",vec2:"float32x2",vec3:"float32x3",vec4:"float32x4",int:"sint32",ivec2:"sint32x2",ivec3:"sint32x3",ivec4:"sint32x4",uint:"uint32",uvec2:"uint32x2",uvec3:"uint32x3",uvec4:"uint32x4",bool:"uint32",bvec2:"uint32x2",bvec3:"uint32x3",bvec4:"uint32x4"};function Te(e,t){if(!me){const t=Object.keys(Ee);me={};for(let r=0;r<t.length;++r){const n=t[r];me[e[n]]=Ee[n]}}return me[t]}function Re(e,t){const r=Te(e,t);return be[r]||"float32"}function Se(e,t){const r=e.getShaderSource(t).split("\n").map(((e,t)=>`${t}: ${e}`)),n=e.getShaderInfoLog(t),s=n.split("\n"),i={},a=s.map((e=>parseFloat(e.replace(/^ERROR\: 0\:([\d]+)\:.*$/,"$1")))).filter((e=>!(!e||i[e]||(i[e]=!0,0)))),o=[""];a.forEach((e=>{r[e-1]=`%c${r[e-1]}%c`,o.push("background: #FF0000; color:#FFFFFF; font-size: 10px","font-size: 10px")}));const c=r.join("\n");o[0]=c,console.error(n),console.groupCollapsed("click to view full shader code"),console.warn(...o),console.groupEnd()}const xe={textureCount:0,blockIndex:0};class pe{constructor(e){this._activeProgram=null,this._programDataHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_programDataHash")}contextChange(e){this._gl=e,this._programDataHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._activeProgram=null,this.maxTextures=(0,i.a)()}bind(e,t){if(this._setProgram(e.glProgram),t)return;xe.textureCount=0,xe.blockIndex=0;let r=this._shaderSyncFunctions[e.glProgram._key];r||(r=this._shaderSyncFunctions[e.glProgram._key]=this._generateShaderSync(e,this)),this._renderer.buffer.nextBindBase(!!e.glProgram.transformFeedbackVaryings),r(this._renderer,e,xe)}updateUniformGroup(e){this._renderer.uniformGroup.updateUniformGroup(e,this._activeProgram,xe)}bindUniformBlock(e,t,r=0){const n=this._renderer.buffer,s=this._getProgramData(this._activeProgram),i=e._bufferResource;i||this._renderer.ubo.updateUniformGroup(e);const a=e.buffer,o=n.updateBuffer(a),c=n.freeLocationForBufferBase(o);if(i){const{offset:t,size:r}=e;0===t&&r===a.data.byteLength?n.bindBufferBase(o,c):n.bindBufferRange(o,c,t)}else n.getLastBindBaseLocation(o)!==c&&n.bindBufferBase(o,c);const u=this._activeProgram._uniformBlockData[t].index;s.uniformBlockBindings[r]!==c&&(s.uniformBlockBindings[r]=c,this._renderer.gl.uniformBlockBinding(s.program,u,c))}_setProgram(e){if(this._activeProgram===e)return;this._activeProgram=e;const t=this._getProgramData(e);this._gl.useProgram(t.program)}_getProgramData(e){return this._programDataHash[e._key]||this._createProgramData(e)}_createProgramData(e){const t=e._key;return this._programDataHash[t]=function(e,t){const r=de(e,e.VERTEX_SHADER,t.vertex),n=de(e,e.FRAGMENT_SHADER,t.fragment),s=e.createProgram();e.attachShader(s,r),e.attachShader(s,n);const i=t.transformFeedbackVaryings;i&&("function"!=typeof e.transformFeedbackVaryings?(0,E.R)("TransformFeedback is not supported but TransformFeedbackVaryings are given."):e.transformFeedbackVaryings(s,i.names,"separate"===i.bufferMode?e.SEPARATE_ATTRIBS:e.INTERLEAVED_ATTRIBS)),e.linkProgram(s),e.getProgramParameter(s,e.LINK_STATUS)||function(e,t,r,n){e.getProgramParameter(t,e.LINK_STATUS)||(e.getShaderParameter(r,e.COMPILE_STATUS)||Se(e,r),e.getShaderParameter(n,e.COMPILE_STATUS)||Se(e,n),console.error("PixiJS Error: Could not initialize shader."),""!==e.getProgramInfoLog(t)&&console.warn("PixiJS Warning: gl.getProgramInfoLog()",e.getProgramInfoLog(t)))}(e,s,r,n),t._attributeData=function(e,t,r=!1){const n={},s=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<s;r++){const s=t.getActiveAttrib(e,r);if(s.name.startsWith("gl_"))continue;const i=Re(t,s.type);n[s.name]={location:0,format:i,stride:(0,D.m)(i).stride,offset:0,instance:!1,start:0}}const i=Object.keys(n);if(r){i.sort(((e,t)=>e>t?1:-1));for(let r=0;r<i.length;r++)n[i[r]].location=r,t.bindAttribLocation(e,r,i[r]);t.linkProgram(e)}else for(let r=0;r<i.length;r++)n[i[r]].location=t.getAttribLocation(e,i[r]);return n}(s,e,!/^[ \t]*#[ \t]*version[ \t]+300[ \t]+es[ \t]*$/m.test(t.vertex)),t._uniformData=function(e,t){const r={},n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let s=0;s<n;s++){const n=t.getActiveUniform(e,s),i=n.name.replace(/\[.*?\]$/,""),a=!!n.name.match(/\[.*?\]$/),o=Te(t,n.type);r[i]={name:i,index:s,type:o,size:n.size,isArray:a,value:fe(o,n.size)}}return r}(s,e),t._uniformBlockData=function(e,t){if(!t.ACTIVE_UNIFORM_BLOCKS)return{};const r={},n=t.getProgramParameter(e,t.ACTIVE_UNIFORM_BLOCKS);for(let s=0;s<n;s++){const n=t.getActiveUniformBlockName(e,s),i=t.getUniformBlockIndex(e,n),a=t.getActiveUniformBlockParameter(e,s,t.UNIFORM_BLOCK_DATA_SIZE);r[n]={name:n,index:i,size:a}}return r}(s,e),e.deleteShader(r),e.deleteShader(n);const a={};for(const r in t._uniformData){const n=t._uniformData[r];a[r]={location:e.getUniformLocation(s,r),value:fe(n.type,n.size)}}return new he(s,a)}(this._gl,e),this._programDataHash[t]}destroy(){for(const e of Object.keys(this._programDataHash))this._programDataHash[e].destroy(),this._programDataHash[e]=null;this._programDataHash=null}_generateShaderSync(e,t){return function(e,t){const r=[],n=["\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    "];let s=!1,i=0;const a=t._getProgramData(e.glProgram);for(const o in e.groups){const c=e.groups[o];r.push(`\n            resources = g[${o}].resources;\n        `);for(const u in c.resources){const _=c.resources[u];if(_ instanceof d.k)if(_.ubo){const t=e._uniformBindMap[o][Number(u)];r.push(`\n                        sS.bindUniformBlock(\n                            resources[${u}],\n                            '${t}',\n                            ${e.glProgram._uniformBlockData[t].index}\n                        );\n                    `)}else r.push(`\n                        ugS.updateUniformGroup(resources[${u}], p, sD);\n                    `);else if(_ instanceof le.d){const t=e._uniformBindMap[o][Number(u)];r.push(`\n                    sS.bindUniformBlock(\n                        resources[${u}],\n                        '${t}',\n                        ${e.glProgram._uniformBlockData[t].index}\n                    );\n                `)}else if(_ instanceof w.v){const c=e._uniformBindMap[o][u],_=a.uniformData[c];_&&(s||(s=!0,n.push("\n                        var tS = r.texture;\n                        ")),t._gl.uniform1i(_.location,i),r.push(`\n                        tS.bind(resources[${u}], ${i});\n                    `),i++)}}}const o=[...n,...r].join("\n");return new Function("r","s","sD",o)}(e,t)}}pe.extension={type:[n.Ag.WebGLSystem],name:"shader"};var ve=r(8166);const Ae={f32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }","vec2<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }","vec3<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }","vec4<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }",i32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }",u32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }","vec2<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }","vec3<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }","vec4<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }",bool:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);"},Be={f32:"gl.uniform1fv(location, v);","vec2<f32>":"gl.uniform2fv(location, v);","vec3<f32>":"gl.uniform3fv(location, v);","vec4<f32>":"gl.uniform4fv(location, v);","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);",i32:"gl.uniform1iv(location, v);","vec2<i32>":"gl.uniform2iv(location, v);","vec3<i32>":"gl.uniform3iv(location, v);","vec4<i32>":"gl.uniform4iv(location, v);",u32:"gl.uniform1iv(location, v);","vec2<u32>":"gl.uniform2iv(location, v);","vec3<u32>":"gl.uniform3iv(location, v);","vec4<u32>":"gl.uniform4iv(location, v);",bool:"gl.uniform1iv(location, v);","vec2<bool>":"gl.uniform2iv(location, v);","vec3<bool>":"gl.uniform3iv(location, v);","vec4<bool>":"gl.uniform4iv(location, v);"};class Ne{constructor(e){this._cache={},this._uniformGroupSyncHash={},this._renderer=e,this.gl=null,this._cache={}}contextChange(e){this.gl=e}updateUniformGroup(e,t,r){const n=this._renderer.shader._getProgramData(t);e.isStatic&&e._dirtyId===n.uniformDirtyGroups[e.uid]||(n.uniformDirtyGroups[e.uid]=e._dirtyId,this._getUniformSyncFunction(e,t)(n.uniformData,e.uniforms,this._renderer,r))}_getUniformSyncFunction(e,t){return this._uniformGroupSyncHash[e._signature]?.[t._key]||this._createUniformSyncFunction(e,t)}_createUniformSyncFunction(e,t){const r=this._uniformGroupSyncHash[e._signature]||(this._uniformGroupSyncHash[e._signature]={}),n=this._getSignature(e,t._uniformData,"u");return this._cache[n]||(this._cache[n]=this._generateUniformsSync(e,t._uniformData)),r[t._key]=this._cache[n],r[t._key]}_generateUniformsSync(e,t){return function(e,t){const r=["\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    "];for(const n in e.uniforms){if(!t[n]){e.uniforms[n]instanceof d.k?e.uniforms[n].ubo?r.push(`\n                        renderer.shader.bindUniformBlock(uv.${n}, "${n}");\n                    `):r.push(`\n                        renderer.shader.updateUniformGroup(uv.${n});\n                    `):e.uniforms[n]instanceof le.d&&r.push(`\n                        renderer.shader.bindBufferResource(uv.${n}, "${n}");\n                    `);continue}const s=e.uniformStructures[n];let i=!1;for(let e=0;e<ve.$.length;e++){const t=ve.$[e];if(s.type===t.type&&t.test(s)){r.push(`name = "${n}";`,ve.$[e].uniform),i=!0;break}}if(!i){const e=(1===s.size?Ae:Be)[s.type].replace("location",`ud["${n}"].location`);r.push(`\n            cu = ud["${n}"];\n            cv = cu.value;\n            v = uv["${n}"];\n            ${e};`)}}return new Function("ud","uv","renderer","syncData",r.join("\n"))}(e,t)}_getSignature(e,t,r){const n=e.uniforms,s=[`${r}-`];for(const e in n)s.push(e),t[e]&&s.push(t[e].type);return s.join("-")}destroy(){this._renderer=null,this._cache=null}}Ne.extension={type:[n.Ag.WebGLSystem],name:"uniformGroup"};const Ge=class e{constructor(){this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode="none",this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.map[5]=this.setDepthMask,this.checks=[],this.defaultState=T.U.for2d()}contextChange(e){this.gl=e,this.blendModesMap=function(e){const t={};if(t.normal=[e.ONE,e.ONE_MINUS_SRC_ALPHA],t.add=[e.ONE,e.ONE],t.multiply=[e.DST_COLOR,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.screen=[e.ONE,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.none=[0,0],t["normal-npm"]=[e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA],t["add-npm"]=[e.SRC_ALPHA,e.ONE,e.ONE,e.ONE],t["screen-npm"]=[e.SRC_ALPHA,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.erase=[e.ZERO,e.ONE_MINUS_SRC_ALPHA],e instanceof G.e.get().getWebGLRenderingContext()){const r=e.getExtension("EXT_blend_minmax");r&&(t.min=[e.ONE,e.ONE,e.ONE,e.ONE,r.MIN_EXT,r.MIN_EXT],t.max=[e.ONE,e.ONE,e.ONE,e.ONE,r.MAX_EXT,r.MAX_EXT])}else t.min=[e.ONE,e.ONE,e.ONE,e.ONE,e.MIN,e.MIN],t.max=[e.ONE,e.ONE,e.ONE,e.ONE,e.MAX,e.MAX];return t}(e),this.reset()}set(e){if(e||(e=this.defaultState),this.stateId!==e.data){let t=this.stateId^e.data,r=0;for(;t;)1&t&&this.map[r].call(this,!!(e.data&1<<r)),t>>=1,r++;this.stateId=e.data}for(let t=0;t<this.checks.length;t++)this.checks[t](this,e)}forceState(e){e||(e=this.defaultState);for(let t=0;t<this.map.length;t++)this.map[t].call(this,!!(e.data&1<<t));for(let t=0;t<this.checks.length;t++)this.checks[t](this,e);this.stateId=e.data}setBlend(t){this._updateCheck(e._checkBlendMode,t),this.gl[t?"enable":"disable"](this.gl.BLEND)}setOffset(t){this._updateCheck(e._checkPolygonOffset,t),this.gl[t?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)}setDepthTest(e){this.gl[e?"enable":"disable"](this.gl.DEPTH_TEST)}setDepthMask(e){this.gl.depthMask(e)}setCullFace(e){this.gl[e?"enable":"disable"](this.gl.CULL_FACE)}setFrontFace(e){this.gl.frontFace(this.gl[e?"CW":"CCW"])}setBlendMode(e){if(this.blendModesMap[e]||(e="normal"),e===this.blendMode)return;this.blendMode=e;const t=this.blendModesMap[e],r=this.gl;2===t.length?r.blendFunc(t[0],t[1]):r.blendFuncSeparate(t[0],t[1],t[2],t[3]),6===t.length?(this._blendEq=!0,r.blendEquationSeparate(t[4],t[5])):this._blendEq&&(this._blendEq=!1,r.blendEquationSeparate(r.FUNC_ADD,r.FUNC_ADD))}setPolygonOffset(e,t){this.gl.polygonOffset(e,t)}reset(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(this.defaultState),this._blendEq=!0,this.blendMode="",this.setBlendMode("normal")}_updateCheck(e,t){const r=this.checks.indexOf(e);t&&-1===r?this.checks.push(e):t||-1===r||this.checks.splice(r,1)}static _checkBlendMode(e,t){e.setBlendMode(t.blendMode)}static _checkPolygonOffset(e,t){e.setPolygonOffset(1,t.polygonOffset)}destroy(){this.gl=null,this.checks.length=0}};Ge.extension={type:[n.Ag.WebGLSystem],name:"state"};let Ce=Ge;class Ie{constructor(e){this.target=U.TEXTURE_2D,this.texture=e,this.width=-1,this.height=-1,this.type=P.UNSIGNED_BYTE,this.internalFormat=y.RGBA,this.format=y.RGBA,this.samplerType=0}}const De={id:"buffer",upload(e,t,r){t.width===e.width||t.height===e.height?r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,t.format,t.type,e.resource):r.texImage2D(t.target,0,t.internalFormat,e.width,e.height,0,t.format,t.type,e.resource),t.width=e.width,t.height=e.height}},Oe={"bc1-rgba-unorm":!0,"bc1-rgba-unorm-srgb":!0,"bc2-rgba-unorm":!0,"bc2-rgba-unorm-srgb":!0,"bc3-rgba-unorm":!0,"bc3-rgba-unorm-srgb":!0,"bc4-r-unorm":!0,"bc4-r-snorm":!0,"bc5-rg-unorm":!0,"bc5-rg-snorm":!0,"bc6h-rgb-ufloat":!0,"bc6h-rgb-float":!0,"bc7-rgba-unorm":!0,"bc7-rgba-unorm-srgb":!0,"etc2-rgb8unorm":!0,"etc2-rgb8unorm-srgb":!0,"etc2-rgb8a1unorm":!0,"etc2-rgb8a1unorm-srgb":!0,"etc2-rgba8unorm":!0,"etc2-rgba8unorm-srgb":!0,"eac-r11unorm":!0,"eac-r11snorm":!0,"eac-rg11unorm":!0,"eac-rg11snorm":!0,"astc-4x4-unorm":!0,"astc-4x4-unorm-srgb":!0,"astc-5x4-unorm":!0,"astc-5x4-unorm-srgb":!0,"astc-5x5-unorm":!0,"astc-5x5-unorm-srgb":!0,"astc-6x5-unorm":!0,"astc-6x5-unorm-srgb":!0,"astc-6x6-unorm":!0,"astc-6x6-unorm-srgb":!0,"astc-8x5-unorm":!0,"astc-8x5-unorm-srgb":!0,"astc-8x6-unorm":!0,"astc-8x6-unorm-srgb":!0,"astc-8x8-unorm":!0,"astc-8x8-unorm-srgb":!0,"astc-10x5-unorm":!0,"astc-10x5-unorm-srgb":!0,"astc-10x6-unorm":!0,"astc-10x6-unorm-srgb":!0,"astc-10x8-unorm":!0,"astc-10x8-unorm-srgb":!0,"astc-10x10-unorm":!0,"astc-10x10-unorm-srgb":!0,"astc-12x10-unorm":!0,"astc-12x10-unorm-srgb":!0,"astc-12x12-unorm":!0,"astc-12x12-unorm-srgb":!0},ye={id:"compressed",upload(e,t,r){r.pixelStorei(r.UNPACK_ALIGNMENT,4);let n=e.pixelWidth,s=e.pixelHeight;const i=!!Oe[e.format];for(let a=0;a<e.resource.length;a++){const o=e.resource[a];i?r.compressedTexImage2D(r.TEXTURE_2D,a,t.internalFormat,n,s,0,o):r.texImage2D(r.TEXTURE_2D,a,t.internalFormat,n,s,0,t.format,t.type,o),n=Math.max(n>>1,1),s=Math.max(s>>1,1)}}},Ue={id:"image",upload(e,t,r,n){const s="premultiply-alpha-on-upload"===e.alphaMode;r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s);const i=t.width,a=t.height,o=e.pixelWidth,c=e.pixelHeight,u=e.resourceWidth,_=e.resourceHeight;u<o||_<c?(i===o&&a===c||r.texImage2D(t.target,0,t.internalFormat,o,c,0,t.format,t.type,null),2===n?r.texSubImage2D(r.TEXTURE_2D,0,0,0,u,_,t.format,t.type,e.resource):r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.format,t.type,e.resource)):i===o||a===c?r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.format,t.type,e.resource):2===n?r.texImage2D(t.target,0,t.internalFormat,o,c,0,t.format,t.type,e.resource):r.texImage2D(t.target,0,t.internalFormat,t.format,t.type,e.resource),t.width=o,t.height=c}},Pe={id:"video",upload(e,t,r,n){e.isValid?Ue.upload(e,t,r,n):r.texImage2D(t.target,0,t.internalFormat,1,1,0,t.format,t.type,null)}},Le={linear:9729,nearest:9728},Fe={linear:{linear:9987,nearest:9985},nearest:{linear:9986,nearest:9984}},Me={"clamp-to-edge":33071,repeat:10497,"mirror-repeat":33648},He={never:512,less:513,equal:514,"less-equal":515,greater:516,"not-equal":517,"greater-equal":518,always:519};function we(e,t,r,n,s,i,a,o){const c=i;if(!o||"repeat"!==e.addressModeU||"repeat"!==e.addressModeV||"repeat"!==e.addressModeW){const r=Me[a?"clamp-to-edge":e.addressModeU],n=Me[a?"clamp-to-edge":e.addressModeV],i=Me[a?"clamp-to-edge":e.addressModeW];t[s](c,t.TEXTURE_WRAP_S,r),t[s](c,t.TEXTURE_WRAP_T,n),t.TEXTURE_WRAP_R&&t[s](c,t.TEXTURE_WRAP_R,i)}if(o&&"linear"===e.magFilter||t[s](c,t.TEXTURE_MAG_FILTER,Le[e.magFilter]),r){if(!o||"linear"!==e.mipmapFilter){const r=Fe[e.minFilter][e.mipmapFilter];t[s](c,t.TEXTURE_MIN_FILTER,r)}}else t[s](c,t.TEXTURE_MIN_FILTER,Le[e.minFilter]);if(n&&e.maxAnisotropy>1){const r=Math.min(e.maxAnisotropy,t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT));t[s](c,n.TEXTURE_MAX_ANISOTROPY_EXT,r)}e.compare&&t[s](c,t.TEXTURE_COMPARE_FUNC,He[e.compare])}class Ve{constructor(e){this.managedTextures=[],this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundTextures=[],this._activeTextureLocation=-1,this._boundSamplers=Object.create(null),this._uploads={image:Ue,buffer:De,video:Pe,compressed:ye},this._useSeparateSamplers=!1,this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_glTextures"),this._renderer.renderableGC.addManagedHash(this,"_glSamplers")}contextChange(e){this._gl=e,this._mapFormatToInternalFormat||(this._mapFormatToInternalFormat=function(e,t){let r={},n=e.RGBA;return e instanceof G.e.get().getWebGLRenderingContext()?t.srgb&&(r={"rgba8unorm-srgb":t.srgb.SRGB8_ALPHA8_EXT,"bgra8unorm-srgb":t.srgb.SRGB8_ALPHA8_EXT}):(r={"rgba8unorm-srgb":e.SRGB8_ALPHA8,"bgra8unorm-srgb":e.SRGB8_ALPHA8},n=e.RGBA8),{r8unorm:e.R8,r8snorm:e.R8_SNORM,r8uint:e.R8UI,r8sint:e.R8I,r16uint:e.R16UI,r16sint:e.R16I,r16float:e.R16F,rg8unorm:e.RG8,rg8snorm:e.RG8_SNORM,rg8uint:e.RG8UI,rg8sint:e.RG8I,r32uint:e.R32UI,r32sint:e.R32I,r32float:e.R32F,rg16uint:e.RG16UI,rg16sint:e.RG16I,rg16float:e.RG16F,rgba8unorm:e.RGBA,...r,rgba8snorm:e.RGBA8_SNORM,rgba8uint:e.RGBA8UI,rgba8sint:e.RGBA8I,bgra8unorm:n,rgb9e5ufloat:e.RGB9_E5,rgb10a2unorm:e.RGB10_A2,rg11b10ufloat:e.R11F_G11F_B10F,rg32uint:e.RG32UI,rg32sint:e.RG32I,rg32float:e.RG32F,rgba16uint:e.RGBA16UI,rgba16sint:e.RGBA16I,rgba16float:e.RGBA16F,rgba32uint:e.RGBA32UI,rgba32sint:e.RGBA32I,rgba32float:e.RGBA32F,stencil8:e.STENCIL_INDEX8,depth16unorm:e.DEPTH_COMPONENT16,depth24plus:e.DEPTH_COMPONENT24,"depth24plus-stencil8":e.DEPTH24_STENCIL8,depth32float:e.DEPTH_COMPONENT32F,"depth32float-stencil8":e.DEPTH32F_STENCIL8,...t.s3tc?{"bc1-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,"bc2-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,"bc3-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT}:{},...t.s3tc_sRGB?{"bc1-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,"bc2-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,"bc3-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}:{},...t.rgtc?{"bc4-r-unorm":t.rgtc.COMPRESSED_RED_RGTC1_EXT,"bc4-r-snorm":t.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,"bc5-rg-unorm":t.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,"bc5-rg-snorm":t.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}:{},...t.bptc?{"bc6h-rgb-float":t.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,"bc6h-rgb-ufloat":t.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,"bc7-rgba-unorm":t.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,"bc7-rgba-unorm-srgb":t.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT}:{},...t.etc?{"etc2-rgb8unorm":t.etc.COMPRESSED_RGB8_ETC2,"etc2-rgb8unorm-srgb":t.etc.COMPRESSED_SRGB8_ETC2,"etc2-rgb8a1unorm":t.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgb8a1unorm-srgb":t.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgba8unorm":t.etc.COMPRESSED_RGBA8_ETC2_EAC,"etc2-rgba8unorm-srgb":t.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,"eac-r11unorm":t.etc.COMPRESSED_R11_EAC,"eac-rg11unorm":t.etc.COMPRESSED_SIGNED_RG11_EAC}:{},...t.astc?{"astc-4x4-unorm":t.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,"astc-4x4-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,"astc-5x4-unorm":t.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,"astc-5x4-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,"astc-5x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,"astc-5x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,"astc-6x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,"astc-6x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,"astc-6x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,"astc-6x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,"astc-8x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,"astc-8x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,"astc-8x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,"astc-8x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,"astc-8x8-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,"astc-8x8-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,"astc-10x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,"astc-10x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,"astc-10x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,"astc-10x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,"astc-10x8-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,"astc-10x8-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,"astc-10x10-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,"astc-10x10-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,"astc-12x10-unorm":t.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,"astc-12x10-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,"astc-12x12-unorm":t.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,"astc-12x12-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR}:{}}}(e,this._renderer.context.extensions),this._mapFormatToType=function(e){return{r8unorm:e.UNSIGNED_BYTE,r8snorm:e.BYTE,r8uint:e.UNSIGNED_BYTE,r8sint:e.BYTE,r16uint:e.UNSIGNED_SHORT,r16sint:e.SHORT,r16float:e.HALF_FLOAT,rg8unorm:e.UNSIGNED_BYTE,rg8snorm:e.BYTE,rg8uint:e.UNSIGNED_BYTE,rg8sint:e.BYTE,r32uint:e.UNSIGNED_INT,r32sint:e.INT,r32float:e.FLOAT,rg16uint:e.UNSIGNED_SHORT,rg16sint:e.SHORT,rg16float:e.HALF_FLOAT,rgba8unorm:e.UNSIGNED_BYTE,"rgba8unorm-srgb":e.UNSIGNED_BYTE,rgba8snorm:e.BYTE,rgba8uint:e.UNSIGNED_BYTE,rgba8sint:e.BYTE,bgra8unorm:e.UNSIGNED_BYTE,"bgra8unorm-srgb":e.UNSIGNED_BYTE,rgb9e5ufloat:e.UNSIGNED_INT_5_9_9_9_REV,rgb10a2unorm:e.UNSIGNED_INT_2_10_10_10_REV,rg11b10ufloat:e.UNSIGNED_INT_10F_11F_11F_REV,rg32uint:e.UNSIGNED_INT,rg32sint:e.INT,rg32float:e.FLOAT,rgba16uint:e.UNSIGNED_SHORT,rgba16sint:e.SHORT,rgba16float:e.HALF_FLOAT,rgba32uint:e.UNSIGNED_INT,rgba32sint:e.INT,rgba32float:e.FLOAT,stencil8:e.UNSIGNED_BYTE,depth16unorm:e.UNSIGNED_SHORT,depth24plus:e.UNSIGNED_INT,"depth24plus-stencil8":e.UNSIGNED_INT_24_8,depth32float:e.FLOAT,"depth32float-stencil8":e.FLOAT_32_UNSIGNED_INT_24_8_REV}}(e),this._mapFormatToFormat=function(e){return{r8unorm:e.RED,r8snorm:e.RED,r8uint:e.RED,r8sint:e.RED,r16uint:e.RED,r16sint:e.RED,r16float:e.RED,rg8unorm:e.RG,rg8snorm:e.RG,rg8uint:e.RG,rg8sint:e.RG,r32uint:e.RED,r32sint:e.RED,r32float:e.RED,rg16uint:e.RG,rg16sint:e.RG,rg16float:e.RG,rgba8unorm:e.RGBA,"rgba8unorm-srgb":e.RGBA,rgba8snorm:e.RGBA,rgba8uint:e.RGBA,rgba8sint:e.RGBA,bgra8unorm:e.RGBA,"bgra8unorm-srgb":e.RGBA,rgb9e5ufloat:e.RGB,rgb10a2unorm:e.RGBA,rg11b10ufloat:e.RGB,rg32uint:e.RG,rg32sint:e.RG,rg32float:e.RG,rgba16uint:e.RGBA,rgba16sint:e.RGBA,rgba16float:e.RGBA,rgba32uint:e.RGBA,rgba32sint:e.RGBA,rgba32float:e.RGBA,stencil8:e.STENCIL_INDEX8,depth16unorm:e.DEPTH_COMPONENT,depth24plus:e.DEPTH_COMPONENT,"depth24plus-stencil8":e.DEPTH_STENCIL,depth32float:e.DEPTH_COMPONENT,"depth32float-stencil8":e.DEPTH_STENCIL}}(e)),this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundSamplers=Object.create(null);for(let e=0;e<16;e++)this.bind(m.g.EMPTY,e)}initSource(e){this.bind(e)}bind(e,t=0){const r=e.source;e?(this.bindSource(r,t),this._useSeparateSamplers&&this._bindSampler(r.style,t)):(this.bindSource(null,t),this._useSeparateSamplers&&this._bindSampler(null,t))}bindSource(e,t=0){const r=this._gl;if(e._touched=this._renderer.textureGC.count,this._boundTextures[t]!==e){this._boundTextures[t]=e,this._activateLocation(t),e||(e=m.g.EMPTY.source);const n=this.getGlSource(e);r.bindTexture(n.target,n.texture)}}_bindSampler(e,t=0){const r=this._gl;if(!e)return this._boundSamplers[t]=null,void r.bindSampler(t,null);const n=this._getGlSampler(e);this._boundSamplers[t]!==n&&(this._boundSamplers[t]=n,r.bindSampler(t,n))}unbind(e){const t=e.source,r=this._boundTextures,n=this._gl;for(let e=0;e<r.length;e++)if(r[e]===t){this._activateLocation(e);const s=this.getGlSource(t);n.bindTexture(s.target,null),r[e]=null}}_activateLocation(e){this._activeTextureLocation!==e&&(this._activeTextureLocation=e,this._gl.activeTexture(this._gl.TEXTURE0+e))}_initSource(e){const t=this._gl,r=new Ie(t.createTexture());if(r.type=this._mapFormatToType[e.format],r.internalFormat=this._mapFormatToInternalFormat[e.format],r.format=this._mapFormatToFormat[e.format],e.autoGenerateMipmaps&&(this._renderer.context.supports.nonPowOf2mipmaps||e.isPowerOfTwo)){const t=Math.max(e.width,e.height);e.mipLevelCount=Math.floor(Math.log2(t))+1}return this._glTextures[e.uid]=r,this.managedTextures.includes(e)||(e.on("update",this.onSourceUpdate,this),e.on("resize",this.onSourceUpdate,this),e.on("styleChange",this.onStyleChange,this),e.on("destroy",this.onSourceDestroy,this),e.on("unload",this.onSourceUnload,this),e.on("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.push(e)),this.onSourceUpdate(e),this.updateStyle(e,!1),r}onStyleChange(e){this.updateStyle(e,!1)}updateStyle(e,t){const r=this._gl,n=this.getGlSource(e);r.bindTexture(r.TEXTURE_2D,n.texture),this._boundTextures[this._activeTextureLocation]=e,we(e.style,r,e.mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"texParameteri",r.TEXTURE_2D,!this._renderer.context.supports.nonPowOf2wrapping&&!e.isPowerOfTwo,t)}onSourceUnload(e){const t=this._glTextures[e.uid];t&&(this.unbind(e),this._glTextures[e.uid]=null,this._gl.deleteTexture(t.texture))}onSourceUpdate(e){const t=this._gl,r=this.getGlSource(e);t.bindTexture(t.TEXTURE_2D,r.texture),this._boundTextures[this._activeTextureLocation]=e,this._uploads[e.uploadMethodId]?this._uploads[e.uploadMethodId].upload(e,r,t,this._renderer.context.webGLVersion):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e.pixelWidth,e.pixelHeight,0,t.RGBA,t.UNSIGNED_BYTE,null),e.autoGenerateMipmaps&&e.mipLevelCount>1&&this.onUpdateMipmaps(e,!1)}onUpdateMipmaps(e,t=!0){t&&this.bindSource(e,0);const r=this.getGlSource(e);this._gl.generateMipmap(r.target)}onSourceDestroy(e){e.off("destroy",this.onSourceDestroy,this),e.off("update",this.onSourceUpdate,this),e.off("resize",this.onSourceUpdate,this),e.off("unload",this.onSourceUnload,this),e.off("styleChange",this.onStyleChange,this),e.off("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.splice(this.managedTextures.indexOf(e),1),this.onSourceUnload(e)}_initSampler(e){const t=this._gl,r=this._gl.createSampler();return this._glSamplers[e._resourceId]=r,we(e,t,this._boundTextures[this._activeTextureLocation].mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"samplerParameteri",r,!1,!0),this._glSamplers[e._resourceId]}_getGlSampler(e){return this._glSamplers[e._resourceId]||this._initSampler(e)}getGlSource(e){return this._glTextures[e.uid]||this._initSource(e)}generateCanvas(e){const{pixels:t,width:r,height:n}=this.getPixels(e),s=G.e.get().createCanvas();s.width=r,s.height=n;const i=s.getContext("2d");if(i){const e=i.createImageData(r,n);e.data.set(t),i.putImageData(e,0,0)}return s}getPixels(e){const t=e.source.resolution,r=e.frame,n=Math.max(Math.round(r.width*t),1),s=Math.max(Math.round(r.height*t),1),i=new Uint8Array(4*n*s),a=this._renderer,o=a.renderTarget.getRenderTarget(e),c=a.renderTarget.getGpuRenderTarget(o),u=a.gl;return u.bindFramebuffer(u.FRAMEBUFFER,c.resolveTargetFramebuffer),u.readPixels(Math.round(r.x*t),Math.round(r.y*t),n,s,u.RGBA,u.UNSIGNED_BYTE,i),{pixels:new Uint8ClampedArray(i.buffer),width:n,height:s}}destroy(){this.managedTextures.slice().forEach((e=>this.onSourceDestroy(e))),this.managedTextures=null,this._renderer=null}}Ve.extension={type:[n.Ag.WebGLSystem],name:"texture"};const ke=[...x.i,ne,W,I,N,Ve,_e,M,Ne,pe,K,Ce,$,Y],Xe=[...x.f],We=[R,b,g],Ye=[],Ke=[],ze=[];n.XO.handleByNamedList(n.Ag.WebGLSystem,Ye),n.XO.handleByNamedList(n.Ag.WebGLPipes,Ke),n.XO.handleByNamedList(n.Ag.WebGLPipesAdaptor,ze),n.XO.add(...ke,...Xe,...We);class je extends S.k{constructor(){super({name:"webgl",type:p.W.WEBGL,systems:Ye,renderPipes:Ke,renderPipeAdaptors:ze})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,