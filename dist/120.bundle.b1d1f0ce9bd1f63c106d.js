(self.webpackChunk=self.webpackChunk||[]).push([[120],{8133:t=>{t.exports=function(t){var s=[];return t.replace(i,(function(t,i,n){var a=i.toLowerCase();for(n=function(t){var e=t.match(r);return e?e.map(Number):[]}(n),"m"==a&&n.length>2&&(s.push([i].concat(n.splice(0,2))),a="l",i="m"==i?"l":"L");;){if(n.length==e[a])return n.unshift(i),s.push(n);if(n.length<e[a])throw new Error("malformed path data");s.push([i].concat(n.splice(0,e[a])))}})),s};var e={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},i=/([astvzqmhlc])([^astvzqmhlc]*)/gi,r=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi},4732:(t,e,i)=>{"use strict";var r=i(8507);class s{static init(t){Object.defineProperty(this,"resizeTo",{set(t){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=t,t&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame((()=>this.resize())))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let t,e;if(this._cancelResize(),this._resizeTo===globalThis.window)t=globalThis.innerWidth,e=globalThis.innerHeight;else{const{clientWidth:i,clientHeight:r}=this._resizeTo;t=i,e=r}this.renderer.resize(t,e),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=t.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}s.extension=r.Ag.Application;var n=i(4458),a=i(7309);class o{static init(t){t=Object.assign({autoStart:!0,sharedTicker:!1},t),Object.defineProperty(this,"ticker",{set(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,n.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=t.sharedTicker?a.R.shared:new a.R,t.autoStart&&this.start()}static destroy(){if(this._ticker){const t=this._ticker;this.ticker=null,t.destroy()}}}o.extension=r.Ag.Application,r.XO.add(s),r.XO.add(o)},9935:(t,e,i)=>{"use strict";var r=i(8507);class s{constructor(t){this._renderer=t}push(t,e,i){this._renderer.renderPipes.batch.break(i),i.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:e,filterEffect:t})}pop(t,e,i){this._renderer.renderPipes.batch.break(i),i.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(t){"pushFilter"===t.action?this._renderer.filter.push(t):"popFilter"===t.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}s.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"filter"};var n=i(9313),a=i(5101),o=i(3513),h=i(6011),l=i(5811),c=i(4492),u=i(2437),d=i(5099),p=i(9636),f=i(2208);const g=new n.u;function x(t,e){e.clear(),m(t,e),e.isValid||e.set(0,0,0,0);const i=t.renderGroup||t.parentRenderGroup;return e.applyMatrix(i.worldTransform),e}function m(t,e){if(7!==t.localDisplayStatus||!t.measurable)return;const i=!!t.effects.length;let r=e;if((t.renderGroup||i)&&(r=f.o.get().clear()),t.boundsArea)e.addRect(t.boundsArea,t.worldTransform);else{if(t.renderPipeId){const e=t.bounds;r.addFrame(e.minX,e.minY,e.maxX,e.maxY,t.groupTransform)}const e=t.children;for(let t=0;t<e.length;t++)m(e[t],r)}if(i){let i=!1;const s=t.renderGroup||t.parentRenderGroup;for(let e=0;e<t.effects.length;e++)t.effects[e].addBounds&&(i||(i=!0,r.applyMatrix(s.worldTransform)),t.effects[e].addBounds(r,!0));i&&(r.applyMatrix(s.worldTransform.copyTo(g).invert()),e.addBounds(r,t.relativeGroupTransform)),e.addBounds(r),f.o.return(r)}else t.renderGroup&&(e.addBounds(r,t.relativeGroupTransform),f.o.return(r))}var _=i(268);const y=new h.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class b{constructor(t){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new l.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new o.T({}),this.renderer=t}get activeBackTexture(){return this._activeFilterData?.backTexture}push(t){const e=this.renderer,i=t.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const r=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,0===i.length)return void(r.skip=!0);const s=r.bounds;if(t.renderables?function(t,e){e.clear();const i=e.matrix;for(let i=0;i<t.length;i++){const r=t[i];r.globalDisplayStatus<7||(e.matrix=r.worldTransform,e.addBounds(r.bounds))}e.matrix=i}(t.renderables,s):t.filterEffect.filterArea?(s.clear(),s.addRect(t.filterEffect.filterArea),s.applyMatrix(t.container.worldTransform)):x(t.container,s),t.container){const e=(t.container.renderGroup||t.container.parentRenderGroup).cacheToLocalTransform;e&&s.applyMatrix(e)}const n=e.renderTarget.renderTarget.colorTexture.source;let a=1/0,o=0,h=!0,l=!1,c=!1,d=!0;for(let t=0;t<i.length;t++){const r=i[t];if(a=Math.min(a,"inherit"===r.resolution?n._resolution:r.resolution),o+=r.padding,"off"===r.antialias?h=!1:"inherit"===r.antialias&&h&&(h=n.antialias),r.clipToViewport||(d=!1),!(r.compatibleRenderers&e.type)){c=!1;break}if(r.blendRequired&&!(e.backBuffer?.useBackBuffer??1)){(0,_.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),c=!1;break}c=r.enabled||c,l||(l=r.blendRequired)}if(c){if(d){const t=e.renderTarget.rootViewPort,i=e.renderTarget.renderTarget.resolution;s.fitBounds(0,t.width/i,0,t.height/i)}s.scale(a).ceil().scale(1/a).pad(0|o),s.isPositive?(r.skip=!1,r.bounds=s,r.blendRequired=l,r.container=t.container,r.filterEffect=t.filterEffect,r.previousRenderSurface=e.renderTarget.renderSurface,r.inputTexture=u.W.getOptimalTexture(s.width,s.height,a,h),e.renderTarget.bind(r.inputTexture,!0),e.globalUniforms.push({offset:s})):r.skip=!0}else r.skip=!0}pop(){const t=this.renderer;this._filterStackIndex--;const e=this._filterStack[this._filterStackIndex];if(e.skip)return;this._activeFilterData=e;const i=e.inputTexture,r=e.bounds;let s=c.g.EMPTY;if(t.renderTarget.finishRenderPass(),e.blendRequired){const i=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,n=t.renderTarget.getRenderTarget(e.previousRenderSurface);s=this.getBackTexture(n,r,i)}e.backTexture=s;const n=e.filterEffect.filters;if(this._globalFilterBindGroup.setResource(i.source.style,2),this._globalFilterBindGroup.setResource(s.source,3),t.globalUniforms.pop(),1===n.length)n[0].apply(this,i,e.previousRenderSurface,!1),u.W.returnTexture(i);else{let t=e.inputTexture,i=u.W.getOptimalTexture(r.width,r.height,t.source._resolution,!1),s=0;for(s=0;s<n.length-1;++s){n[s].apply(this,t,i,!0);const e=t;t=i,i=e}n[s].apply(this,t,e.previousRenderSurface,!1),u.W.returnTexture(t),u.W.returnTexture(i)}e.blendRequired&&u.W.returnTexture(s)}getBackTexture(t,e,i){const r=t.colorTexture.source._resolution,s=u.W.getOptimalTexture(e.width,e.height,r,!1);let n=e.minX,a=e.minY;i&&(n-=i.minX,a-=i.minY),n=Math.floor(n*r),a=Math.floor(a*r);const o=Math.ceil(e.width*r),h=Math.ceil(e.height*r);return this.renderer.renderTarget.copyToTexture(t,s,{x:n,y:a},{width:o,height:h},{x:0,y:0}),s}applyFilter(t,e,i,r){const s=this.renderer,n=this._filterStack[this._filterStackIndex],o=n.bounds,h=a.b.shared,l=n.previousRenderSurface===i;let u=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,p=this._filterStackIndex-1;for(;p>0&&this._filterStack[p].skip;)--p;p>0&&(u=this._filterStack[p].inputTexture.source._resolution);const f=this._filterGlobalUniforms,g=f.uniforms,x=g.uOutputFrame,m=g.uInputSize,_=g.uInputPixel,b=g.uInputClamp,S=g.uGlobalFrame,v=g.uOutputTexture;if(l){let t=this._filterStackIndex;for(;t>0;){t--;const e=this._filterStack[this._filterStackIndex-1];if(!e.skip){h.x=e.bounds.minX,h.y=e.bounds.minY;break}}x[0]=o.minX-h.x,x[1]=o.minY-h.y}else x[0]=0,x[1]=0;x[2]=e.frame.width,x[3]=e.frame.height,m[0]=e.source.width,m[1]=e.source.height,m[2]=1/m[0],m[3]=1/m[1],_[0]=e.source.pixelWidth,_[1]=e.source.pixelHeight,_[2]=1/_[0],_[3]=1/_[1],b[0]=.5*_[2],b[1]=.5*_[3],b[2]=e.frame.width*m[2]-.5*_[2],b[3]=e.frame.height*m[3]-.5*_[3];const w=this.renderer.renderTarget.rootRenderTarget.colorTexture;S[0]=h.x*u,S[1]=h.y*u,S[2]=w.source.width*u,S[3]=w.source.height*u;const T=this.renderer.renderTarget.getRenderTarget(i);if(s.renderTarget.bind(i,!!r),i instanceof c.g?(v[0]=i.frame.width,v[1]=i.frame.height):(v[0]=T.width,v[1]=T.height),v[2]=T.isRoot?-1:1,f.update(),s.renderPipes.uniformBatch){const t=s.renderPipes.uniformBatch.getUboResource(f);this._globalFilterBindGroup.setResource(t,0)}else this._globalFilterBindGroup.setResource(f,0);this._globalFilterBindGroup.setResource(e.source,1),this._globalFilterBindGroup.setResource(e.source.style,2),t.groups[0]=this._globalFilterBindGroup,s.encoder.draw({geometry:y,shader:t,state:t._state,topology:"triangle-list"}),s.type===d.W.WEBGL&&s.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new p.c,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(t,e){const i=this._activeFilterData,r=t.set(i.inputTexture._source.width,0,0,i.inputTexture._source.height,i.bounds.minX,i.bounds.minY),s=e.worldTransform.copyTo(n.u.shared),a=e.renderGroup||e.parentRenderGroup;return a&&a.cacheToLocalTransform&&s.prepend(a.cacheToLocalTransform),s.invert(),r.prepend(s),r.scale(1/e.texture.frame.width,1/e.texture.frame.height),r.translate(e.anchor.x,e.anchor.y),r}}b.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem],name:"filter"},r.XO.add(b),r.XO.add(s)},341:(t,e,i)=>{"use strict";i.d(e,{w:()=>o});var r=i(3513),s=i(4492),n=i(6563);const a={};function o(t,e){let i=2166136261;for(let r=0;r<e;r++)i^=t[r].uid,i=Math.imul(i,16777619),i>>>=0;return a[i]||function(t,e,i){const o={};let l=0;h||(h=(0,n.a)());for(let i=0;i<h;i++){const r=i<e?t[i]:s.g.EMPTY.source;o[l++]=r.source,o[l++]=r.style}const c=new r.T(o);return a[i]=c,c}(t,e,i)}let h=0},7608:(t,e,i)=>{"use strict";i.d(e,{N:()=>n});var r=i(1761),s=i(9939);const n=new class{constructor(t){this._canvasPool=Object.create(null),this.canvasOptions=t||{},this.enableFullScreen=!1}_createCanvasAndContext(t,e){const i=r.e.get().createCanvas();i.width=t,i.height=e;const s=i.getContext("2d");return{canvas:i,context:s}}getOptimalCanvasAndContext(t,e,i=1){t=Math.ceil(t*i-1e-6),e=Math.ceil(e*i-1e-6);const r=((t=(0,s.U5)(t))<<17)+((e=(0,s.U5)(e))<<1);this._canvasPool[r]||(this._canvasPool[r]=[]);let n=this._canvasPool[r].pop();return n||(n=this._createCanvasAndContext(t,e)),n}returnCanvasAndContext(t){const e=t.canvas,{width:i,height:r}=e,s=(i<<17)+(r<<1);t.context.clearRect(0,0,i,r),this._canvasPool[s].push(t)}clear(){this._canvasPool={}}}},8928:(t,e,i)=>{"use strict";var r=i(8507),s=i(3302),n=i(7547),a=i(8218),o=i(2760),h=i(6954);class l{constructor(t,e){this.state=n.U.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=t,this._adaptor=e,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(t){const e=t.context,i=!!this._graphicsBatchesHash[t.uid],r=this.renderer.graphicsContext.updateGpuContext(e);return!(!r.isBatchable&&i===r.isBatchable)}addRenderable(t,e){const i=this.renderer.graphicsContext.updateGpuContext(t.context);t.didViewUpdate&&this._rebuild(t),i.isBatchable?this._addToBatcher(t,e):(this.renderer.renderPipes.batch.break(e),e.add(t))}updateRenderable(t){const e=this._graphicsBatchesHash[t.uid];if(e)for(let t=0;t<e.length;t++){const i=e[t];i._batcher.updateElement(i)}}destroyRenderable(t){this._graphicsBatchesHash[t.uid]&&this._removeBatchForRenderable(t.uid),t.off("destroyed",this._destroyRenderableBound)}execute(t){if(!t.isRenderable)return;const e=this.renderer,i=t.context;if(!e.graphicsContext.getGpuContext(i).batches.length)return;const r=i.customShader||this._adaptor.shader;this.state.blendMode=t.groupBlendMode;const s=r.resources.localUniforms.uniforms;s.uTransformMatrix=t.groupTransform,s.uRound=e._roundPixels|t._roundPixels,(0,o.V)(t.groupColorAlpha,s.uColor,0),this._adaptor.execute(this,t)}_rebuild(t){const e=!!this._graphicsBatchesHash[t.uid],i=this.renderer.graphicsContext.updateGpuContext(t.context);e&&this._removeBatchForRenderable(t.uid),i.isBatchable&&this._initBatchesForRenderable(t),t.batched=i.isBatchable}_addToBatcher(t,e){const i=this.renderer.renderPipes.batch,r=this._getBatchesForRenderable(t);for(let t=0;t<r.length;t++){const s=r[t];i.addToBatch(s,e)}}_getBatchesForRenderable(t){return this._graphicsBatchesHash[t.uid]||this._initBatchesForRenderable(t)}_initBatchesForRenderable(t){const e=t.context,i=this.renderer.graphicsContext.getGpuContext(e),r=this.renderer._roundPixels|t._roundPixels,s=i.batches.map((e=>{const i=a.Z.get(h.G);return e.copyTo(i),i.renderable=t,i.roundPixels=r,i}));return void 0===this._graphicsBatchesHash[t.uid]&&t.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[t.uid]=s,s}_removeBatchForRenderable(t){this._graphicsBatchesHash[t].forEach((t=>{a.Z.return(t)})),this._graphicsBatchesHash[t]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const t in this._graphicsBatchesHash)this._removeBatchForRenderable(t);this._graphicsBatchesHash=null}}l.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"graphics"},r.XO.add(l),r.XO.add(s.GH)},6954:(t,e,i)=>{"use strict";i.d(e,{G:()=>a});var r=i(9313),s=i(4676);const n=new r.u;class a{constructor(){this.packAsQuad=!1,this.batcherName="default",this.topology="triangle-list",this.applyTransform=!0,this.roundPixels=0,this._batcher=null,this._batch=null}get uvs(){return this.geometryData.uvs}get positions(){return this.geometryData.vertices}get indices(){return this.geometryData.indices}get blendMode(){return this.applyTransform?this.renderable.groupBlendMode:"normal"}get color(){const t=this.baseColor,e=t>>16|65280&t|(255&t)<<16,i=this.renderable;return i?(0,s.u)(e,i.groupColor)+(this.alpha*i.groupAlpha*255<<24):e+(255*this.alpha<<24)}get transform(){return this.renderable?.groupTransform||n}copyTo(t){t.indexOffset=this.indexOffset,t.indexSize=this.indexSize,t.attributeOffset=this.attributeOffset,t.attributeSize=this.attributeSize,t.baseColor=this.baseColor,t.alpha=this.alpha,t.texture=this.texture,t.geometryData=this.geometryData,t.topology=this.topology}reset(){this.applyTransform=!0,this.renderable=null,this.topology="triangle-list"}}},4835:(t,e,i)=>{"use strict";i.d(e,{T:()=>E});var r=i(4486),s=i(2577),n=i(9313),a=i(5101),o=i(4492),h=i(133),l=i(4670),c=i(9636),u=i(268),d=i(8133),p=i(9252);class f{constructor(t=0,e=0,i=0){this.type="circle",this.x=t,this.y=e,this.radius=i}clone(){return new f(this.x,this.y,this.radius)}contains(t,e){if(this.radius<=0)return!1;const i=this.radius*this.radius;let r=this.x-t,s=this.y-e;return r*=r,s*=s,r+s<=i}strokeContains(t,e,i,r=.5){if(0===this.radius)return!1;const s=this.x-t,n=this.y-e,a=this.radius,o=(1-r)*i,h=Math.sqrt(s*s+n*n);return h<=a+o&&h>a-(i-o)}getBounds(t){return t||(t=new p.M),t.x=this.x-this.radius,t.y=this.y-this.radius,t.width=2*this.radius,t.height=2*this.radius,t}copyFrom(t){return this.x=t.x,this.y=t.y,this.radius=t.radius,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`}}class g{constructor(t=0,e=0,i=0,r=0){this.type="ellipse",this.x=t,this.y=e,this.halfWidth=i,this.halfHeight=r}clone(){return new g(this.x,this.y,this.halfWidth,this.halfHeight)}contains(t,e){if(this.halfWidth<=0||this.halfHeight<=0)return!1;let i=(t-this.x)/this.halfWidth,r=(e-this.y)/this.halfHeight;return i*=i,r*=r,i+r<=1}strokeContains(t,e,i,r=.5){const{halfWidth:s,halfHeight:n}=this;if(s<=0||n<=0)return!1;const a=i*(1-r),o=i-a,h=s-o,l=n-o,c=s+a,u=n+a,d=t-this.x,p=e-this.y;return d*d/(h*h)+p*p/(l*l)>1&&d*d/(c*c)+p*p/(u*u)<=1}getBounds(t){return t||(t=new p.M),t.x=this.x-this.halfWidth,t.y=this.y-this.halfHeight,t.width=2*this.halfWidth,t.height=2*this.halfHeight,t}copyFrom(t){return this.x=t.x,this.y=t.y,this.halfWidth=t.halfWidth,this.halfHeight=t.halfHeight,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`}}function x(t,e,i,r,s,n){const a=s-i,o=n-r,h=a*a+o*o;let l,c,u=-1;0!==h&&(u=((t-i)*a+(e-r)*o)/h),u<0?(l=i,c=r):u>1?(l=s,c=n):(l=i+u*a,c=r+u*o);const d=t-l,p=e-c;return d*d+p*p}class m{constructor(...t){this.type="polygon";let e=Array.isArray(t[0])?t[0]:t;if("number"!=typeof e[0]){const t=[];for(let i=0,r=e.length;i<r;i++)t.push(e[i].x,e[i].y);e=t}this.points=e,this.closePath=!0}clone(){const t=this.points.slice(),e=new m(t);return e.closePath=this.closePath,e}contains(t,e){let i=!1;const r=this.points.length/2;for(let s=0,n=r-1;s<r;n=s++){const r=this.points[2*s],a=this.points[2*s+1],o=this.points[2*n],h=this.points[2*n+1];a>e!=h>e&&t<(e-a)/(h-a)*(o-r)+r&&(i=!i)}return i}strokeContains(t,e,i,r=.5){const s=i*i,n=s*(1-r),a=s-n,{points:o}=this,h=o.length-(this.closePath?0:2);for(let i=0;i<h;i+=2){const r=o[i],s=o[i+1],h=o[(i+2)%o.length],l=o[(i+3)%o.length];if(x(t,e,r,s,h,l)<=(Math.sign((h-r)*(e-s)-(l-s)*(t-r))<0?a:n))return!0}return!1}getBounds(t){t||(t=new p.M);const e=this.points;let i=1/0,r=-1/0,s=1/0,n=-1/0;for(let t=0,a=e.length;t<a;t+=2){const a=e[t],o=e[t+1];i=a<i?a:i,r=a>r?a:r,s=o<s?o:s,n=o>n?o:n}return t.x=i,t.width=r-i,t.y=s,t.height=n-s,t}copyFrom(t){return this.points=t.points.slice(),this.closePath=t.closePath,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:PolygoncloseStroke=${this.closePath}points=${this.points.reduce(((t,e)=>`${t}, ${e}`),"")}]`}get lastX(){return this.points[this.points.length-2]}get lastY(){return this.points[this.points.length-1]}get x(){return this.points[this.points.length-2]}get y(){return this.points[this.points.length-1]}}const _=(t,e,i,r,s,n,a)=>{const o=t-i,h=e-r,l=Math.sqrt(o*o+h*h);return l>=s-n&&l<=s+a};class y{constructor(t=0,e=0,i=0,r=0,s=20){this.type="roundedRectangle",this.x=t,this.y=e,this.width=i,this.height=r,this.radius=s}getBounds(t){return t||(t=new p.M),t.x=this.x,t.y=this.y,t.width=this.width,t.height=this.height,t}clone(){return new y(this.x,this.y,this.width,this.height,this.radius)}copyFrom(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this}copyTo(t){return t.copyFrom(this),t}contains(t,e){if(this.width<=0||this.height<=0)return!1;if(t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height){const i=Math.max(0,Math.min(this.radius,Math.min(this.width,this.height)/2));if(e>=this.y+i&&e<=this.y+this.height-i||t>=this.x+i&&t<=this.x+this.width-i)return!0;let r=t-(this.x+i),s=e-(this.y+i);const n=i*i;if(r*r+s*s<=n)return!0;if(r=t-(this.x+this.width-i),r*r+s*s<=n)return!0;if(s=e-(this.y+this.height-i),r*r+s*s<=n)return!0;if(r=t-(this.x+i),r*r+s*s<=n)return!0}return!1}strokeContains(t,e,i,r=.5){const{x:s,y:n,width:a,height:o,radius:h}=this,l=i*(1-r),c=i-l,u=s+h,d=n+h,p=s+a,f=n+o;return(t>=s-l&&t<=s+c||t>=p-c&&t<=p+l)&&e>=d&&e<=d+(o-2*h)||(e>=n-l&&e<=n+c||e>=f-c&&e<=f+l)&&t>=u&&t<=u+(a-2*h)||t<u&&e<d&&_(t,e,u,d,h,c,l)||t>p-h&&e<d&&_(t,e,p-h,d,h,c,l)||t>p-h&&e>f-h&&_(t,e,p-h,f-h,h,c,l)||t<u&&e>f-h&&_(t,e,u,f-h,h,c,l)}toString(){return`[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`}}var b=i(3302);const S=1.1920929e-7;function v(t,e,i,r,s,n,a,o,h,l){let c=(1-Math.min(.99,Math.max(0,l??b.GH.defaultOptions.bezierSmoothness)))/1;return c*=c,function(t,e,i,r,s,n,a,o,h,l){w(t,e,i,r,s,n,a,o,h,l,0),h.push(a,o)}(e,i,r,s,n,a,o,h,t,c),t}function w(t,e,i,r,s,n,a,o,h,l,c){if(c>8)return;Math.PI;const u=(t+i)/2,d=(e+r)/2,p=(i+s)/2,f=(r+n)/2,g=(s+a)/2,x=(n+o)/2,m=(u+p)/2,_=(d+f)/2,y=(p+g)/2,b=(f+x)/2,v=(m+y)/2,T=(_+b)/2;if(c>0){let c=a-t,u=o-e;const d=Math.abs((i-a)*u-(r-o)*c),p=Math.abs((s-a)*u-(n-o)*c);if(d>S&&p>S){if((d+p)*(d+p)<=l*(c*c+u*u))return void h.push(v,T)}else if(d>S){if(d*d<=l*(c*c+u*u))return void h.push(v,T)}else if(p>S){if(p*p<=l*(c*c+u*u))return void h.push(v,T)}else if(c=v-(t+a)/2,u=T-(e+o)/2,c*c+u*u<=l)return void h.push(v,T)}w(t,e,u,d,m,_,v,T,h,l,c+1),w(v,T,y,b,g,x,a,o,h,l,c+1)}function T(t,e,i,r,s,n,a,o){let h=(1-Math.min(.99,Math.max(0,o??b.GH.defaultOptions.bezierSmoothness)))/1;return h*=h,function(t,e,i,r,s,n,a,o){M(a,t,e,i,r,s,n,o,0),a.push(s,n)}(e,i,r,s,n,a,t,h),t}function M(t,e,i,r,s,n,a,o,h){if(h>8)return;Math.PI;const l=(e+r)/2,c=(i+s)/2,u=(r+n)/2,d=(s+a)/2,p=(l+u)/2,f=(c+d)/2;let g=n-e,x=a-i;const m=Math.abs((r-n)*x-(s-a)*g);if(m>1.1920929e-7){if(m*m<=o*(g*g+x*x))return void t.push(p,f)}else if(g=p-(e+n)/2,x=f-(i+a)/2,g*g+x*x<=o)return void t.push(p,f);M(t,e,i,l,c,p,f,o,h+1),M(t,p,f,u,d,n,a,o,h+1)}function C(t,e,i,r,s,n,a,o){let h=Math.abs(s-n);(!a&&s>n||a&&n>s)&&(h=2*Math.PI-h),o||(o=Math.max(6,Math.floor(6*Math.pow(r,1/3)*(h/Math.PI))));let l=h/(o=Math.max(o,3)),c=s;l*=a?-1:1;for(let s=0;s<o+1;s++){const s=e+Math.cos(c)*r,n=i+Math.sin(c)*r;t.push(s,n),c+=l}}const P=2*Math.PI,k={centerX:0,centerY:0,ang1:0,ang2:0},B=({x:t,y:e},i,r,s,n,a,o,h)=>{const l=s*(t*=i)-n*(e*=r),c=n*t+s*e;return h.x=l+a,h.y=c+o,h};function R(t,e){const i=-1.5707963267948966===e?-.551915024494:4/3*Math.tan(e/4),r=1.5707963267948966===e?.551915024494:i,s=Math.cos(t),n=Math.sin(t),a=Math.cos(t+e),o=Math.sin(t+e);return[{x:s-n*r,y:n+s*r},{x:a+o*r,y:o-a*r},{x:a,y:o}]}const A=(t,e,i,r)=>{let s=t*i+e*r;return s>1&&(s=1),s<-1&&(s=-1),(t*r-e*i<0?-1:1)*Math.acos(s)};const F=new p.M;class U{constructor(t){this.shapePrimitives=[],this._currentPoly=null,this._bounds=new c.c,this._graphicsPath2D=t}moveTo(t,e){return this.startPoly(t,e),this}lineTo(t,e){this._ensurePoly();const i=this._currentPoly.points,r=i[i.length-2],s=i[i.length-1];return r===t&&s===e||i.push(t,e),this}arc(t,e,i,r,s,n){return this._ensurePoly(!1),C(this._currentPoly.points,t,e,i,r,s,n),this}arcTo(t,e,i,r,s){return this._ensurePoly(),function(t,e,i,r,s,n){const a=t[t.length-2],o=t[t.length-1]-i,h=a-e,l=s-i,c=r-e,u=Math.abs(o*c-h*l);if(u<1e-8||0===n)return void(t[t.length-2]===e&&t[t.length-1]===i||t.push(e,i));const d=o*o+h*h,p=l*l+c*c,f=o*l+h*c,g=n*Math.sqrt(d)/u,x=n*Math.sqrt(p)/u,m=g*f/d,_=x*f/p,y=g*c+x*h,b=g*l+x*o,S=h*(x+m),v=o*(x+m),w=c*(g+_),T=l*(g+_);C(t,y+e,b+i,n,Math.atan2(v-b,S-y),Math.atan2(T-b,w-y),h*l>c*o)}(this._currentPoly.points,t,e,i,r,s),this}arcToSvg(t,e,i,r,s,n,a){return function(t,e,i,r,s,n,a,o=0,h=0,l=0){if(0===n||0===a)return;const c=Math.sin(o*P/360),u=Math.cos(o*P/360),d=u*(e-r)/2+c*(i-s)/2,p=-c*(e-r)/2+u*(i-s)/2;if(0===d&&0===p)return;n=Math.abs(n),a=Math.abs(a);const f=Math.pow(d,2)/Math.pow(n,2)+Math.pow(p,2)/Math.pow(a,2);f>1&&(n*=Math.sqrt(f),a*=Math.sqrt(f)),((t,e,i,r,s,n,a,o,h,l,c,u,d)=>{const p=Math.pow(s,2),f=Math.pow(n,2),g=Math.pow(c,2),x=Math.pow(u,2);let m=p*f-p*x-f*g;m<0&&(m=0),m/=p*x+f*g,m=Math.sqrt(m)*(a===o?-1:1);const _=m*s/n*u,y=m*-n/s*c,b=l*_-h*y+(t+i)/2,S=h*_+l*y+(e+r)/2,v=(c-_)/s,w=(u-y)/n,T=(-c-_)/s,M=(-u-y)/n,C=A(1,0,v,w);let k=A(v,w,T,M);0===o&&k>0&&(k-=P),1===o&&k<0&&(k+=P),d.centerX=b,d.centerY=S,d.ang1=C,d.ang2=k})(e,i,r,s,n,a,h,l,c,u,d,p,k);let{ang1:g,ang2:x}=k;const{centerX:m,centerY:_}=k;let y=Math.abs(x)/(P/4);Math.abs(1-y)<1e-7&&(y=1);const b=Math.max(Math.ceil(y),1);x/=b;let S=t[t.length-2],w=t[t.length-1];const T={x:0,y:0};for(let e=0;e<b;e++){const e=R(g,x),{x:i,y:r}=B(e[0],n,a,u,c,m,_,T),{x:s,y:o}=B(e[1],n,a,u,c,m,_,T),{x:h,y:l}=B(e[2],n,a,u,c,m,_,T);v(t,S,w,i,r,s,o,h,l),S=h,w=l,g+=x}}(this._currentPoly.points,this._currentPoly.lastX,this._currentPoly.lastY,n,a,t,e,i,r,s),this}bezierCurveTo(t,e,i,r,s,n,a){this._ensurePoly();const o=this._currentPoly;return v(this._currentPoly.points,o.lastX,o.lastY,t,e,i,r,s,n,a),this}quadraticCurveTo(t,e,i,r,s){this._ensurePoly();const n=this._currentPoly;return T(this._currentPoly.points,n.lastX,n.lastY,t,e,i,r,s),this}closePath(){return this.endPoly(!0),this}addPath(t,e){this.endPoly(),e&&!e.isIdentity()&&(t=t.clone(!0)).transform(e);for(let e=0;e<t.instructions.length;e++){const i=t.instructions[e];this[i.action](...i.data)}return this}finish(t=!1){this.endPoly(t)}rect(t,e,i,r,s){return this.drawShape(new p.M(t,e,i,r),s),this}circle(t,e,i,r){return this.drawShape(new f(t,e,i),r),this}poly(t,e,i){const r=new m(t);return r.closePath=e,this.drawShape(r,i),this}regularPoly(t,e,i,r,s=0,n){r=Math.max(0|r,3);const a=-1*Math.PI/2+s,o=2*Math.PI/r,h=[];for(let s=0;s<r;s++){const r=a-s*o;h.push(t+i*Math.cos(r),e+i*Math.sin(r))}return this.poly(h,!0,n),this}roundPoly(t,e,i,r,s,n=0,a){if(r=Math.max(0|r,3),s<=0)return this.regularPoly(t,e,i,r,n);const o=i*Math.sin(Math.PI/r)-.001;s=Math.min(s,o);const h=-1*Math.PI/2+n,l=2*Math.PI/r,c=(r-2)*Math.PI/r/2;for(let n=0;n<r;n++){const r=n*l+h,o=t+i*Math.cos(r),u=e+i*Math.sin(r),d=r+Math.PI+c,p=r-Math.PI-c,f=o+s*Math.cos(d),g=u+s*Math.sin(d),x=o+s*Math.cos(p),m=u+s*Math.sin(p);0===n?this.moveTo(f,g):this.lineTo(f,g),this.quadraticCurveTo(o,u,x,m,a)}return this.closePath()}roundShape(t,e,i=!1,r){return t.length<3?this:(i?function(t,e,i,r){const s=(t,e)=>Math.sqrt((t.x-e.x)**2+(t.y-e.y)**2),n=(t,e,i)=>({x:t.x+(e.x-t.x)*i,y:t.y+(e.y-t.y)*i}),a=e.length;for(let o=0;o<a;o++){const h=e[(o+1)%a],l=h.radius??i;if(l<=0){0===o?t.moveTo(h.x,h.y):t.lineTo(h.x,h.y);continue}const c=e[o],u=e[(o+2)%a],d=s(c,h);let p;p=d<1e-4?h:n(h,c,Math.min(d/2,l)/d);const f=s(u,h);let g;g=f<1e-4?h:n(h,u,Math.min(f/2,l)/f),0===o?t.moveTo(p.x,p.y):t.lineTo(p.x,p.y),t.quadraticCurveTo(h.x,h.y,g.x,g.y,r)}}(this,t,e,r):function(t,e,i){const r=(t,e)=>{const i=e.x-t.x,r=e.y-t.y,s=Math.sqrt(i*i+r*r);return{len:s,nx:i/s,ny:r/s}},s=(e,i)=>{0===e?t.moveTo(i.x,i.y):t.lineTo(i.x,i.y)};let n=e[e.length-1];for(let a=0;a<e.length;a++){const o=e[a%e.length],h=o.radius??i;if(h<=0){s(a,o),n=o;continue}const l=e[(a+1)%e.length],c=r(o,n),u=r(o,l);if(c.len<1e-4||u.len<1e-4){s(a,o),n=o;continue}let d=Math.asin(c.nx*u.ny-c.ny*u.nx),p=1,f=!1;c.nx*u.nx-c.ny*-u.ny<0?d<0?d=Math.PI+d:(d=Math.PI-d,p=-1,f=!0):d>0&&(p=-1,f=!0);const g=d/2;let x,m=Math.abs(Math.cos(g)*h/Math.sin(g));m>Math.min(c.len/2,u.len/2)?(m=Math.min(c.len/2,u.len/2),x=Math.abs(m*Math.sin(g)/Math.cos(g))):x=h;const _=o.x+u.nx*m+-u.ny*x*p,y=o.y+u.ny*m+u.nx*x*p,b=Math.atan2(c.ny,c.nx)+Math.PI/2*p,S=Math.atan2(u.ny,u.nx)-Math.PI/2*p;0===a&&t.moveTo(_+Math.cos(b)*x,y+Math.sin(b)*x),t.arc(_,y,x,b,S,f),n=o}}(this,t,e),this.closePath())}filletRect(t,e,i,r,s){if(0===s)return this.rect(t,e,i,r);const n=Math.min(i,r)/2,a=Math.min(n,Math.max(-n,s)),o=t+i,h=e+r,l=a<0?-a:0,c=Math.abs(a);return this.moveTo(t,e+c).arcTo(t+l,e+l,t+c,e,c).lineTo(o-c,e).arcTo(o-l,e+l,o,e+c,c).lineTo(o,h-c).arcTo(o-l,h-l,t+i-c,h,c).lineTo(t+c,h).arcTo(t+l,h-l,t,h-c,c).closePath()}chamferRect(t,e,i,r,s,n){if(s<=0)return this.rect(t,e,i,r);const a=Math.min(s,Math.min(i,r)/2),o=t+i,h=e+r,l=[t+a,e,o-a,e,o,e+a,o,h-a,o-a,h,t+a,h,t,h-a,t,e+a];for(let t=l.length-1;t>=2;t-=2)l[t]===l[t-2]&&l[t-1]===l[t-3]&&l.splice(t-1,2);return this.poly(l,!0,n)}ellipse(t,e,i,r,s){return this.drawShape(new g(t,e,i,r),s),this}roundRect(t,e,i,r,s,n){return this.drawShape(new y(t,e,i,r,s),n),this}drawShape(t,e){return this.endPoly(),this.shapePrimitives.push({shape:t,transform:e}),this}startPoly(t,e){let i=this._currentPoly;return i&&this.endPoly(),i=new m,i.points.push(t,e),this._currentPoly=i,this}endPoly(t=!1){const e=this._currentPoly;return e&&e.points.length>2&&(e.closePath=t,this.shapePrimitives.push({shape:e})),this._currentPoly=null,this}_ensurePoly(t=!0){if(!this._currentPoly&&(this._currentPoly=new m,t)){const t=this.shapePrimitives[this.shapePrimitives.length-1];if(t){let e=t.shape.x,i=t.shape.y;if(t.transform&&!t.transform.isIdentity()){const r=t.transform,s=e;e=r.a*e+r.c*i+r.tx,i=r.b*s+r.d*i+r.ty}this._currentPoly.points.push(e,i)}else this._currentPoly.points.push(0,0)}}buildPath(){const t=this._graphicsPath2D;this.shapePrimitives.length=0,this._currentPoly=null;for(let e=0;e<t.instructions.length;e++){const i=t.instructions[e];this[i.action](...i.data)}this.finish()}get bounds(){const t=this._bounds;t.clear();const e=this.shapePrimitives;for(let i=0;i<e.length;i++){const r=e[i],s=r.shape.getBounds(F);r.transform?t.addRect(s,r.transform):t.addRect(s)}return t}}class z{constructor(t){this.instructions=[],this.uid=(0,h.L)("graphicsPath"),this._dirty=!0,"string"==typeof t?function(t,e){const i=d(t),r=[];let s=null,n=0,a=0;for(let t=0;t<i.length;t++){const o=i[t],h=o[0],l=o;switch(h){case"M":n=l[1],a=l[2],e.moveTo(n,a);break;case"m":n+=l[1],a+=l[2],e.moveTo(n,a);break;case"H":n=l[1],e.lineTo(n,a);break;case"h":n+=l[1],e.lineTo(n,a);break;case"V":a=l[1],e.lineTo(n,a);break;case"v":a+=l[1],e.lineTo(n,a);break;case"L":n=l[1],a=l[2],e.lineTo(n,a);break;case"l":n+=l[1],a+=l[2],e.lineTo(n,a);break;case"C":n=l[5],a=l[6],e.bezierCurveTo(l[1],l[2],l[3],l[4],n,a);break;case"c":e.bezierCurveTo(n+l[1],a+l[2],n+l[3],a+l[4],n+l[5],a+l[6]),n+=l[5],a+=l[6];break;case"S":n=l[3],a=l[4],e.bezierCurveToShort(l[1],l[2],n,a);break;case"s":e.bezierCurveToShort(n+l[1],a+l[2],n+l[3],a+l[4]),n+=l[3],a+=l[4];break;case"Q":n=l[3],a=l[4],e.quadraticCurveTo(l[1],l[2],n,a);break;case"q":e.quadraticCurveTo(n+l[1],a+l[2],n+l[3],a+l[4]),n+=l[3],a+=l[4];break;case"T":n=l[1],a=l[2],e.quadraticCurveToShort(n,a);break;case"t":n+=l[1],a+=l[2],e.quadraticCurveToShort(n,a);break;case"A":n=l[6],a=l[7],e.arcToSvg(l[1],l[2],l[3],l[4],l[5],n,a);break;case"a":n+=l[6],a+=l[7],e.arcToSvg(l[1],l[2],l[3],l[4],l[5],n,a);break;case"Z":case"z":e.closePath(),r.length>0&&(s=r.pop(),s?(n=s.startX,a=s.startY):(n=0,a=0)),s=null;break;default:(0,u.R)(`Unknown SVG path command: ${h}`)}"Z"!==h&&"z"!==h&&null===s&&(s={startX:n,startY:a},r.push(s))}}(t,this):this.instructions=t?.slice()??[]}get shapePath(){return this._shapePath||(this._shapePath=new U(this)),this._dirty&&(this._dirty=!1,this._shapePath.buildPath()),this._shapePath}addPath(t,e){return t=t.clone(),this.instructions.push({action:"addPath",data:[t,e]}),this._dirty=!0,this}arc(...t){return this.instructions.push({action:"arc",data:t}),this._dirty=!0,this}arcTo(...t){return this.instructions.push({action:"arcTo",data:t}),this._dirty=!0,this}arcToSvg(...t){return this.instructions.push({action:"arcToSvg",data:t}),this._dirty=!0,this}bezierCurveTo(...t){return this.instructions.push({action:"bezierCurveTo",data:t}),this._dirty=!0,this}bezierCurveToShort(t,e,i,r,s){const n=this.instructions[this.instructions.length-1],o=this.getLastPoint(a.b.shared);let h=0,l=0;if(n&&"bezierCurveTo"===n.action){h=n.data[2],l=n.data[3];const t=o.x,e=o.y;h=t+(t-h),l=e+(e-l)}else h=o.x,l=o.y;return this.instructions.push({action:"bezierCurveTo",data:[h,l,t,e,i,r,s]}),this._dirty=!0,this}closePath(){return this.instructions.push({action:"closePath",data:[]}),this._dirty=!0,this}ellipse(...t){return this.instructions.push({action:"ellipse",data:t}),this._dirty=!0,this}lineTo(...t){return this.instructions.push({action:"lineTo",data:t}),this._dirty=!0,this}moveTo(...t){return this.instructions.push({action:"moveTo",data:t}),this}quadraticCurveTo(...t){return this.instructions.push({action:"quadraticCurveTo",data:t}),this._dirty=!0,this}quadraticCurveToShort(t,e,i){const r=this.instructions[this.instructions.length-1],s=this.getLastPoint(a.b.shared);let n=0,o=0;if(r&&"quadraticCurveTo"===r.action){n=r.data[0],o=r.data[1];const t=s.x,e=s.y;n=t+(t-n),o=e+(e-o)}else n=s.x,o=s.y;return this.instructions.push({action:"quadraticCurveTo",data:[n,o,t,e,i]}),this._dirty=!0,this}rect(t,e,i,r,s){return this.instructions.push({action:"rect",data:[t,e,i,r,s]}),this._dirty=!0,this}circle(t,e,i,r){return this.instructions.push({action:"circle",data:[t,e,i,r]}),this._dirty=!0,this}roundRect(...t){return this.instructions.push({action:"roundRect",data:t}),this._dirty=!0,this}poly(...t){return this.instructions.push({action:"poly",data:t}),this._dirty=!0,this}regularPoly(...t){return this.instructions.push({action:"regularPoly",data:t}),this._dirty=!0,this}roundPoly(...t){return this.instructions.push({action:"roundPoly",data:t}),this._dirty=!0,this}roundShape(...t){return this.instructions.push({action:"roundShape",data:t}),this._dirty=!0,this}filletRect(...t){return this.instructions.push({action:"filletRect",data:t}),this._dirty=!0,this}chamferRect(...t){return this.instructions.push({action:"chamferRect",data:t}),this._dirty=!0,this}star(t,e,i,r,s,n,a){s||(s=r/2);const o=-1*Math.PI/2+n,h=2*i,l=2*Math.PI/h,c=[];for(let i=0;i<h;i++){const n=i%2?s:r,a=i*l+o;c.push(t+n*Math.cos(a),e+n*Math.sin(a))}return this.poly(c,!0,a),this}clone(t=!1){const e=new z;if(t)for(let t=0;t<this.instructions.length;t++){const i=this.instructions[t];e.instructions.push({action:i.action,data:i.data.slice()})}else e.instructions=this.instructions.slice();return e}clear(){return this.instructions.length=0,this._dirty=!0,this}transform(t){if(t.isIdentity())return this;const e=t.a,i=t.b,r=t.c,s=t.d,n=t.tx,a=t.ty;let o=0,h=0,l=0,c=0,d=0,p=0,f=0,g=0;for(let x=0;x<this.instructions.length;x++){const m=this.instructions[x],_=m.data;switch(m.action){case"moveTo":case"lineTo":o=_[0],h=_[1],_[0]=e*o+r*h+n,_[1]=i*o+s*h+a;break;case"bezierCurveTo":l=_[0],c=_[1],d=_[2],p=_[3],o=_[4],h=_[5],_[0]=e*l+r*c+n,_[1]=i*l+s*c+a,_[2]=e*d+r*p+n,_[3]=i*d+s*p+a,_[4]=e*o+r*h+n,_[5]=i*o+s*h+a;break;case"quadraticCurveTo":l=_[0],c=_[1],o=_[2],h=_[3],_[0]=e*l+r*c+n,_[1]=i*l+s*c+a,_[2]=e*o+r*h+n,_[3]=i*o+s*h+a;break;case"arcToSvg":o=_[5],h=_[6],f=_[0],g=_[1],_[0]=e*f+r*g,_[1]=i*f+s*g,_[5]=e*o+r*h+n,_[6]=i*o+s*h+a;break;case"circle":_[4]=W(_[3],t);break;case"rect":_[4]=W(_[4],t);break;case"ellipse":_[8]=W(_[8],t);break;case"roundRect":_[5]=W(_[5],t);break;case"addPath":_[0].transform(t);break;case"poly":_[2]=W(_[2],t);break;default:(0,u.R)("unknown transform action",m.action)}}return this._dirty=!0,this}get bounds(){return this.shapePath.bounds}getLastPoint(t){let e=this.instructions.length-1,i=this.instructions[e];if(!i)return t.x=0,t.y=0,t;for(;"closePath"===i.action;){if(e--,e<0)return t.x=0,t.y=0,t;i=this.instructions[e]}switch(i.action){case"moveTo":case"lineTo":t.x=i.data[0],t.y=i.data[1];break;case"quadraticCurveTo":t.x=i.data[2],t.y=i.data[3];break;case"bezierCurveTo":t.x=i.data[4],t.y=i.data[5];break;case"arc":case"arcToSvg":t.x=i.data[5],t.y=i.data[6];break;case"addPath":i.data[0].getLastPoint(t)}return t}}function W(t,e){return t?t.prepend(e):e.clone()}function H(t,e){if("string"==typeof t){const e=document.createElement("div");e.innerHTML=t.trim(),t=e.querySelector("svg")}return G(t,{context:e,path:new z},null,null),e}function G(t,e,i,r){const n=t.children,{fillStyle:a,strokeStyle:o}=function(t){const e=t.getAttribute("style"),i={},r={};let n=!1,a=!1;if(e){const t=e.split(";");for(let e=0;e<t.length;e++){const o=t[e],[h,l]=o.split(":");switch(h){case"stroke":"none"!==l&&(i.color=s.Q.shared.setValue(l).toNumber(),a=!0);break;case"stroke-width":i.width=Number(l);break;case"fill":"none"!==l&&(n=!0,r.color=s.Q.shared.setValue(l).toNumber());break;case"fill-opacity":r.alpha=Number(l);break;case"stroke-opacity":i.alpha=Number(l);break;case"opacity":r.alpha=Number(l),i.alpha=Number(l)}}}else{const e=t.getAttribute("stroke");e&&"none"!==e&&(a=!0,i.color=s.Q.shared.setValue(e).toNumber(),i.width=O(t,"stroke-width",1));const o=t.getAttribute("fill");o&&"none"!==o&&(n=!0,r.color=s.Q.shared.setValue(o).toNumber())}return{strokeStyle:a?i:null,fillStyle:n?r:null}}(t);let h,l,c,u,d,p,f,g,x,m,_,y,b,S,v,w,T;switch(a&&i?i={...i,...a}:a&&(i=a),o&&r?r={...r,...o}:o&&(r=o),e.context.fillStyle=i,e.context.strokeStyle=r,t.nodeName.toLowerCase()){case"path":S=t.getAttribute("d"),v=new z(S),e.context.path(v),i&&e.context.fill(),r&&e.context.stroke();break;case"circle":f=O(t,"cx",0),g=O(t,"cy",0),x=O(t,"r",0),e.context.ellipse(f,g,x,x),i&&e.context.fill(),r&&e.context.stroke();break;case"rect":h=O(t,"x",0),l=O(t,"y",0),w=O(t,"width",0),T=O(t,"height",0),m=O(t,"rx",0),_=O(t,"ry",0),m||_?e.context.roundRect(h,l,w,T,m||_):e.context.rect(h,l,w,T),i&&e.context.fill(),r&&e.context.stroke();break;case"ellipse":f=O(t,"cx",0),g=O(t,"cy",0),m=O(t,"rx",0),_=O(t,"ry",0),e.context.beginPath(),e.context.ellipse(f,g,m,_),i&&e.context.fill(),r&&e.context.stroke();break;case"line":c=O(t,"x1",0),u=O(t,"y1",0),d=O(t,"x2",0),p=O(t,"y2",0),e.context.beginPath(),e.context.moveTo(c,u),e.context.lineTo(d,p),r&&e.context.stroke();break;case"polygon":b=t.getAttribute("points"),y=b.match(/\d+/g).map((t=>parseInt(t,10))),e.context.poly(y,!0),i&&e.context.fill(),r&&e.context.stroke();break;case"polyline":b=t.getAttribute("points"),y=b.match(/\d+/g).map((t=>parseInt(t,10))),e.context.poly(y,!1),r&&e.context.stroke();break;case"g":case"svg":break;default:console.info(`[SVG parser] <${t.nodeName}> elements unsupported`)}for(let t=0;t<n.length;t++)G(n[t],e,i,r)}function O(t,e,i){const r=t.getAttribute(e);return r?Number(r):i}var L=i(990);const I=new a.b,D=new n.u,V=class t extends r.A{constructor(){super(...arguments),this.uid=(0,h.L)("graphicsContext"),this.dirty=!0,this.batchMode="auto",this.instructions=[],this._activePath=new z,this._transform=new n.u,this._fillStyle={...t.defaultFillStyle},this._strokeStyle={...t.defaultStrokeStyle},this._stateStack=[],this._tick=0,this._bounds=new c.c,this._boundsDirty=!0}clone(){const e=new t;return e.batchMode=this.batchMode,e.instructions=this.instructions.slice(),e._activePath=this._activePath.clone(),e._transform=this._transform.clone(),e._fillStyle={...this._fillStyle},e._strokeStyle={...this._strokeStyle},e._stateStack=this._stateStack.slice(),e._bounds=this._bounds.clone(),e._boundsDirty=!0,e}get fillStyle(){return this._fillStyle}set fillStyle(e){this._fillStyle=(0,L.w)(e,t.defaultFillStyle)}get strokeStyle(){return this._strokeStyle}set strokeStyle(e){this._strokeStyle=(0,L.T)(e,t.defaultStrokeStyle)}setFillStyle(e){return this._fillStyle=(0,L.w)(e,t.defaultFillStyle),this}setStrokeStyle(e){return this._strokeStyle=(0,L.w)(e,t.defaultStrokeStyle),this}texture(t,e,i,r,n,a){return this.instructions.push({action:"texture",data:{image:t,dx:i||0,dy:r||0,dw:n||t.frame.width,dh:a||t.frame.height,transform:this._transform.clone(),alpha:this._fillStyle.alpha,style:e?s.Q.shared.setValue(e).toNumber():16777215}}),this.onUpdate(),this}beginPath(){return this._activePath=new z,this}fill(e,i){let r;const s=this.instructions[this.instructions.length-1];return r=0===this._tick&&s&&"stroke"===s.action?s.data.path:this._activePath.clone(),r?(null!=e&&(void 0!==i&&"number"==typeof e&&((0,l.t6)(l.lj,"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead"),e={color:e,alpha:i}),this._fillStyle=(0,L.w)(e,t.defaultFillStyle)),this.instructions.push({action:"fill",data:{style:this.fillStyle,path:r}}),this.onUpdate(),this._initNextPathLocation(),this._tick=0,this):this}_initNextPathLocation(){const{x:t,y:e}=this._activePath.getLastPoint(a.b.shared);this._activePath.clear(),this._activePath.moveTo(t,e)}stroke(e){let i;const r=this.instructions[this.instructions.length-1];return i=0===this._tick&&r&&"fill"===r.action?r.data.path:this._activePath.clone(),i?(null!=e&&(this._strokeStyle=(0,L.T)(e,t.defaultStrokeStyle)),this.instructions.push({action:"stroke",data:{style:this.strokeStyle,path:i}}),this.onUpdate(),this._initNextPathLocation(),this._tick=0,this):this}cut(){for(let t=0;t<2;t++){const e=this.instructions[this.instructions.length-1-t],i=this._activePath.clone();if(e&&("stroke"===e.action||"fill"===e.action)){if(!e.data.hole){e.data.hole=i;break}e.data.hole.addPath(i)}}return this._initNextPathLocation(),this}arc(t,e,i,r,s,n){this._tick++;const a=this._transform;return this._activePath.arc(a.a*t+a.c*e+a.tx,a.b*t+a.d*e+a.ty,i,r,s,n),this}arcTo(t,e,i,r,s){this._tick++;const n=this._transform;return this._activePath.arcTo(n.a*t+n.c*e+n.tx,n.b*t+n.d*e+n.ty,n.a*i+n.c*r+n.tx,n.b*i+n.d*r+n.ty,s),this}arcToSvg(t,e,i,r,s,n,a){this._tick++;const o=this._transform;return this._activePath.arcToSvg(t,e,i,r,s,o.a*n+o.c*a+o.tx,o.b*n+o.d*a+o.ty),this}bezierCurveTo(t,e,i,r,s,n,a){this._tick++;const o=this._transform;return this._activePath.bezierCurveTo(o.a*t+o.c*e+o.tx,o.b*t+o.d*e+o.ty,o.a*i+o.c*r+o.tx,o.b*i+o.d*r+o.ty,o.a*s+o.c*n+o.tx,o.b*s+o.d*n+o.ty,a),this}closePath(){return this._tick++,this._activePath?.closePath(),this}ellipse(t,e,i,r){return this._tick++,this._activePath.ellipse(t,e,i,r,this._transform.clone()),this}circle(t,e,i){return this._tick++,this._activePath.circle(t,e,i,this._transform.clone()),this}path(t){return this._tick++,this._activePath.addPath(t,this._transform.clone()),this}lineTo(t,e){this._tick++;const i=this._transform;return this._activePath.lineTo(i.a*t+i.c*e+i.tx,i.b*t+i.d*e+i.ty),this}moveTo(t,e){this._tick++;const i=this._transform,r=this._activePath.instructions,s=i.a*t+i.c*e+i.tx,n=i.b*t+i.d*e+i.ty;return 1===r.length&&"moveTo"===r[0].action?(r[0].data[0]=s,r[0].data[1]=n,this):(this._activePath.moveTo(s,n),this)}quadraticCurveTo(t,e,i,r,s){this._tick++;const n=this._transform;return this._activePath.quadraticCurveTo(n.a*t+n.c*e+n.tx,n.b*t+n.d*e+n.ty,n.a*i+n.c*r+n.tx,n.b*i+n.d*r+n.ty,s),this}rect(t,e,i,r){return this._tick++,this._activePath.rect(t,e,i,r,this._transform.clone()),this}roundRect(t,e,i,r,s){return this._tick++,this._activePath.roundRect(t,e,i,r,s,this._transform.clone()),this}poly(t,e){return this._tick++,this._activePath.poly(t,e,this._transform.clone()),this}regularPoly(t,e,i,r,s=0,n){return this._tick++,this._activePath.regularPoly(t,e,i,r,s,n),this}roundPoly(t,e,i,r,s,n){return this._tick++,this._activePath.roundPoly(t,e,i,r,s,n),this}roundShape(t,e,i,r){return this._tick++,this._activePath.roundShape(t,e,i,r),this}filletRect(t,e,i,r,s){return this._tick++,this._activePath.filletRect(t,e,i,r,s),this}chamferRect(t,e,i,r,s,n){return this._tick++,this._activePath.chamferRect(t,e,i,r,s,n),this}star(t,e,i,r,s=0,n=0){return this._tick++,this._activePath.star(t,e,i,r,s,n,this._transform.clone()),this}svg(t){return this._tick++,H(t,this),this}restore(){const t=this._stateStack.pop();return t&&(this._transform=t.transform,this._fillStyle=t.fillStyle,this._strokeStyle=t.strokeStyle),this}save(){return this._stateStack.push({transform:this._transform.clone(),fillStyle:{...this._fillStyle},strokeStyle:{...this._strokeStyle}}),this}getTransform(){return this._transform}resetTransform(){return this._transform.identity(),this}rotate(t){return this._transform.rotate(t),this}scale(t,e=t){return this._transform.scale(t,e),this}setTransform(t,e,i,r,s,a){return t instanceof n.u?(this._transform.set(t.a,t.b,t.c,t.d,t.tx,t.ty),this):(this._transform.set(t,e,i,r,s,a),this)}transform(t,e,i,r,s,a){return t instanceof n.u?(this._transform.append(t),this):(D.set(t,e,i,r,s,a),this._transform.append(D),this)}translate(t,e=t){return this._transform.translate(t,e),this}clear(){return this._activePath.clear(),this.instructions.length=0,this.resetTransform(),this.onUpdate(),this}onUpdate(){this.dirty||(this.emit("update",this,16),this.dirty=!0,this._boundsDirty=!0)}get bounds(){if(!this._boundsDirty)return this._bounds;const t=this._bounds;t.clear();for(let e=0;e<this.instructions.length;e++){const i=this.instructions[e],r=i.action;if("fill"===r){const e=i.data;t.addBounds(e.path.bounds)}else if("texture"===r){const e=i.data;t.addFrame(e.dx,e.dy,e.dx+e.dw,e.dy+e.dh,e.transform)}if("stroke"===r){const e=i.data,r=e.style.alignment,s=e.style.width*(1-r),n=e.path.bounds;t.addFrame(n.minX-s,n.minY-s,n.maxX+s,n.maxY+s)}}return t}containsPoint(t){if(!this.bounds.containsPoint(t.x,t.y))return!1;const e=this.instructions;let i=!1;for(let r=0;r<e.length;r++){const s=e[r],n=s.data,a=n.path;if(!s.action||!a)continue;const o=n.style,h=a.shapePath.shapePrimitives;for(let e=0;e<h.length;e++){const r=h[e].shape;if(!o||!r)continue;const a=h[e].transform,l=a?a.applyInverse(t,I):t;if("fill"===s.action)i=r.contains(l.x,l.y);else{const t=o;i=r.strokeContains(l.x,l.y,t.width,t.alignment)}const c=n.hole;if(c){const t=c.shapePath?.shapePrimitives;if(t)for(let e=0;e<t.length;e++)t[e].shape.contains(l.x,l.y)&&(i=!1)}if(i)return!0}}return i}destroy(t=!1){if(this._stateStack.length=0,this._transform=null,this.emit("destroy",this),this.removeAllListeners(),"boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._fillStyle.texture&&this._fillStyle.texture.destroy(e),this._strokeStyle.texture&&this._strokeStyle.texture.destroy(e)}this._fillStyle=null,this._strokeStyle=null,this.instructions=null,this._activePath=null,this._bounds=null,this._stateStack=null,this.customShader=null,this._transform=null}};V.defaultFillStyle={color:16777215,alpha:1,texture:o.g.WHITE,matrix:null,fill:null},V.defaultStrokeStyle={width:1,color:16777215,alpha:1,alignment:.5,miterLimit:10,cap:"butt",join:"miter",texture:o.g.WHITE,matrix:null,fill:null,pixelLine:!1};let E=V},3302:(t,e,i)=>{"use strict";i.d(e,{GH:()=>U});var r=i(8507),s=i(341),n=i(1159),a=i(848),o=i(4670),h=i(8218),l=i(9252);function c(t,e,i,r,s){const n=e.a,a=e.b,o=e.c,h=e.d,l=e.tx,c=e.ty;i||(i=0),r||(r=2),s||(s=t.length/r-i);let u=i*r;for(let e=0;e<s;e++){const e=t[u],i=t[u+1];t[u]=n*e+o*i+l,t[u+1]=a*e+h*i+c,u+=r}}var u=i(4492),d=i(6954);const p={extension:{type:r.Ag.ShapeBuilder,name:"circle"},build(t,e){let i,r,s,n,a,o;if("circle"===t.type){const e=t;i=e.x,r=e.y,a=o=e.radius,s=n=0}else if("ellipse"===t.type){const e=t;i=e.x,r=e.y,a=e.halfWidth,o=e.halfHeight,s=n=0}else{const e=t,h=e.width/2,l=e.height/2;i=e.x+h,r=e.y+l,a=o=Math.max(0,Math.min(e.radius,Math.min(h,l))),s=h-a,n=l-o}if(!(a>=0&&o>=0&&s>=0&&n>=0))return e;const h=Math.ceil(2.3*Math.sqrt(a+o)),l=8*h+(s?4:0)+(n?4:0);if(0===l)return e;if(0===h)return e[0]=e[6]=i+s,e[1]=e[3]=r+n,e[2]=e[4]=i-s,e[5]=e[7]=r-n,e;let c=0,u=4*h+(s?2:0)+2,d=u,p=l,f=s+a,g=n,x=i+f,m=i-f,_=r+g;if(e[c++]=x,e[c++]=_,e[--u]=_,e[--u]=m,n){const t=r-g;e[d++]=m,e[d++]=t,e[--p]=t,e[--p]=x}for(let t=1;t<h;t++){const l=Math.PI/2*(t/h),f=s+Math.cos(l)*a,g=n+Math.sin(l)*o,x=i+f,m=i-f,_=r+g,y=r-g;e[c++]=x,e[c++]=_,e[--u]=_,e[--u]=m,e[d++]=m,e[d++]=y,e[--p]=y,e[--p]=x}f=s,g=n+o,x=i+f,m=i-f,_=r+g;const y=r-g;return e[c++]=x,e[c++]=_,e[--p]=y,e[--p]=x,s&&(e[c++]=m,e[c++]=_,e[--p]=y,e[--p]=m),e},triangulate(t,e,i,r,s,n){if(0===t.length)return;let a=0,o=0;for(let e=0;e<t.length;e+=2)a+=t[e],o+=t[e+1];a/=t.length/2,o/=t.length/2;let h=r;e[h*i]=a,e[h*i+1]=o;const l=h++;for(let r=0;r<t.length;r+=2)e[h*i]=t[r],e[h*i+1]=t[r+1],r>0&&(s[n++]=h,s[n++]=l,s[n++]=h-1),h++;s[n++]=l+1,s[n++]=l,s[n++]=h-1}},f={...p,extension:{...p.extension,name:"ellipse"}},g={...p,extension:{...p.extension,name:"roundedRectangle"}};var x=i(5101);const m=1e-4;function _(t,e,i,r,s,n,a,o){let h,l;a?(h=r,l=-i):(h=-r,l=i);const c=t-i*s+h,u=e-r*s+l,d=t+i*n+h,p=e+r*n+l;return o.push(c,u),o.push(d,p),2}function y(t,e,i,r,s,n,a,o){const h=i-t,l=r-e;let c=Math.atan2(h,l),u=Math.atan2(s-t,n-e);o&&c<u?c+=2*Math.PI:!o&&c>u&&(u+=2*Math.PI);let d=c;const p=u-c,f=Math.abs(p),g=Math.sqrt(h*h+l*l),x=1+(15*f*Math.sqrt(g)/Math.PI|0),m=p/x;if(d+=m,o){a.push(t,e),a.push(i,r);for(let i=1,r=d;i<x;i++,r+=m)a.push(t,e),a.push(t+Math.sin(r)*g,e+Math.cos(r)*g);a.push(t,e),a.push(s,n)}else{a.push(i,r),a.push(t,e);for(let i=1,r=d;i<x;i++,r+=m)a.push(t+Math.sin(r)*g,e+Math.cos(r)*g),a.push(t,e);a.push(s,n),a.push(t,e)}return 2*x}var b=i(6570);function S(t,e,i,r,s,n,a){const o=b(t,e,2);if(!o)return;for(let t=0;t<o.length;t+=3)n[a++]=o[t]+s,n[a++]=o[t+1]+s,n[a++]=o[t+2]+s;let h=s*r;for(let e=0;e<t.length;e+=2)i[h]=t[e],i[h+1]=t[e+1],h+=r}const v=[],w={extension:{type:r.Ag.ShapeBuilder,name:"polygon"},build(t,e){for(let i=0;i<t.points.length;i++)e[i]=t.points[i];return e},triangulate(t,e,i,r,s,n){S(t,v,e,i,r,s,n)}},T={extension:{type:r.Ag.ShapeBuilder,name:"rectangle"},build(t,e){const i=t,r=i.x,s=i.y,n=i.width,a=i.height;return n>=0&&a>=0?(e[0]=r,e[1]=s,e[2]=r+n,e[3]=s,e[4]=r+n,e[5]=s+a,e[6]=r,e[7]=s+a,e):e},triangulate(t,e,i,r,s,n){let a=0;e[(r*=i)+a]=t[0],e[r+a+1]=t[1],a+=i,e[r+a]=t[2],e[r+a+1]=t[3],a+=i,e[r+a]=t[6],e[r+a+1]=t[7],a+=i,e[r+a]=t[4],e[r+a+1]=t[5],a+=i;const o=r/i;s[n++]=o,s[n++]=o+1,s[n++]=o+2,s[n++]=o+1,s[n++]=o+3,s[n++]=o+2}},M={extension:{type:r.Ag.ShapeBuilder,name:"triangle"},build:(t,e)=>(e[0]=t.x,e[1]=t.y,e[2]=t.x2,e[3]=t.y2,e[4]=t.x3,e[5]=t.y3,e),triangulate(t,e,i,r,s,n){let a=0;e[(r*=i)+a]=t[0],e[r+a+1]=t[1],a+=i,e[r+a]=t[2],e[r+a+1]=t[3],a+=i,e[r+a]=t[4],e[r+a+1]=t[5];const o=r/i;s[n++]=o,s[n++]=o+1,s[n++]=o+2}},C={};r.XO.handleByMap(r.Ag.ShapeBuilder,C),r.XO.add(T,w,M,p,f,g);const P=new l.M;function k(t,e,i){const{vertices:r,uvs:s,indices:n}=i,a=n.length,o=r.length/2,l=[],u=C.rectangle,p=P,f=t.image;p.x=t.dx,p.y=t.dy,p.width=t.dw,p.height=t.dh;const g=t.transform;u.build(p,l),g&&c(l,g),u.triangulate(l,r,2,o,n,a);const x=f.uvs;s.push(x.x0,x.y0,x.x1,x.y1,x.x3,x.y3,x.x2,x.y2);const m=h.Z.get(d.G);m.indexOffset=a,m.indexSize=n.length-a,m.attributeOffset=o,m.attributeSize=r.length/2-o,m.baseColor=t.style,m.alpha=t.alpha,m.texture=f,m.geometryData=i,e.push(m)}function B(t,e,i,r,s,n){const{vertices:a,uvs:o,indices:l}=n,p=t.shapePrimitives.length-1;t.shapePrimitives.forEach((({shape:t,transform:f},g)=>{const b=l.length,v=a.length/2,w=[],T=C[t.type];let M="triangle-list";if(T.build(t,w),f&&c(w,f),r){const i=t.closePath??!0,r=e;r.pixelLine?(function(t,e,i,r){const s=m;if(0===t.length)return;const n=t[0],a=t[1],o=t[t.length-2],h=t[t.length-1],l=e||Math.abs(n-o)<s&&Math.abs(a-h)<s,c=i,u=t.length/2,d=c.length/2;for(let e=0;e<u;e++)c.push(t[2*e]),c.push(t[2*e+1]);for(let t=0;t<u-1;t++)r.push(d+t,d+t+1);l&&r.push(d+u-1,d)}(w,i,a,l),M="line-list"):function(t,e,i,r,s,n){const a=m;if(0===t.length)return;const o=e;let h=o.alignment;if(.5!==e.alignment){let e=function(t){const e=t.length;if(e<6)return 1;let i=0;for(let r=0,s=t[e-2],n=t[e-1];r<e;r+=2){const e=t[r],a=t[r+1];i+=(e-s)*(a+n),s=e,n=a}return i<0?-1:1}(t);h=(h-.5)*e+.5}const l=new x.b(t[0],t[1]),c=new x.b(t[t.length-2],t[t.length-1]),u=r,d=Math.abs(l.x-c.x)<a&&Math.abs(l.y-c.y)<a;if(u){t=t.slice(),d&&(t.pop(),t.pop(),c.set(t[t.length-2],t[t.length-1]));const e=.5*(l.x+c.x),i=.5*(c.y+l.y);t.unshift(e,i),t.push(e,i)}const p=s,f=t.length/2;let g=t.length;const b=p.length/2,S=o.width/2,v=S*S,w=o.miterLimit*o.miterLimit;let T=t[0],M=t[1],C=t[2],P=t[3],k=0,B=0,R=-(M-P),A=T-C,F=0,U=0,z=Math.sqrt(R*R+A*A);R/=z,A/=z,R*=S,A*=S;const W=2*(1-h),H=2*h;u||("round"===o.cap?g+=y(T-R*(W-H)*.5,M-A*(W-H)*.5,T-R*W,M-A*W,T+R*H,M+A*H,p,!0)+2:"square"===o.cap&&(g+=_(T,M,R,A,W,H,!0,p))),p.push(T-R*W,M-A*W),p.push(T+R*H,M+A*H);for(let e=1;e<f-1;++e){T=t[2*(e-1)],M=t[2*(e-1)+1],C=t[2*e],P=t[2*e+1],k=t[2*(e+1)],B=t[2*(e+1)+1],R=-(M-P),A=T-C,z=Math.sqrt(R*R+A*A),R/=z,A/=z,R*=S,A*=S,F=-(P-B),U=C-k,z=Math.sqrt(F*F+U*U),F/=z,U/=z,F*=S,U*=S;const i=C-T,r=M-P,s=C-k,n=B-P,a=i*s+r*n,h=r*s-n*i,l=h<0;if(Math.abs(h)<.001*Math.abs(a)){p.push(C-R*W,P-A*W),p.push(C+R*H,P+A*H),a>=0&&("round"===o.join?g+=y(C,P,C-R*W,P-A*W,C-F*W,P-U*W,p,!1)+4:g+=2,p.push(C-F*H,P-U*H),p.push(C+F*W,P+U*W));continue}const c=(-R+T)*(-A+P)-(-R+C)*(-A+M),u=(-F+k)*(-U+P)-(-F+C)*(-U+B),d=(i*u-s*c)/h,f=(n*c-r*u)/h,x=(d-C)*(d-C)+(f-P)*(f-P),m=C+(d-C)*W,_=P+(f-P)*W,b=C-(d-C)*H,G=P-(f-P)*H,O=l?W:H;x<=Math.min(i*i+r*r,s*s+n*n)+O*O*v?"bevel"===o.join||x/v>w?(l?(p.push(m,_),p.push(C+R*H,P+A*H),p.push(m,_),p.push(C+F*H,P+U*H)):(p.push(C-R*W,P-A*W),p.push(b,G),p.push(C-F*W,P-U*W),p.push(b,G)),g+=2):"round"===o.join?l?(p.push(m,_),p.push(C+R*H,P+A*H),g+=y(C,P,C+R*H,P+A*H,C+F*H,P+U*H,p,!0)+4,p.push(m,_),p.push(C+F*H,P+U*H)):(p.push(C-R*W,P-A*W),p.push(b,G),g+=y(C,P,C-R*W,P-A*W,C-F*W,P-U*W,p,!1)+4,p.push(C-F*W,P-U*W),p.push(b,G)):(p.push(m,_),p.push(b,G)):(p.push(C-R*W,P-A*W),p.push(C+R*H,P+A*H),"round"===o.join?g+=l?y(C,P,C+R*H,P+A*H,C+F*H,P+U*H,p,!0)+2:y(C,P,C-R*W,P-A*W,C-F*W,P-U*W,p,!1)+2:"miter"===o.join&&x/v<=w&&(l?(p.push(b,G),p.push(b,G)):(p.push(m,_),p.push(m,_)),g+=2),p.push(C-F*W,P-U*W),p.push(C+F*H,P+U*H),g+=2)}T=t[2*(f-2)],M=t[2*(f-2)+1],C=t[2*(f-1)],P=t[2*(f-1)+1],R=-(M-P),A=T-C,z=Math.sqrt(R*R+A*A),R/=z,A/=z,R*=S,A*=S,p.push(C-R*W,P-A*W),p.push(C+R*H,P+A*H),u||("round"===o.cap?g+=y(C-R*(W-H)*.5,P-A*(W-H)*.5,C-R*W,P-A*W,C+R*H,P+A*H,p,!1)+2:"square"===o.cap&&(g+=_(C,P,R,A,W,H,!1,p)));for(let t=b;t<g+b-2;++t)T=p[2*t],M=p[2*t+1],C=p[2*(t+1)],P=p[2*(t+1)+1],k=p[2*(t+2)],B=p[2*(t+2)+1],Math.abs(T*(P-B)+C*(B-M)+k*(M-P))<1e-8||n.push(t,t+1,t+2)}(w,r,0,i,a,l)}else if(i&&p===g){0!==p&&console.warn("[Pixi Graphics] only the last shape have be cut out");const t=[],e=w.slice(),r=function(t){if(!t)return[];const e=t.shapePrimitives,i=[];for(let t=0;t<e.length;t++){const r=e[t].shape,s=[];C[r.type].build(r,s),i.push(s)}return i}(i.shapePath);r.forEach((i=>{t.push(e.length/2),e.push(...i)})),S(e,t,a,2,v,l,b)}else T.triangulate(w,a,2,v,l,b);const P=o.length/2,k=e.texture;if(k!==u.g.WHITE){const t=e.matrix;t&&(f&&t.append(f.clone().invert()),function(t,e,i,r,s,n,a,o=null){let h=0;i*=e,s*=n;const l=o.a,c=o.b,u=o.c,d=o.d,p=o.tx,f=o.ty;for(;h<a;){const a=t[i],o=t[i+1];r[s]=l*a+u*o+p,r[s+1]=c*a+d*o+f,s+=n,i+=e,h++}}(a,2,v,o,P,2,a.length/2-v,t))}else!function(t,e,i,r){let s=0;for(e*=2;s<r;)t[e]=0,t[e+1]=0,e+=2,s++}(o,P,0,a.length/2-v);const B=h.Z.get(d.G);B.indexOffset=b,B.indexSize=l.length-b,B.attributeOffset=v,B.attributeSize=a.length/2-v,B.baseColor=e.color,B.alpha=e.alpha,B.texture=k,B.geometryData=n,B.topology=M,s.push(B)}))}class R{constructor(){this.batches=[],this.geometryData={vertices:[],uvs:[],indices:[]}}}class A{constructor(){this.batcher=new n.J,this.instructions=new a.L}init(){this.instructions.reset()}get geometry(){return(0,o.t6)(o.Ek,"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead."),this.batcher.geometry}}const F=class t{constructor(t){this._gpuContextHash={},this._graphicsDataContextHash=Object.create(null),t.renderableGC.addManagedHash(this,"_gpuContextHash"),t.renderableGC.addManagedHash(this,"_graphicsDataContextHash")}init(e){t.defaultOptions.bezierSmoothness=e?.bezierSmoothness??t.defaultOptions.bezierSmoothness}getContextRenderData(t){return this._graphicsDataContextHash[t.uid]||this._initContextRenderData(t)}updateGpuContext(t){let e=this._gpuContextHash[t.uid]||this._initContext(t);if(t.dirty){e?this._cleanGraphicsContextData(t):e=this._initContext(t),function(t,e){const{geometryData:i,batches:r}=e;r.length=0,i.indices.length=0,i.vertices.length=0,i.uvs.length=0;for(let e=0;e<t.instructions.length;e++){const s=t.instructions[e];if("texture"===s.action)k(s.data,r,i);else if("fill"===s.action||"stroke"===s.action){const t="stroke"===s.action,e=s.data.path.shapePath,n=s.data.style,a=s.data.hole;t&&a&&B(a.shapePath,n,null,!0,r,i),B(e,n,a,t,r,i)}}}(t,e);const i=t.batchMode;t.customShader||"no-batch"===i?e.isBatchable=!1:"auto"===i&&(e.isBatchable=e.geometryData.vertices.length<400),t.dirty=!1}return e}getGpuContext(t){return this._gpuContextHash[t.uid]||this._initContext(t)}_initContextRenderData(t){const e=h.Z.get(A),{batches:i,geometryData:r}=this._gpuContextHash[t.uid],n=r.vertices.length,a=r.indices.length;for(let t=0;t<i.length;t++)i[t].applyTransform=!1;const o=e.batcher;o.ensureAttributeBuffer(n),o.ensureIndexBuffer(a),o.begin();for(let t=0;t<i.length;t++){const e=i[t];o.add(e)}o.finish(e.instructions);const l=o.geometry;l.indexBuffer.setDataWithSize(o.indexBuffer,o.indexSize,!0),l.buffers[0].setDataWithSize(o.attributeBuffer.float32View,o.attributeSize,!0);const c=o.batches;for(let t=0;t<c.length;t++){const e=c[t];e.bindGroup=(0,s.w)(e.textures.textures,e.textures.count)}return this._graphicsDataContextHash[t.uid]=e,e}_initContext(t){const e=new R;return e.context=t,this._gpuContextHash[t.uid]=e,t.on("destroy",this.onGraphicsContextDestroy,this),this._gpuContextHash[t.uid]}onGraphicsContextDestroy(t){this._cleanGraphicsContextData(t),t.off("destroy",this.onGraphicsContextDestroy,this),this._gpuContextHash[t.uid]=null}_cleanGraphicsContextData(t){const e=this._gpuContextHash[t.uid];e.isBatchable||this._graphicsDataContextHash[t.uid]&&(h.Z.return(this.getContextRenderData(t)),this._graphicsDataContextHash[t.uid]=null),e.batches&&e.batches.forEach((t=>{h.Z.return(t)}))}destroy(){for(const t in this._gpuContextHash)this._gpuContextHash[t]&&this.onGraphicsContextDestroy(this._gpuContextHash[t].context)}};F.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem,r.Ag.CanvasSystem],name:"graphicsContext"},F.defaultOptions={bezierSmoothness:.5};let U=F},7276:(t,e,i)=>{"use strict";i.d(e,{_:()=>c});var r=i(2577),s=i(1761),n=i(9313),a=i(8293),o=i(4492),h=i(133);const l=class t{constructor(t,e,i,r){this.uid=(0,h.L)("fillGradient"),this.type="linear",this.gradientStops=[],this._styleKey=null,this.x0=t,this.y0=e,this.x1=i,this.y1=r}addColorStop(t,e){return this.gradientStops.push({offset:t,color:r.Q.shared.setValue(e).toHexa()}),this._styleKey=null,this}buildLinearGradient(){if(this.texture)return;const e=t.defaultTextureSize,{gradientStops:i}=this,r=s.e.get().createCanvas();r.width=e,r.height=e;const h=r.getContext("2d"),l=h.createLinearGradient(0,0,t.defaultTextureSize,1);for(let t=0;t<i.length;t++){const e=i[t];l.addColorStop(e.offset,e.color)}h.fillStyle=l,h.fillRect(0,0,e,e),this.texture=new o.g({source:new a.b({resource:r,addressModeU:"clamp-to-edge",addressModeV:"repeat"})});const{x0:c,y0:u,x1:d,y1:p}=this,f=new n.u,g=d-c,x=p-u,m=Math.sqrt(g*g+x*x),_=Math.atan2(x,g);f.translate(-c,-u),f.scale(1/e,1/e),f.rotate(-_),f.scale(256/m,1),this.transform=f,this._styleKey=null}get styleKey(){if(this._styleKey)return this._styleKey;const t=this.gradientStops.map((t=>`${t.offset}-${t.color}`)).join("-"),e=this.texture.uid,i=this.transform.toArray().join("-");return`fill-gradient-${this.uid}-${t}-${e}-${i}-${this.x0}-${this.y0}-${this.x1}-${this.y1}`}};l.defaultTextureSize=256;let c=l},2806:(t,e,i)=>{"use strict";i.d(e,{m:()=>a});var r=i(9313),s=i(133);const n={repeat:{addressModeU:"repeat",addressModeV:"repeat"},"repeat-x":{addressModeU:"repeat",addressModeV:"clamp-to-edge"},"repeat-y":{addressModeU:"clamp-to-edge",addressModeV:"repeat"},"no-repeat":{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"}};class a{constructor(t,e){this.uid=(0,s.L)("fillPattern"),this.transform=new r.u,this._styleKey=null,this.texture=t,this.transform.scale(1/t.frame.width,1/t.frame.height),e&&(t.source.style.addressModeU=n[e].addressModeU,t.source.style.addressModeV=n[e].addressModeV)}setTransform(t){const e=this.texture;this.transform.copyFrom(t),this.transform.invert(),this.transform.scale(1/e.frame.width,1/e.frame.height),this._styleKey=null}get styleKey(){return this._styleKey||(this._styleKey=`fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join("-")}`),this._styleKey}}},990:(t,e,i)=>{"use strict";i.d(e,{T:()=>p,w:()=>d});var r=i(2577),s=i(9313),n=i(4492),a=i(7276),o=i(2806);function h(t){return t instanceof o.m}function l(t){return t instanceof a._}function c(t,e,i){return t.fill=e,t.color=16777215,t.texture=e.texture,t.matrix=e.transform,{...i,...t}}function u(t,e,i){return e.buildLinearGradient(),t.fill=e,t.color=16777215,t.texture=e.texture,t.matrix=e.transform,{...i,...t}}function d(t,e){if(null==t)return null;const i={},a=t;return function(t){return r.Q.isColorLike(t)}(t)?function(t,e,i){const s=r.Q.shared.setValue(e??0);return t.color=s.toNumber(),t.alpha=1===s.alpha?i.alpha:s.alpha,t.texture=n.g.WHITE,{...i,...t}}(i,t,e):h(t)?c(i,t,e):l(t)?u(i,t,e):a.fill&&h(a.fill)?c(a,a.fill,e):a.fill&&l(a.fill)?u(a,a.fill,e):function(t,e){const i={...e,...t};if(i.texture){if(i.texture!==n.g.WHITE){const t=i.matrix?.clone().invert()||new s.u;t.translate(i.texture.frame.x,i.texture.frame.y),t.scale(1/i.texture.source.width,1/i.texture.source.height),i.matrix=t}const t=i.texture.source.style;"clamp-to-edge"===t.addressMode&&(t.addressMode="repeat",t.update())}const a=r.Q.shared.setValue(i.color);return i.alpha*=a.alpha,i.color=a.toNumber(),i.matrix=i.matrix?i.matrix.clone():null,i}(a,e)}function p(t,e){const{width:i,alignment:r,miterLimit:s,cap:n,join:a,pixelLine:o,...h}=e,l=d(t,h);return l?{width:i,alignment:r,miterLimit:s,cap:n,join:a,pixelLine:o,...l}:null}},5285:(t,e,i)=>{"use strict";var r=i(8507),s=i(9313),n=i(3513),a=i(5811),o=i(8639),h=i(8218),l=i(2760),c=i(8734);class u{constructor(t,e){this.localUniforms=new a.k({uTransformMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new n.T({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=t,this._adaptor=e,this._adaptor.init(),t.renderableGC.addManagedHash(this,"_gpuBatchableMeshHash"),t.renderableGC.addManagedHash(this,"_meshDataHash")}validateRenderable(t){const e=this._getMeshData(t),i=e.batched,r=t.batched;if(e.batched=r,i!==r)return!0;if(r){const i=t._geometry;if(i.indices.length!==e.indexSize||i.positions.length!==e.vertexSize)return e.indexSize=i.indices.length,e.vertexSize=i.positions.length,!0;const r=this._getBatchableMesh(t);return!r._batcher.checkAndUpdateTexture(r,t.texture)}return!1}addRenderable(t,e){const i=this.renderer.renderPipes.batch,{batched:r}=this._getMeshData(t);if(r){const r=this._getBatchableMesh(t);r.texture=t._texture,r.geometry=t._geometry,i.addToBatch(r,e)}else i.break(e),e.add(t)}updateRenderable(t){if(t.batched){const e=this._gpuBatchableMeshHash[t.uid];e.texture=t._texture,e.geometry=t._geometry,e._batcher.updateElement(e)}}destroyRenderable(t){this._meshDataHash[t.uid]=null;const e=this._gpuBatchableMeshHash[t.uid];e&&(h.Z.return(e),this._gpuBatchableMeshHash[t.uid]=null),t.off("destroyed",this._destroyRenderableBound)}execute(t){if(!t.isRenderable)return;t.state.blendMode=(0,o.i)(t.groupBlendMode,t.texture._source);const e=this.localUniforms;e.uniforms.uTransformMatrix=t.groupTransform,e.uniforms.uRound=this.renderer._roundPixels|t._roundPixels,e.update(),(0,l.V)(t.groupColorAlpha,e.uniforms.uColor,0),this._adaptor.execute(this,t)}_getMeshData(t){return this._meshDataHash[t.uid]||this._initMeshData(t)}_initMeshData(t){return this._meshDataHash[t.uid]={batched:t.batched,indexSize:t._geometry.indices?.length,vertexSize:t._geometry.positions?.length},t.on("destroyed",this._destroyRenderableBound),this._meshDataHash[t.uid]}_getBatchableMesh(t){return this._gpuBatchableMeshHash[t.uid]||this._initBatchableMesh(t)}_initBatchableMesh(t){const e=h.Z.get(c.U);return e.renderable=t,e.texture=t._texture,e.transform=t.groupTransform,e.roundPixels=this.renderer._roundPixels|t._roundPixels,this._gpuBatchableMeshHash[t.uid]=e,e}destroy(){for(const t in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[t]&&h.Z.return(this._gpuBatchableMeshHash[t]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}u.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"mesh"},r.XO.add(u)},8734:(t,e,i)=>{"use strict";i.d(e,{U:()=>r});class r{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(t){this._topology=t}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get uvs(){const t=this.geometry.getBuffer("aUV"),e=t.data;let i=e;const r=this.texture.textureMatrix;return r.isSimple||(i=this._transformedUvs,this._textureMatrixUpdateId===r._updateID&&this._uvUpdateId===t._updateID||((!i||i.length<e.length)&&(i=this._transformedUvs=new Float32Array(e.length)),this._textureMatrixUpdateId=r._updateID,this._uvUpdateId=t._updateID,r.multiplyUvs(e,i))),i}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},5060:(t,e,i)=>{"use strict";i.d(e,{u:()=>h});var r=i(949),s=i(1132),n=i(6011),a=i(4670);const o=class t extends n.V{constructor(...e){let i=e[0]??{};i instanceof Float32Array&&((0,a.t6)(a.lj,"use new MeshGeometry({ positions, uvs, indices }) instead"),i={positions:i,uvs:e[1],indices:e[2]}),i={...t.defaultOptions,...i};const n=i.positions||new Float32Array([0,0,1,0,1,1,0,1]),o=i.uvs||new Float32Array([0,0,1,0,1,1,0,1]),h=i.indices||new Uint32Array([0,1,2,0,2,3]),l=i.shrinkBuffersToFit;super({attributes:{aPosition:{buffer:new r.h({data:n,label:"attribute-mesh-positions",shrinkToFit:l,usage:s.S.VERTEX|s.S.COPY_DST}),format:"float32x2",stride:8,offset:0},aUV:{buffer:new r.h({data:o,label:"attribute-mesh-uvs",shrinkToFit:l,usage:s.S.VERTEX|s.S.COPY_DST}),format:"float32x2",stride:8,offset:0}},indexBuffer:new r.h({data:h,label:"index-mesh-buffer",shrinkToFit:l,usage:s.S.INDEX|s.S.COPY_DST}),topology:i.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(t){this.attributes.aPosition.buffer.data=t}get uvs(){return this.attributes.aUV.buffer.data}set uvs(t){this.attributes.aUV.buffer.data=t}get indices(){return this.indexBuffer.data}set indices(t){this.indexBuffer.data=t}};o.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let h=o},9305:(t,e,i)=>{"use strict";var r=i(8507);class s{execute(t,e){const i=t.state,r=t.renderer,s=e.shader||t.defaultShader;s.resources.uTexture=e.texture._source,s.resources.uniforms=t.localUniforms;const n=r.gl,a=t.getBuffers(e);r.shader.bind(s),r.state.set(i),r.geometry.bind(a.geometry,s.glProgram);const o=2===a.geometry.indexBuffer.data.BYTES_PER_ELEMENT?n.UNSIGNED_SHORT:n.UNSIGNED_INT;n.drawElements(n.TRIANGLES,6*e.particleChildren.length,o,0)}}var n=i(9313),a=i(5811),o=i(8639),h=i(7547),l=i(2760),c=i(949),u=i(1132),d=i(6011),p=i(8306),f=i(1460);function g(t,e=null){const i=6*t;if(i>65535?e||(e=new Uint32Array(i)):e||(e=new Uint16Array(i)),e.length!==i)throw new Error(`Out buffer length is incorrect, got ${e.length} and expected ${i}`);for(let t=0,r=0;t<i;t+=6,r+=4)e[t+0]=r+0,e[t+1]=r+1,e[t+2]=r+2,e[t+3]=r+0,e[t+4]=r+2,e[t+5]=r+3;return e}function x(t,e){const i=[];i.push("\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            ");let r=0;for(const s in t){const n=t[s];e===n.dynamic&&(i.push(`offset = index + ${r}`),i.push(n.code),r+=(0,p.m)(n.format).stride/4)}i.push("\n            index += stride * 4;\n        }\n    "),i.unshift(`\n        var stride = ${r};\n    `);const s=i.join("\n");return new Function("ps","f32v","u32v",s)}class m{constructor(t){this._size=0,this._generateParticleUpdateCache={};const e=this._size=t.size??1e3,i=t.properties;let r=0,s=0;for(const t in i){const e=i[t],n=(0,p.m)(e.format);e.dynamic?s+=n.stride:r+=n.stride}this._dynamicStride=s/4,this._staticStride=r/4,this.staticAttributeBuffer=new f.u(4*e*r),this.dynamicAttributeBuffer=new f.u(4*e*s),this.indexBuffer=g(e);const n=new d.V;let a=0,o=0;this._staticBuffer=new c.h({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST}),this._dynamicBuffer=new c.h({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST});for(const t in i){const e=i[t],r=(0,p.m)(e.format);e.dynamic?(n.addAttribute(e.attributeName,{buffer:this._dynamicBuffer,stride:4*this._dynamicStride,offset:4*a,format:e.format}),a+=r.size):(n.addAttribute(e.attributeName,{buffer:this._staticBuffer,stride:4*this._staticStride,offset:4*o,format:e.format}),o+=r.size)}n.addIndex(this.indexBuffer);const h=this.getParticleUpdate(i);this._dynamicUpload=h.dynamicUpdate,this._staticUpload=h.staticUpdate,this.geometry=n}getParticleUpdate(t){const e=function(t){const e=[];for(const i in t){const r=t[i];e.push(i,r.code,r.dynamic?"d":"s")}return e.join("_")}(t);return this._generateParticleUpdateCache[e]||(this._generateParticleUpdateCache[e]=this.generateParticleUpdate(t)),this._generateParticleUpdateCache[e]}generateParticleUpdate(t){return function(t){return{dynamicUpdate:x(t,!0),staticUpdate:x(t,!1)}}(t)}update(t,e){t.length>this._size&&(e=!0,this._size=Math.max(t.length,1.5*this._size|0),this.staticAttributeBuffer=new f.u(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new f.u(this._size*this._dynamicStride*4*4),this.indexBuffer=g(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const i=this.dynamicAttributeBuffer;if(this._dynamicUpload(t,i.float32View,i.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,t.length*this._dynamicStride*4,!0),e){const e=this.staticAttributeBuffer;this._staticUpload(t,e.float32View,e.uint32View),this._staticBuffer.setDataWithSize(e.float32View,t.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}var _=i(2577),y=i(9113),b=i(3012),S=i(8475),v=i(4492),w=i(218),T="\nstruct ParticleUniforms {\n  uProjectionMatrix:mat3x3<f32>,\n  uColor:vec4<f32>,\n  uResolution:vec2<f32>,\n  uRoundPixels:f32,\n};\n\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\n\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\n@group(1) @binding(1) var uSampler : sampler;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n@vertex\nfn mainVertex(\n  @location(0) aVertex: vec2<f32>,\n  @location(1) aPosition: vec2<f32>,\n  @location(2) aUV: vec2<f32>,\n  @location(3) aColor: vec4<f32>,\n  @location(4) aRotation: f32,\n) -> VSOutput {\n  \n   let v = vec2(\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\n   ) + aPosition;\n\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\n\n  return VSOutput(\n   position,\n   aUV,\n   vColor,\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>,\n  @builtin(position) position: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var sample = textureSample(uTexture, uSampler, uv) * color;\n   \n    return sample;\n}";class M extends S.M{constructor(){super({glProgram:y.M.from({vertex:"attribute vec2 aVertex;\nattribute vec2 aUV;\nattribute vec4 aColor;\n\nattribute vec2 aPosition;\nattribute float aRotation;\n\nuniform mat3 uTranslationMatrix;\nuniform float uRound;\nuniform vec2 uResolution;\nuniform vec4 uColor;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n\nvec2 roundPixels(vec2 position, vec2 targetSize)\n{       \n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\nvoid main(void){\n    float cosRotation = cos(aRotation);\n    float sinRotation = sin(aRotation);\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\n\n    vec2 v = vec2(x, y);\n    v = v + aPosition;\n\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    if(uRound == 1.0)\n    {\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n    }\n\n    vUV = aUV;\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\n}\n",fragment:"varying vec2 vUV;\nvarying vec4 vColor;\n\nuniform sampler2D uTexture;\n\nvoid main(void){\n    vec4 color = texture2D(uTexture, vUV) * vColor;\n    gl_FragColor = color;\n}"}),gpuProgram:b.B.from({fragment:{source:T,entryPoint:"mainFragment"},vertex:{source:T,entryPoint:"mainVertex"}}),resources:{uTexture:v.g.WHITE.source,uSampler:new w.n({}),uniforms:{uTranslationMatrix:{value:new n.u,type:"mat3x3<f32>"},uColor:{value:new _.Q(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class C{constructor(t,e){this.state=h.U.for2d(),this._gpuBufferHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.localUniforms=new a.k({uTranslationMatrix:{value:new n.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=t,this.adaptor=e,this.defaultShader=new M,this.state=h.U.for2d()}validateRenderable(t){return!1}addRenderable(t,e){this.renderer.renderPipes.batch.break(e),e.add(t)}getBuffers(t){return this._gpuBufferHash[t.uid]||this._initBuffer(t)}_initBuffer(t){return this._gpuBufferHash[t.uid]=new m({size:t.particleChildren.length,properties:t._properties}),t.on("destroyed",this._destroyRenderableBound),this._gpuBufferHash[t.uid]}updateRenderable(t){}destroyRenderable(t){this._gpuBufferHash[t.uid].destroy(),this._gpuBufferHash[t.uid]=null,t.off("destroyed",this._destroyRenderableBound)}execute(t){const e=t.particleChildren;if(0===e.length)return;const i=this.renderer,r=this.getBuffers(t);t.texture||(t.texture=e[0].texture);const s=this.state;r.update(e,t._childrenDirty),t._childrenDirty=!1,s.blendMode=(0,o.i)(t.blendMode,t.texture._source);const n=this.localUniforms.uniforms,a=n.uTranslationMatrix;t.worldTransform.copyTo(a),a.prepend(i.globalUniforms.globalUniformData.projectionMatrix),n.uResolution=i.globalUniforms.globalUniformData.resolution,n.uRound=i._roundPixels|t._roundPixels,(0,l.V)(t.groupColorAlpha,n.uColor,0),this.adaptor.execute(this,t)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class P extends C{constructor(t){super(t,new s)}}P.extension={type:[r.Ag.WebGLPipes],name:"particle"};class k{execute(t,e){const i=t.renderer,r=e.shader||t.defaultShader;r.groups[0]=i.renderPipes.uniformBatch.getUniformBindGroup(t.localUniforms,!0),r.groups[1]=i.texture.getTextureBindGroup(e.texture);const s=t.state,n=t.getBuffers(e);i.encoder.draw({geometry:n.geometry,shader:e.shader||t.defaultShader,state:s,size:6*e.particleChildren.length})}}class B extends C{constructor(t){super(t,new k)}}B.extension={type:[r.Ag.WebGPUPipes],name:"particle"},r.XO.add(P),r.XO.add(B)},7252:(t,e,i)=>{"use strict";var r=i(8507),s=i(8218),n=i(8734),a=i(4670),o=i(5060);const h=class t extends o.u{constructor(...t){super({});let e=t[0]??{};"number"==typeof e&&((0,a.t6)(a.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),e={width:e,height:t[1],verticesX:t[2],verticesY:t[3]}),this.build(e)}build(e){e={...t.defaultOptions,...e},this.verticesX=this.verticesX??e.verticesX,this.verticesY=this.verticesY??e.verticesY,this.width=this.width??e.width,this.height=this.height??e.height;const i=this.verticesX*this.verticesY,r=[],s=[],n=[],a=this.verticesX-1,o=this.verticesY-1,h=this.width/a,l=this.height/o;for(let t=0;t<i;t++){const e=t%this.verticesX,i=t/this.verticesX|0;r.push(e*h,i*l),s.push(e/a,i/o)}const c=a*o;for(let t=0;t<c;t++){const e=t%a,i=t/a|0,r=i*this.verticesX+e,s=i*this.verticesX+e+1,o=(i+1)*this.verticesX+e,h=(i+1)*this.verticesX+e+1;n.push(r,s,o,s,h,o)}this.buffers[0].data=new Float32Array(r),this.buffers[1].data=new Float32Array(s),this.indexBuffer.data=new Uint32Array(n),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};h.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let l=h;const c=class t extends l{constructor(e={}){super({width:(e={...t.defaultOptions,...e}).width,height:e.height,verticesX:4,verticesY:4}),this.update(e)}update(t){this.width=t.width??this.width,this.height=t.height??this.height,this._originalWidth=t.originalWidth??this._originalWidth,this._originalHeight=t.originalHeight??this._originalHeight,this._leftWidth=t.leftWidth??this._leftWidth,this._rightWidth=t.rightWidth??this._rightWidth,this._topHeight=t.topHeight??this._topHeight,this._bottomHeight=t.bottomHeight??this._bottomHeight,this.updateUvs(),this.updatePositions()}updatePositions(){const t=this.positions,e=this._leftWidth+this._rightWidth,i=this.width>e?1:this.width/e,r=this._topHeight+this._bottomHeight,s=this.height>r?1:this.height/r,n=Math.min(i,s);t[9]=t[11]=t[13]=t[15]=this._topHeight*n,t[17]=t[19]=t[21]=t[23]=this.height-this._bottomHeight*n,t[25]=t[27]=t[29]=t[31]=this.height,t[2]=t[10]=t[18]=t[26]=this._leftWidth*n,t[4]=t[12]=t[20]=t[28]=this.width-this._rightWidth*n,t[6]=t[14]=t[22]=t[30]=this.width,this.getBuffer("aPosition").update()}updateUvs(){const t=this.uvs;t[0]=t[8]=t[16]=t[24]=0,t[1]=t[3]=t[5]=t[7]=0,t[6]=t[14]=t[22]=t[30]=1,t[25]=t[27]=t[29]=t[31]=1;const e=1/this._originalWidth,i=1/this._originalHeight;t[2]=t[10]=t[18]=t[26]=e*this._leftWidth,t[9]=t[11]=t[13]=t[15]=i*this._topHeight,t[4]=t[12]=t[20]=t[28]=1-e*this._rightWidth,t[17]=t[19]=t[21]=t[23]=1-i*this._bottomHeight,this.getBuffer("aUV").update()}};c.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let u=c;class d{constructor(t){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=t,this._renderer.renderableGC.addManagedHash(this,"_gpuSpriteHash")}addRenderable(t,e){const i=this._getGpuSprite(t);t.didViewUpdate&&this._updateBatchableSprite(t,i),this._renderer.renderPipes.batch.addToBatch(i,e)}updateRenderable(t){const e=this._gpuSpriteHash[t.uid];t.didViewUpdate&&this._updateBatchableSprite(t,e),e._batcher.updateElement(e)}validateRenderable(t){const e=this._getGpuSprite(t);return!e._batcher.checkAndUpdateTexture(e,t._texture)}destroyRenderable(t){const e=this._gpuSpriteHash[t.uid];s.Z.return(e.geometry),s.Z.return(e),this._gpuSpriteHash[t.uid]=null,t.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(t,e){e.geometry.update(t),e.texture=t._texture}_getGpuSprite(t){return this._gpuSpriteHash[t.uid]||this._initGPUSprite(t)}_initGPUSprite(t){const e=s.Z.get(n.U);return e.geometry=s.Z.get(u),e.renderable=t,e.transform=t.groupTransform,e.texture=t._texture,e.roundPixels=this._renderer._roundPixels|t._roundPixels,this._gpuSpriteHash[t.uid]=e,t.didViewUpdate||this._updateBatchableSprite(t,e),t.on("destroyed",this._destroyRenderableBound),e}destroy(){for(const t in this._gpuSpriteHash)this._gpuSpriteHash[t].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}d.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"nineSliceSprite"},r.XO.add(d)},8723:(t,e,i)=>{"use strict";var r=i(8507),s=i(8639),n=i(7547),a=i(5099),o=i(2760),h=i(8734),l=i(5060),c=i(9313),u=i(5611),d=i(2067),p=i(6665),f=i(8475),g=i(5811),x=i(4492);const m={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},_={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        "}};let y,b;class S extends f.M{constructor(){y??(y=(0,u.v)({name:"tiling-sprite-shader",bits:[d.Ls,m,p.b]})),b??(b=(0,u.I)({name:"tiling-sprite-shader",bits:[d.mA,_,p.m]}));const t=new g.k({uMapCoord:{value:new c.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new c.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:b,gpuProgram:y,resources:{localUniforms:new g.k({uTransformMatrix:{value:new c.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:t,uTexture:x.g.EMPTY.source,uSampler:x.g.EMPTY.source.style}})}updateUniforms(t,e,i,r,s,n){const a=this.resources.tilingUniforms,o=n.width,h=n.height,l=n.textureMatrix,c=a.uniforms.uTextureTransform;c.set(i.a*o/t,i.b*o/e,i.c*h/t,i.d*h/e,i.tx/t,i.ty/e),c.invert(),a.uniforms.uMapCoord=l.mapCoord,a.uniforms.uClampFrame=l.uClampFrame,a.uniforms.uClampOffset=l.uClampOffset,a.uniforms.uTextureTransform=c,a.uniforms.uSizeAnchor[0]=t,a.uniforms.uSizeAnchor[1]=e,a.uniforms.uSizeAnchor[2]=r,a.uniforms.uSizeAnchor[3]=s,n&&(this.resources.uTexture=n.source,this.resources.uSampler=n.source.style)}}class v extends l.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const w=new v;class T{constructor(t){this._state=n.U.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=t,this._renderer.renderableGC.addManagedHash(this,"_tilingSpriteDataHash")}validateRenderable(t){const e=this._getTilingSpriteData(t),i=e.canBatch;this._updateCanBatch(t);const r=e.canBatch;if(r&&r===i){const{batchableMesh:i}=e;return!i._batcher.checkAndUpdateTexture(i,t.texture)}return i!==r}addRenderable(t,e){const i=this._renderer.renderPipes.batch;this._updateCanBatch(t);const r=this._getTilingSpriteData(t),{geometry:s,canBatch:n}=r;if(n){r.batchableMesh||(r.batchableMesh=new h.U);const n=r.batchableMesh;t.didViewUpdate&&(this._updateBatchableMesh(t),n.geometry=s,n.renderable=t,n.transform=t.groupTransform,n.texture=t._texture),n.roundPixels=this._renderer._roundPixels|t._roundPixels,i.addToBatch(n,e)}else i.break(e),r.shader||(r.shader=new S),this.updateRenderable(t),e.add(t)}execute(t){const{shader:e}=this._tilingSpriteDataHash[t.uid];e.groups[0]=this._renderer.globalUniforms.bindGroup;const i=e.resources.localUniforms.uniforms;i.uTransformMatrix=t.groupTransform,i.uRound=this._renderer._roundPixels|t._roundPixels,(0,o.V)(t.groupColorAlpha,i.uColor,0),this._state.blendMode=(0,s.i)(t.groupBlendMode,t.texture._source),this._renderer.encoder.draw({geometry:w,shader:e,state:this._state})}updateRenderable(t){const e=this._getTilingSpriteData(t),{canBatch:i}=e;if(i){const{batchableMesh:i}=e;t.didViewUpdate&&this._updateBatchableMesh(t),i._batcher.updateElement(i)}else if(t.didViewUpdate){const{shader:i}=e;i.updateUniforms(t.width,t.height,t._tileTransform.matrix,t.anchor.x,t.anchor.y,t.texture)}}destroyRenderable(t){const e=this._getTilingSpriteData(t);e.batchableMesh=null,e.shader?.destroy(),this._tilingSpriteDataHash[t.uid]=null,t.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(t){return this._tilingSpriteDataHash[t.uid]||this._initTilingSpriteData(t)}_initTilingSpriteData(t){const e=new l.u({indices:w.indices,positions:w.positions.slice(),uvs:w.uvs.slice()});return this._tilingSpriteDataHash[t.uid]={canBatch:!0,renderable:t,geometry:e},t.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[t.uid]}_updateBatchableMesh(t){const e=this._getTilingSpriteData(t),{geometry:i}=e,r=t.texture.source.style;"repeat"!==r.addressMode&&(r.addressMode="repeat",r.update()),function(t,e){const i=t.texture,r=i.frame.width,s=i.frame.height;let n=0,a=0;t.applyAnchorToTexture&&(n=t.anchor.x,a=t.anchor.y),e[0]=e[6]=-n,e[2]=e[4]=1-n,e[1]=e[3]=-a,e[5]=e[7]=1-a;const o=c.u.shared;o.copyFrom(t._tileTransform.matrix),o.tx/=t.width,o.ty/=t.height,o.invert(),o.scale(t.width/r,t.height/s),function(t,e,i,r){let s=0;const n=t.length/2,a=r.a,o=r.b,h=r.c,l=r.d,c=r.tx,u=r.ty;for(i*=2;s<n;){const e=t[i],r=t[i+1];t[i]=a*e+h*r+c,t[i+1]=o*e+l*r+u,i+=2,s++}}(e,0,0,o)}(t,i.uvs),function(t,e){const i=t.anchor.x,r=t.anchor.y;e[0]=-i*t.width,e[1]=-r*t.height,e[2]=(1-i)*t.width,e[3]=-r*t.height,e[4]=(1-i)*t.width,e[5]=(1-r)*t.height,e[6]=-i*t.width,e[7]=(1-r)*t.height}(t,i.positions)}destroy(){for(const t in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[t].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(t){const e=this._getTilingSpriteData(t),i=t.texture;let r=!0;return this._renderer.type===a.W.WEBGL&&(r=this._renderer.context.supports.nonPowOf2wrapping),e.canBatch=i.textureMatrix.isSimple&&(r||i.source.isPowerOfTwo),e.canBatch}}T.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"tilingSprite"},r.XO.add(T)},6607:(t,e,i)=>{"use strict";var r=i(8507),s=i(1979),n=i(8218),a=i(4670),o=i(4985),h=i(4835);class l extends o.l{constructor(t){t instanceof h.T&&(t={context:t});const{context:e,roundPixels:i,...r}=t||{};super({label:"Graphics",...r}),this.renderPipeId="graphics",this._context=e||(this._ownedContext=new h.T),this._context.on("update",this.onViewUpdate,this),this.allowChildren=!1,this.roundPixels=i??!1}set context(t){t!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=t,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}updateBounds(){}containsPoint(t){return this._context.containsPoint(t)}destroy(t){this._ownedContext&&!t?this._ownedContext.destroy(t):!0!==t&&!0!==t?.context||this._context.destroy(t),this._ownedContext=null,this._context=null,super.destroy(t)}_callContextMethod(t,e){return this.context[t](...e),this}setFillStyle(...t){return this._callContextMethod("setFillStyle",t)}setStrokeStyle(...t){return this._callContextMethod("setStrokeStyle",t)}fill(...t){return this._callContextMethod("fill",t)}stroke(...t){return this._callContextMethod("stroke",t)}texture(...t){return this._callContextMethod("texture",t)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...t){return this._callContextMethod("arc",t)}arcTo(...t){return this._callContextMethod("arcTo",t)}arcToSvg(...t){return this._callContextMethod("arcToSvg",t)}bezierCurveTo(...t){return this._callContextMethod("bezierCurveTo",t)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...t){return this._callContextMethod("ellipse",t)}circle(...t){return this._callContextMethod("circle",t)}path(...t){return this._callContextMethod("path",t)}lineTo(...t){return this._callContextMethod("lineTo",t)}moveTo(...t){return this._callContextMethod("moveTo",t)}quadraticCurveTo(...t){return this._callContextMethod("quadraticCurveTo",t)}rect(...t){return this._callContextMethod("rect",t)}roundRect(...t){return this._callContextMethod("roundRect",t)}poly(...t){return this._callContextMethod("poly",t)}regularPoly(...t){return this._callContextMethod("regularPoly",t)}roundPoly(...t){return this._callContextMethod("roundPoly",t)}roundShape(...t){return this._callContextMethod("roundShape",t)}filletRect(...t){return this._callContextMethod("filletRect",t)}chamferRect(...t){return this._callContextMethod("chamferRect",t)}star(...t){return this._callContextMethod("star",t)}svg(...t){return this._callContextMethod("svg",t)}restore(...t){return this._callContextMethod("restore",t)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...t){return this._callContextMethod("rotate",t)}scaleTransform(...t){return this._callContextMethod("scale",t)}setTransform(...t){return this._callContextMethod("setTransform",t)}transform(...t){return this._callContextMethod("transform",t)}translateTransform(...t){return this._callContextMethod("translate",t)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(t){this._context.fillStyle=t}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(t){this._context.strokeStyle=t}clone(t=!1){return t?new l(this._context.clone()):(this._ownedContext=null,new l(this._context))}lineStyle(t,e,i){(0,a.t6)(a.lj,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const r={};return t&&(r.width=t),e&&(r.color=e),i&&(r.alpha=i),this.context.strokeStyle=r,this}beginFill(t,e){(0,a.t6)(a.lj,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const i={};return void 0!==t&&(i.color=t),void 0!==e&&(i.alpha=e),this.context.fillStyle=i,this}endFill(){(0,a.t6)(a.lj,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const t=this.context.strokeStyle;return t.width===h.T.defaultStrokeStyle.width&&t.color===h.T.defaultStrokeStyle.color&&t.alpha===h.T.defaultStrokeStyle.alpha||this.context.stroke(),this}drawCircle(...t){return(0,a.t6)(a.lj,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",t)}drawEllipse(...t){return(0,a.t6)(a.lj,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",t)}drawPolygon(...t){return(0,a.t6)(a.lj,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",t)}drawRect(...t){return(0,a.t6)(a.lj,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",t)}drawRoundedRect(...t){return(0,a.t6)(a.lj,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",t)}drawStar(...t){return(0,a.t6)(a.lj,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",t)}}var c=i(9313),u=i(6563),d=i(5611),p=i(4459),f=i(4e3),g=i(6665),x=i(6040),m=i(8475),_=i(5811);const y={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:" \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},b={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:" \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},S={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        "}},v={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        "}};let w,T;class M extends m.M{constructor(){const t=new _.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new c.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),e=(0,u.a)();w??(w=(0,d.v)({name:"sdf-shader",bits:[p.F,(0,f._)(e),y,S,g.b]})),T??(T=(0,d.I)({name:"sdf-shader",bits:[p.a,(0,f.P)(e),b,v,g.m]})),super({glProgram:T,gpuProgram:w,resources:{localUniforms:t,batchSamplers:(0,x.n)(e)}})}}var C=i(268),P=i(8291),k=i(2577),B=i(9252),R=i(7608),A=i(8293),F=i(4492),U=i(4016),z=i(1242),W=i(3548),H=i(4486);class G extends H.A{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return(0,a.t6)(a.lj,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return(0,a.t6)(a.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return(0,a.t6)(a.lj,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return(0,a.t6)(a.lj,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return(0,a.t6)(a.lj,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(t=!1){this.emit("destroy",this),this.removeAllListeners();for(const t in this.chars)this.chars[t].texture?.destroy();this.chars=null,t&&(this.pages.forEach((t=>t.texture.destroy(!0))),this.pages=null)}}function O(t){if(""===t)return[];"string"==typeof t&&(t=[t]);const e=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];if(Array.isArray(r)){if(2!==r.length)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${r.length}.`);if(0===r[0].length||0===r[1].length)throw new Error("[BitmapFont]: Invalid character delimiter.");const t=r[0].charCodeAt(0),i=r[1].charCodeAt(0);if(i<t)throw new Error("[BitmapFont]: Invalid character range.");for(let r=t,s=i;r<=s;r++)e.push(String.fromCharCode(r))}else e.push(...Array.from(r))}if(0===e.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return e}const L=class t extends G{constructor(e){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentPageIndex=-1,this._skipKerning=!1;const i={...t.defaultOptions,...e};this._textureSize=i.textureSize,this._mipmap=i.mipmap;const r=i.style.clone();i.overrideFill&&(r._fill.color=16777215,r._fill.alpha=1,r._fill.texture=F.g.WHITE,r._fill.fill=null),this.applyFillAsTint=i.overrideFill;const s=r.fontSize;r.fontSize=this.baseMeasurementFontSize;const n=(0,z.Z)(r);i.overrideSize?r._stroke&&(r._stroke.width*=this.baseRenderedFontSize/s):r.fontSize=this.baseRenderedFontSize=s,this._style=r,this._skipKerning=i.skipKerning??!1,this.resolution=i.resolution??1,this._padding=i.padding??4,this.fontMetrics=U.P.measureFont(n),this.lineHeight=r.lineHeight||this.fontMetrics.fontSize||r.fontSize}ensureCharacters(t){const e=O(t).filter((t=>!this._currentChars.includes(t))).filter(((t,e,i)=>i.indexOf(t)===e));if(!e.length)return;let i;this._currentChars=[...this._currentChars,...e],i=-1===this._currentPageIndex?this._nextPage():this.pages[this._currentPageIndex];let{canvas:r,context:s}=i.canvasAndContext,n=i.texture.source;const a=this._style;let o=this._currentX,h=this._currentY;const l=this.baseRenderedFontSize/this.baseMeasurementFontSize,c=this._padding*l;let u=0,d=!1;const p=r.width/this.resolution,f=r.height/this.resolution;for(let t=0;t<e.length;t++){const i=e[t],g=U.P.measureText(i,a,r,!1);g.lineHeight=g.height;const x=g.width*l,m=Math.ceil(("italic"===a.fontStyle?2:1)*x)+2*c,_=g.height*l+2*c;if(d=!1,"\n"!==i&&"\r"!==i&&"\t"!==i&&" "!==i&&(d=!0,u=Math.ceil(Math.max(_,u))),o+m>p&&(h+=u,u=_,o=0,h+u>f)){n.update();const t=this._nextPage();r=t.canvasAndContext.canvas,s=t.canvasAndContext.context,n=t.texture.source,h=0}const y=x/l-(a.dropShadow?.distance??0)-(a._stroke?.width??0);if(this.chars[i]={id:i.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:y,kerning:{}},d){this._drawGlyph(s,g,o+c,h+c,l,a);const t=n.width*l,e=n.height*l,r=new B.M(o/t*n.width,h/e*n.height,m/t*n.width,_/e*n.height);this.chars[i].texture=new F.g({source:n,frame:r}),o+=Math.ceil(m)}}n.update(),this._currentX=o,this._currentY=h,this._skipKerning&&this._applyKerning(e,s)}get pageTextures(){return(0,a.t6)(a.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(t,e){const i=this._measureCache;for(let r=0;r<t.length;r++){const s=t[r];for(let t=0;t<this._currentChars.length;t++){const r=this._currentChars[t];let n=i[s];n||(n=i[s]=e.measureText(s).width);let a=i[r];a||(a=i[r]=e.measureText(r).width);let o=e.measureText(s+r).width,h=o-(n+a);h&&(this.chars[s].kerning[r]=h),o=e.measureText(s+r).width,h=o-(n+a),h&&(this.chars[r].kerning[s]=h)}}}_nextPage(){this._currentPageIndex++;const t=this.resolution,e=R.N.getOptimalCanvasAndContext(this._textureSize,this._textureSize,t);this._setupContext(e.context,this._style,t);const i=t*(this.baseRenderedFontSize/this.baseMeasurementFontSize),r={canvasAndContext:e,texture:new F.g({source:new A.b({resource:e.canvas,resolution:i,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})})};return this.pages[this._currentPageIndex]=r,r}_setupContext(t,e,i){e.fontSize=this.baseRenderedFontSize,t.scale(i,i),t.font=(0,z.Z)(e),e.fontSize=this.baseMeasurementFontSize,t.textBaseline=e.textBaseline;const r=e._stroke,s=r?.width??0;if(r&&(t.lineWidth=s,t.lineJoin=r.join,t.miterLimit=r.miterLimit,t.strokeStyle=(0,W.r)(r,t)),e._fill&&(t.fillStyle=(0,W.r)(e._fill,t)),e.dropShadow){const r=e.dropShadow,s=k.Q.shared.setValue(r.color).toArray(),n=r.blur*i,a=r.distance*i;t.shadowColor=`rgba(${255*s[0]},${255*s[1]},${255*s[2]},${r.alpha})`,t.shadowBlur=n,t.shadowOffsetX=Math.cos(r.angle)*a,t.shadowOffsetY=Math.sin(r.angle)*a}else t.shadowColor="black",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0}_drawGlyph(t,e,i,r,s,n){const a=e.text,o=e.fontProperties,h=n._stroke,l=(h?.width??0)*s,c=i+l/2,u=r-l/2,d=o.descent*s,p=e.lineHeight*s;n.stroke&&l&&t.strokeText(a,c,u+p-d),n._fill&&t.fillText(a,c,u+p-d)}destroy(){super.destroy();for(let t=0;t<this.pages.length;t++){const{canvasAndContext:e,texture:i}=this.pages[t];R.N.returnCanvasAndContext(e),i.destroy(!0)}this.pages=null}};L.defaultOptions={textureSize:512,style:new P.x,mipmap:!0};let I=L;function D(t,e,i,r){const s={width:0,height:0,offsetY:0,scale:e.fontSize/i.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};s.offsetY=i.baseLineOffset;let n=s.lines[0],a=null,o=!0;const h={spaceWord:!1,width:0,start:0,index:0,positions:[],chars:[]},l=t=>{const e=n.width;for(let i=0;i<h.index;i++){const r=t.positions[i];n.chars.push(t.chars[i]),n.charPositions.push(r+e)}n.width+=t.width,o=!1,h.width=0,h.index=0,h.chars.length=0},c=()=>{let t=n.chars.length-1;if(r){let e=n.chars[t];for(;" "===e;)n.width-=i.chars[e].xAdvance,e=n.chars[--t]}s.width=Math.max(s.width,n.width),n={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},o=!0,s.lines.push(n),s.height+=i.lineHeight},u=i.baseMeasurementFontSize/e.fontSize,d=e.letterSpacing*u,p=e.wordWrapWidth*u;for(let r=0;r<t.length+1;r++){let s;const u=r===t.length;u||(s=t[r]);const f=i.chars[s]||i.chars[" "];if(/(?:\s)/.test(s)||"\r"===s||"\n"===s||u){if(!o&&e.wordWrap&&n.width+h.width-d>p?(c(),l(h),u||n.charPositions.push(0)):(h.start=n.width,l(h),u||n.charPositions.push(0)),"\r"===s||"\n"===s)0!==n.width&&c();else if(!u){const t=f.xAdvance+(f.kerning[a]||0)+d;n.width+=t,n.spaceWidth=t,n.spacesIndex.push(n.charPositions.length),n.chars.push(s)}}else{const t=f.kerning[a]||0,e=f.xAdvance+t+d;h.positions[h.index++]=h.width+t,h.chars.push(s),h.width+=e}a=s}return c(),"center"===e.align?function(t){for(let e=0;e<t.lines.length;e++){const i=t.lines[e],r=t.width/2-i.width/2;for(let t=0;t<i.charPositions.length;t++)i.charPositions[t]+=r}}(s):"right"===e.align?function(t){for(let e=0;e<t.lines.length;e++){const i=t.lines[e],r=t.width-i.width;for(let t=0;t<i.charPositions.length;t++)i.charPositions[t]+=r}}(s):"justify"===e.align&&function(t){const e=t.width;for(let i=0;i<t.lines.length;i++){const r=t.lines[i];let s=0,n=r.spacesIndex[s++],a=0;const o=r.spacesIndex.length,h=(e-r.width)/o;for(let t=0;t<r.charPositions.length;t++)t===n&&(n=r.spacesIndex[s++],a+=h),r.charPositions[t]+=a}}(s),s}let V=0;const E=new class{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1}}getFont(t,e){let i=`${e.fontFamily}-bitmap`,r=!0;if(e._fill.fill&&!e._stroke)i+=e._fill.fill.styleKey,r=!1;else if(e._stroke||e.dropShadow){let t=e.styleKey;t=t.substring(0,t.lastIndexOf("-")),i=`${t}-bitmap`,r=!1}if(!s.l.has(i)){const t=new I({style:e,overrideFill:r,overrideSize:!0,...this.defaultOptions});V++,V>50&&(0,C.R)("BitmapText",`You have dynamically created ${V} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),t.once("destroy",(()=>{V--,s.l.remove(i)})),s.l.set(i,t)}const n=s.l.get(i);return n.ensureCharacters?.(t),n}getLayout(t,e,i=!0){const r=this.getFont(t,e);return D([...t],e,r,i)}measureText(t,e,i=!0){return this.getLayout(t,e,i)}install(...t){let e=t[0];"string"==typeof e&&(e={name:e,style:t[1],chars:t[2]?.chars,resolution:t[2]?.resolution,padding:t[2]?.padding,skipKerning:t[2]?.skipKerning},(0,a.t6)(a.lj,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const i=e?.name;if(!i)throw new Error("[BitmapFontManager] Property `name` is required.");e={...this.defaultOptions,...e};const r=e.style,n=r instanceof P.x?r:new P.x(r),o=null!==n._fill.fill&&void 0!==n._fill.fill,h=new I({style:n,overrideFill:o,skipKerning:e.skipKerning,padding:e.padding,resolution:e.resolution,overrideSize:!1}),l=O(e.chars);return h.ensureCharacters(l.join("")),s.l.set(`${i}-bitmap`,h),h.once("destroy",(()=>s.l.remove(`${i}-bitmap`))),h}uninstall(t){const e=`${t}-bitmap`,i=s.l.get(e);i&&i.destroy()}};class ${constructor(t){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=t,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(t){const e=this._getGpuBitmapText(t);return t._didTextUpdate&&(t._didTextUpdate=!1,this._updateContext(t,e)),this._renderer.renderPipes.graphics.validateRenderable(e)}addRenderable(t,e){const i=this._getGpuBitmapText(t);j(t,i),t._didTextUpdate&&(t._didTextUpdate=!1,this._updateContext(t,i)),this._renderer.renderPipes.graphics.addRenderable(i,e),i.context.customShader&&this._updateDistanceField(t)}destroyRenderable(t){t.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(t.uid)}_destroyRenderableByUid(t){const e=this._gpuBitmapText[t].context;e.customShader&&(n.Z.return(e.customShader),e.customShader=null),n.Z.return(this._gpuBitmapText[t]),this._gpuBitmapText[t]=null}updateRenderable(t){const e=this._getGpuBitmapText(t);j(t,e),this._renderer.renderPipes.graphics.updateRenderable(e),e.context.customShader&&this._updateDistanceField(t)}_updateContext(t,e){const{context:i}=e,r=E.getFont(t.text,t._style);i.clear(),"none"!==r.distanceField.type&&(i.customShader||(i.customShader=n.Z.get(M)));const s=Array.from(t.text),a=t._style;let o=r.baseLineOffset;const h=D(s,a,r,!0);let l=0;const c=a.padding,u=h.scale;let d=h.width,p=h.height+h.offsetY;a._stroke&&(d+=a._stroke.width/u,p+=a._stroke.width/u),i.translate(-t._anchor._x*d-c,-t._anchor._y*p-c).scale(u,u);const f=r.applyFillAsTint?a._fill.color:16777215;for(let t=0;t<h.lines.length;t++){const e=h.lines[t];for(let t=0;t<e.charPositions.length;t++){const n=s[l++],a=r.chars[n];a?.texture&&i.texture(a.texture,f||"black",Math.round(e.charPositions[t]+a.xOffset),Math.round(o+a.yOffset))}o+=r.lineHeight}}_getGpuBitmapText(t){return this._gpuBitmapText[t.uid]||this.initGpuText(t)}initGpuText(t){const e=n.Z.get(l);return this._gpuBitmapText[t.uid]=e,this._updateContext(t,e),t.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[t.uid]}_updateDistanceField(t){const e=this._getGpuBitmapText(t).context,i=t._style.fontFamily,r=s.l.get(`${i}-bitmap`),{a:n,b:a,c:o,d:h}=t.groupTransform,l=Math.sqrt(n*n+a*a),c=Math.sqrt(o*o+h*h),u=(Math.abs(l)+Math.abs(c))/2,d=r.baseRenderedFontSize/t._style.fontSize,p=u*r.distanceField.range*(1/d);e.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){for(const t in this._gpuBitmapText)this._destroyRenderableByUid(t);this._gpuBitmapText=null,this._renderer=null}}function j(t,e){e.groupTransform=t.groupTransform,e.groupColorAlpha=t.groupColorAlpha,e.groupColor=t.groupColor,e.groupBlendMode=t.groupBlendMode,e.globalDisplayStatus=t.globalDisplayStatus,e.groupTransform=t.groupTransform,e.localDisplayStatus=t.localDisplayStatus,e.groupAlpha=t.groupAlpha,e._roundPixels=t._roundPixels}$.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"bitmapText"},r.XO.add($)},9147:(t,e,i)=>{"use strict";var r=i(8507),s=i(4492),n=i(2048),a=i(8218),o=i(8422);class h{constructor(t){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=t,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const t in this._gpuText){const e=this._gpuText[t];if(!e)continue;const i=e.batchableSprite.renderable;i._autoResolution&&(i._resolution=this._renderer.resolution,i.onViewUpdate())}}validateRenderable(t){const e=this._getGpuText(t),i=t._getKey();return e.textureNeedsUploading?(e.textureNeedsUploading=!1,!0):e.currentKey!==i}addRenderable(t,e){const i=this._getGpuText(t).batchableSprite;t._didTextUpdate&&this._updateText(t),this._renderer.renderPipes.batch.addToBatch(i,e)}updateRenderable(t){const e=this._getGpuText(t).batchableSprite;t._didTextUpdate&&this._updateText(t),e._batcher.updateElement(e)}destroyRenderable(t){t.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(t.uid)}_destroyRenderableById(t){const e=this._gpuText[t];this._renderer.htmlText.decreaseReferenceCount(e.currentKey),a.Z.return(e.batchableSprite),this._gpuText[t]=null}_updateText(t){const e=t._getKey(),i=this._getGpuText(t),r=i.batchableSprite;i.currentKey!==e&&this._updateGpuText(t).catch((t=>{console.error(t)})),t._didTextUpdate=!1;const s=t._style.padding;(0,n.y)(r.bounds,t._anchor,r.texture,s)}async _updateGpuText(t){t._didTextUpdate=!1;const e=this._getGpuText(t);if(e.generatingTexture)return;const i=t._getKey();this._renderer.htmlText.decreaseReferenceCount(e.currentKey),e.generatingTexture=!0,e.currentKey=i;const r=t.resolution??this._renderer.resolution,s=await this._renderer.htmlText.getManagedTexture(t.text,r,t._style,t._getKey()),a=e.batchableSprite;a.texture=e.texture=s,e.generatingTexture=!1,e.textureNeedsUploading=!0,t.onViewUpdate();const o=t._style.padding;(0,n.y)(a.bounds,t._anchor,a.texture,o)}_getGpuText(t){return this._gpuText[t.uid]||this.initGpuText(t)}initGpuText(t){const e={texture:s.g.EMPTY,currentKey:"--",batchableSprite:a.Z.get(o.K),textureNeedsUploading:!1,generatingTexture:!1},i=e.batchableSprite;return i.renderable=t,i.transform=t.groupTransform,i.texture=s.g.EMPTY,i.bounds={minX:0,maxX:1,minY:0,maxY:0},i.roundPixels=this._renderer._roundPixels|t._roundPixels,t._resolution=t._autoResolution?this._renderer.resolution:t.resolution,this._gpuText[t.uid]=e,t.on("destroyed",this._destroyRenderableBound),e}destroy(){for(const t in this._gpuText)this._destroyRenderableById(t);this._gpuText=null,this._renderer=null}}h.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"htmlText"};var l=i(7608),c=i(2437),u=i(5099),d=i(1761),p=i(268),f=i(2558);const g="http://www.w3.org/2000/svg",x="http://www.w3.org/1999/xhtml";class m{constructor(){this.svgRoot=document.createElementNS(g,"svg"),this.foreignObject=document.createElementNS(g,"foreignObject"),this.domElement=document.createElementNS(x,"div"),this.styleElement=document.createElementNS(x,"style"),this.image=new Image;const{foreignObject:t,svgRoot:e,styleElement:i,domElement:r}=this;t.setAttribute("width","10000"),t.setAttribute("height","10000"),t.style.overflow="hidden",e.appendChild(t),t.appendChild(i),t.appendChild(r)}}var _=i(8291),y=i(8011),b=i(2577);function S(t){const e=b.Q.shared.setValue(t.color).setAlpha(t.alpha).toHexa(),i=`${Math.round(Math.cos(t.angle)*t.distance)}px ${Math.round(Math.sin(t.angle)*t.distance)}px`;return t.blur>0?`text-shadow: ${i} ${t.blur}px ${e}`:`text-shadow: ${i} ${e}`}function v(t){return[`-webkit-text-stroke-width: ${t.width}px`,`-webkit-text-stroke-color: ${b.Q.shared.setValue(t.color).toHex()}`,`text-stroke-width: ${t.width}px`,`text-stroke-color: ${b.Q.shared.setValue(t.color).toHex()}`,"paint-order: stroke"].join(";")}const w={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},T={fill:t=>`color: ${b.Q.shared.setValue(t).toHex()}`,breakWords:t=>"word-wrap: "+(t?"break-all":"break-word"),stroke:v,dropShadow:S};class M extends _.x{constructor(t={}){super(t),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=t.cssOverrides),this.tagStyles=t.tagStyles??{}}set cssOverrides(t){this._cssOverrides=t instanceof Array?t:[t],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=(0,y.V)(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new M({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=function(t){const e=t._stroke,i=t._fill,r=[`div { ${[`color: ${b.Q.shared.setValue(i.color).toHex()}`,`font-size: ${t.fontSize}px`,`font-family: ${t.fontFamily}`,`font-weight: ${t.fontWeight}`,`font-style: ${t.fontStyle}`,`font-variant: ${t.fontVariant}`,`letter-spacing: ${t.letterSpacing}px`,`text-align: ${t.align}`,`padding: ${t.padding}px`,`white-space: ${"pre"===t.whiteSpace&&t.wordWrap?"pre-wrap":t.whiteSpace}`,...t.lineHeight?[`line-height: ${t.lineHeight}px`]:[],...t.wordWrap?["word-wrap: "+(t.breakWords?"break-all":"break-word"),`max-width: ${t.wordWrapWidth}px`]:[],...e?[v(e)]:[],...t.dropShadow?[S(t.dropShadow)]:[],...t.cssOverrides].join(";")} }`];return function(t,e){for(const i in t){const r=t[i],s=[];for(const t in r)T[t]?s.push(T[t](r[t])):w[t]&&s.push(w[t].replace("{{VALUE}}",r[t]));e.push(`${i} { ${s.join(";")} }`)}}(t.tagStyles,r),r.join(" ")}(this)),this._cssStyle}addOverride(...t){const e=t.filter((t=>!this.cssOverrides.includes(t)));e.length>0&&(this.cssOverrides.push(...e),this.update())}removeOverride(...t){const e=t.filter((t=>this.cssOverrides.includes(t)));e.length>0&&(this.cssOverrides=this.cssOverrides.filter((t=>!e.includes(t))),this.update())}set fill(t){"string"!=typeof t&&"number"!=typeof t&&(0,p.R)("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=t}set stroke(t){t&&"string"!=typeof t&&"number"!=typeof t&&(0,p.R)("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=t}}var C=i(1979);async function P(t,e){const i=await async function(t){const e=await d.e.get().fetch(t),i=await e.blob(),r=new FileReader;return await new Promise(((t,e)=>{r.onloadend=()=>t(r.result),r.onerror=e,r.readAsDataURL(i)}))}(e);return`@font-face {\n        font-family: "${t.fontFamily}";\n        src: url('${i}');\n        font-weight: ${t.fontWeight};\n        font-style: ${t.fontStyle};\n    }`}const k=new Map;let B;class R{constructor(t){this._activeTextures={},this._renderer=t,this._createCanvas=t.type===u.W.WEBGPU}getTexture(t){return this._buildTexturePromise(t.text,t.resolution,t.style)}getManagedTexture(t,e,i,r){if(this._activeTextures[r])return this._increaseReferenceCount(r),this._activeTextures[r].promise;const s=this._buildTexturePromise(t,e,i).then((t=>(this._activeTextures[r].texture=t,t)));return this._activeTextures[r]={texture:null,promise:s,usageCount:1},s}async _buildTexturePromise(t,e,i){const r=a.Z.get(m),s=function(t,e){const i=e.fontFamily,r=[],s={},n=t.match(/font-family:([^;"\s]+)/g);function a(t){s[t]||(r.push(t),s[t]=!0)}if(Array.isArray(i))for(let t=0;t<i.length;t++)a(i[t]);else a(i);n&&n.forEach((t=>{a(t.split(":")[1].trim())}));for(const t in e.tagStyles)a(e.tagStyles[t].fontFamily);return r}(t,i),n=await async function(t,e,i){const r=t.filter((t=>C.l.has(`${t}-and-url`))).map(((t,r)=>{if(!k.has(t)){const{url:s}=C.l.get(`${t}-and-url`);0===r?k.set(t,P({fontWeight:e.fontWeight,fontStyle:e.fontStyle,fontFamily:t},s)):k.set(t,P({fontWeight:i.fontWeight,fontStyle:i.fontStyle,fontFamily:t},s))}return k.get(t)}));return(await Promise.all(r)).join("\n")}(s,i,M.defaultTextStyle),o=function(t,e,i,r){r||(r=B||(B=new m));const{domElement:s,styleElement:n,svgRoot:a}=r;s.innerHTML=`<style>${e.cssStyle};</style><div style='padding:0'>${t}</div>`,s.setAttribute("style","transform-origin: top left; display: inline-block"),i&&(n.textContent=i),document.body.appendChild(a);const o=s.getBoundingClientRect();a.remove();const h=2*e.padding;return{width:o.width-h,height:o.height-h}}(t,i,n,r),h=Math.ceil(Math.ceil(Math.max(1,o.width)+2*i.padding)*e),c=Math.ceil(Math.ceil(Math.max(1,o.height)+2*i.padding)*e),u=r.image;u.width=2+(0|h),u.height=2+(0|c);const p=function(t,e,i,r,s){const{domElement:n,styleElement:a,svgRoot:o}=s;n.innerHTML=`<style>${e.cssStyle}</style><div style='padding:0;'>${t}</div>`,n.setAttribute("style",`transform: scale(${i});transform-origin: top left; display: inline-block`),a.textContent=r;const{width:h,height:l}=s.image;return o.setAttribute("width",h.toString()),o.setAttribute("height",l.toString()),(new XMLSerializer).serializeToString(o)}(t,i,e,n,r);await function(t,e,i){return new Promise((async r=>{i&&await new Promise((t=>setTimeout(t,100))),t.onload=()=>{r()},t.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(e)}`,t.crossOrigin="anonymous"}))}(u,p,function(){const{userAgent:t}=d.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(t)}()&&s.length>0);const g=u;let x;this._createCanvas&&(x=function(t,e){const i=l.N.getOptimalCanvasAndContext(t.width,t.height,e),{context:r}=i;return r.clearRect(0,0,t.width,t.height),r.drawImage(t,0,0),i}(u,e));const _=(0,f.M)(x?x.canvas:g,u.width-2,u.height-2,e);return this._createCanvas&&(this._renderer.texture.initSource(_.source),l.N.returnCanvasAndContext(x)),a.Z.return(r),_}_increaseReferenceCount(t){this._activeTextures[t].usageCount++}decreaseReferenceCount(t){const e=this._activeTextures[t];e&&(e.usageCount--,0===e.usageCount&&(e.texture?this._cleanUp(e):e.promise.then((t=>{e.texture=t,this._cleanUp(e)})).catch((()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")})),this._activeTextures[t]=null))}_cleanUp(t){c.W.returnTexture(t.texture),t.texture.source.resource=null,t.texture.source.uploadMethodId="unknown"}getReferenceCount(t){return this._activeTextures[t].usageCount}destroy(){this._activeTextures=null}}R.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem,r.Ag.CanvasSystem],name:"htmlText"},R.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"},r.XO.add(R),r.XO.add(h)},8291:(t,e,i)=>{"use strict";i.d(e,{x:()=>d});var r=i(4486),s=i(2577),n=i(4670),a=i(7276),o=i(2806),h=i(4835),l=i(990),c=i(8011);const u=class t extends r.A{constructor(e={}){super(),function(t){const e=t;if("boolean"==typeof e.dropShadow&&e.dropShadow){const i=d.defaultDropShadow;t.dropShadow={alpha:e.dropShadowAlpha??i.alpha,angle:e.dropShadowAngle??i.angle,blur:e.dropShadowBlur??i.blur,color:e.dropShadowColor??i.color,distance:e.dropShadowDistance??i.distance}}if(void 0!==e.strokeThickness){(0,n.t6)(n.lj,"strokeThickness is now a part of stroke");const i=e.stroke;let r={};if(s.Q.isColorLike(i))r.color=i;else if(i instanceof a._||i instanceof o.m)r.fill=i;else{if(!Object.hasOwnProperty.call(i,"color")&&!Object.hasOwnProperty.call(i,"fill"))throw new Error("Invalid stroke value.");r=i}t.stroke={...r,width:e.strokeThickness}}if(Array.isArray(e.fillGradientStops)){let i;(0,n.t6)(n.lj,"gradient fill is now a fill pattern: `new FillGradient(...)`"),null==t.fontSize?t.fontSize=d.defaultTextStyle.fontSize:i="string"==typeof t.fontSize?parseInt(t.fontSize,10):t.fontSize;const r=new a._(0,0,0,1.7*i),o=e.fillGradientStops.map((t=>s.Q.shared.setValue(t).toNumber()));o.forEach(((t,e)=>{const i=e/(o.length-1);r.addColorStop(i,t)})),t.fill={fill:r}}}(e);const i={...t.defaultTextStyle,...e};for(const t in i)this[t]=i[t];this.update()}get align(){return this._align}set align(t){this._align=t,this.update()}get breakWords(){return this._breakWords}set breakWords(t){this._breakWords=t,this.update()}get dropShadow(){return this._dropShadow}set dropShadow(e){this._dropShadow=null!==e&&"object"==typeof e?this._createProxy({...t.defaultDropShadow,...e}):e?this._createProxy({...t.defaultDropShadow}):null,this.update()}get fontFamily(){return this._fontFamily}set fontFamily(t){this._fontFamily=t,this.update()}get fontSize(){return this._fontSize}set fontSize(t){this._fontSize="string"==typeof t?parseInt(t,10):t,this.update()}get fontStyle(){return this._fontStyle}set fontStyle(t){this._fontStyle=t.toLowerCase(),this.update()}get fontVariant(){return this._fontVariant}set fontVariant(t){this._fontVariant=t,this.update()}get fontWeight(){return this._fontWeight}set fontWeight(t){this._fontWeight=t,this.update()}get leading(){return this._leading}set leading(t){this._leading=t,this.update()}get letterSpacing(){return this._letterSpacing}set letterSpacing(t){this._letterSpacing=t,this.update()}get lineHeight(){return this._lineHeight}set lineHeight(t){this._lineHeight=t,this.update()}get padding(){return this._padding}set padding(t){this._padding=t,this.update()}get trim(){return this._trim}set trim(t){this._trim=t,this.update()}get textBaseline(){return this._textBaseline}set textBaseline(t){this._textBaseline=t,this.update()}get whiteSpace(){return this._whiteSpace}set whiteSpace(t){this._whiteSpace=t,this.update()}get wordWrap(){return this._wordWrap}set wordWrap(t){this._wordWrap=t,this.update()}get wordWrapWidth(){return this._wordWrapWidth}set wordWrapWidth(t){this._wordWrapWidth=t,this.update()}get fill(){return this._originalFill}set fill(t){t!==this._originalFill&&(this._originalFill=t,this._isFillStyle(t)&&(this._originalFill=this._createProxy({...h.T.defaultFillStyle,...t},(()=>{this._fill=(0,l.w)({...this._originalFill},h.T.defaultFillStyle)}))),this._fill=(0,l.w)(0===t?"black":t,h.T.defaultFillStyle),this.update())}get stroke(){return this._originalStroke}set stroke(t){t!==this._originalStroke&&(this._originalStroke=t,this._isFillStyle(t)&&(this._originalStroke=this._createProxy({...h.T.defaultStrokeStyle,...t},(()=>{this._stroke=(0,l.T)({...this._originalStroke},h.T.defaultStrokeStyle)}))),this._stroke=(0,l.T)(t,h.T.defaultStrokeStyle),this.update())}_generateKey(){return this._styleKey=(0,c.V)(this),this._styleKey}update(){this._styleKey=null,this.emit("update",this)}reset(){const e=t.defaultTextStyle;for(const t in e)this[t]=e[t]}get styleKey(){return this._styleKey||this._generateKey()}clone(){return new t({align:this.align,breakWords:this.breakWords,dropShadow:this._dropShadow?{...this._dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,leading:this.leading,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,textBaseline:this.textBaseline,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth})}destroy(t=!1){if(this.removeAllListeners(),"boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._fill?.texture&&this._fill.texture.destroy(e),this._originalFill?.texture&&this._originalFill.texture.destroy(e),this._stroke?.texture&&this._stroke.texture.destroy(e),this._originalStroke?.texture&&this._originalStroke.texture.destroy(e)}this._fill=null,this._stroke=null,this.dropShadow=null,this._originalStroke=null,this._originalFill=null}_createProxy(t,e){return new Proxy(t,{set:(t,i,r)=>(t[i]=r,e?.(i,r),this.update(),!0)})}_isFillStyle(t){return null!==(t??null)&&!(s.Q.isColorLike(t)||t instanceof a._||t instanceof o.m)}};u.defaultDropShadow={alpha:1,angle:Math.PI/6,blur:0,color:"black",distance:5},u.defaultTextStyle={align:"left",breakWords:!1,dropShadow:null,fill:"black",fontFamily:"Arial",fontSize:26,fontStyle:"normal",fontVariant:"normal",fontWeight:"normal",leading:0,letterSpacing:0,lineHeight:0,padding:0,stroke:null,textBaseline:"alphabetic",trim:!1,whiteSpace:"pre",wordWrap:!1,wordWrapWidth:100};let d=u},4016:(t,e,i)=>{"use strict";i.d(e,{P:()=>o});var r=i(1761),s=i(1242);const n={willReadFrequently:!0},a=class t{static get experimentalLetterSpacingSupported(){let e=t._experimentalLetterSpacingSupported;if(void 0!==e){const i=r.e.get().getCanvasRenderingContext2D().prototype;e=t._experimentalLetterSpacingSupported="letterSpacing"in i||"textLetterSpacing"in i}return e}constructor(t,e,i,r,s,n,a,o,h){this.text=t,this.style=e,this.width=i,this.height=r,this.lines=s,this.lineWidths=n,this.lineHeight=a,this.maxLineWidth=o,this.fontProperties=h}static measureText(e=" ",i,r=t._canvas,n=i.wordWrap){const a=`${e}:${i.styleKey}`;if(t._measurementCache[a])return t._measurementCache[a];const o=(0,s.Z)(i),h=t.measureFont(o);0===h.fontSize&&(h.fontSize=i.fontSize,h.ascent=i.fontSize);const l=t.__context;l.font=o;const c=(n?t._wordWrap(e,i,r):e).split(/(?:\r\n|\r|\n)/),u=new Array(c.length);let d=0;for(let e=0;e<c.length;e++){const r=t._measureText(c[e],i.letterSpacing,l);u[e]=r,d=Math.max(d,r)}const p=i._stroke?.width||0;let f=d+p;i.dropShadow&&(f+=i.dropShadow.distance);const g=i.lineHeight||h.fontSize;let x=Math.max(g,h.fontSize+p)+(c.length-1)*(g+i.leading);return i.dropShadow&&(x+=i.dropShadow.distance),new t(e,i,f,x,c,u,g+i.leading,d,h)}static _measureText(e,i,r){let s=!1;t.experimentalLetterSpacingSupported&&(t.experimentalLetterSpacing?(r.letterSpacing=`${i}px`,r.textLetterSpacing=`${i}px`,s=!0):(r.letterSpacing="0px",r.textLetterSpacing="0px"));const n=r.measureText(e);let a=n.width;const o=-n.actualBoundingBoxLeft;let h=n.actualBoundingBoxRight-o;if(a>0)if(s)a-=i,h-=i;else{const r=(t.graphemeSegmenter(e).length-1)*i;a+=r,h+=r}return Math.max(a,h)}static _wordWrap(e,i,r=t._canvas){const s=r.getContext("2d",n);let a=0,o="",h="";const l=Object.create(null),{letterSpacing:c,whiteSpace:u}=i,d=t._collapseSpaces(u),p=t._collapseNewlines(u);let f=!d;const g=i.wordWrapWidth+c,x=t._tokenize(e);for(let e=0;e<x.length;e++){let r=x[e];if(t._isNewline(r)){if(!p){h+=t._addLine(o),f=!d,o="",a=0;continue}r=" "}if(d){const e=t.isBreakingSpace(r),i=t.isBreakingSpace(o[o.length-1]);if(e&&i)continue}const n=t._getFromCache(r,c,l,s);if(n>g)if(""!==o&&(h+=t._addLine(o),o="",a=0),t.canBreakWords(r,i.breakWords)){const e=t.wordWrapSplit(r);for(let n=0;n<e.length;n++){let u=e[n],d=u,p=1;for(;e[n+p];){const s=e[n+p];if(t.canBreakChars(d,s,r,n,i.breakWords))break;u+=s,d=s,p++}n+=p-1;const x=t._getFromCache(u,c,l,s);x+a>g&&(h+=t._addLine(o),f=!1,o="",a=0),o+=u,a+=x}}else{o.length>0&&(h+=t._addLine(o),o="",a=0);const i=e===x.length-1;h+=t._addLine(r,!i),f=!1,o="",a=0}else n+a>g&&(f=!1,h+=t._addLine(o),o="",a=0),(o.length>0||!t.isBreakingSpace(r)||f)&&(o+=r,a+=n)}return h+=t._addLine(o,!1),h}static _addLine(e,i=!0){return e=t._trimRight(e),i?`${e}\n`:e}static _getFromCache(e,i,r,s){let n=r[e];return"number"!=typeof n&&(n=t._measureText(e,i,s)+i,r[e]=n),n}static _collapseSpaces(t){return"normal"===t||"pre-line"===t}static _collapseNewlines(t){return"normal"===t}static _trimRight(e){if("string"!=typeof e)return"";for(let i=e.length-1;i>=0;i--){const r=e[i];if(!t.isBreakingSpace(r))break;e=e.slice(0,-1)}return e}static _isNewline(e){return"string"==typeof e&&t._newlines.includes(e.charCodeAt(0))}static isBreakingSpace(e,i){return"string"==typeof e&&t._breakingSpaces.includes(e.charCodeAt(0))}static _tokenize(e){const i=[];let r="";if("string"!=typeof e)return i;for(let s=0;s<e.length;s++){const n=e[s],a=e[s+1];t.isBreakingSpace(n,a)||t._isNewline(n)?(""!==r&&(i.push(r),r=""),i.push(n)):r+=n}return""!==r&&i.push(r),i}static canBreakWords(t,e){return e}static canBreakChars(t,e,i,r,s){return!0}static wordWrapSplit(e){return t.graphemeSegmenter(e)}static measureFont(e){if(t._fonts[e])return t._fonts[e];const i=t._context;i.font=e;const r=i.measureText(t.METRICS_STRING+t.BASELINE_SYMBOL),s={ascent:r.actualBoundingBoxAscent,descent:r.actualBoundingBoxDescent,fontSize:r.actualBoundingBoxAscent+r.actualBoundingBoxDescent};return t._fonts[e]=s,s}static clearMetrics(e=""){e?delete t._fonts[e]:t._fonts={}}static get _canvas(){if(!t.__canvas){let e;try{const i=new OffscreenCanvas(0,0),s=i.getContext("2d",n);if(s?.measureText)return t.__canvas=i,i;e=r.e.get().createCanvas()}catch(t){e=r.e.get().createCanvas()}e.width=e.height=10,t.__canvas=e}return t.__canvas}static get _context(){return t.__context||(t.__context=t._canvas.getContext("2d",n)),t.__context}};a.METRICS_STRING="|ÉqÅ",a.BASELINE_SYMBOL="M",a.BASELINE_MULTIPLIER=1.4,a.HEIGHT_MULTIPLIER=2,a.graphemeSegmenter=(()=>{if("function"==typeof Intl?.Segmenter){const t=new Intl.Segmenter;return e=>[...t.segment(e)].map((t=>t.segment))}return t=>[...t]})(),a.experimentalLetterSpacing=!1,a._fonts={},a._newlines=[10,13],a._breakingSpaces=[9,32,8192,8193,8194,8195,8196,8197,8198,8200,8201,8202,8287,12288],a._measurementCache={};let o=a},1242:(t,e,i)=>{"use strict";i.d(e,{Z:()=>s});const r=["serif","sans-serif","monospace","cursive","fantasy","system-ui"];function s(t){const e="number"==typeof t.fontSize?`${t.fontSize}px`:t.fontSize;let i=t.fontFamily;Array.isArray(t.fontFamily)||(i=t.fontFamily.split(","));for(let t=i.length-1;t>=0;t--){let e=i[t].trim();/([\"\'])[^\'\"]+\1/.test(e)||r.includes(e)||(e=`"${e}"`),i[t]=e}return`${t.fontStyle} ${t.fontVariant} ${t.fontWeight} ${e} ${i.join(",")}`}},3548:(t,e,i)=>{"use strict";i.d(e,{r:()=>l});var r=i(2577),s=i(9313),n=i(4492),a=i(268),o=i(7276),h=i(2806);function l(t,e){if(t.texture===n.g.WHITE&&!t.fill)return r.Q.shared.setValue(t.color).setAlpha(t.alpha??1).toHexa();if(!t.fill){const i=e.createPattern(t.texture.source.resource,"repeat"),r=t.matrix.copyTo(s.u.shared);return r.scale(t.texture.frame.width,t.texture.frame.height),i.setTransform(r),i}if(t.fill instanceof h.m){const i=t.fill,r=e.createPattern(i.texture.source.resource,"repeat"),n=i.transform.copyTo(s.u.shared);return n.scale(i.texture.frame.width,i.texture.frame.height),r.setTransform(n),r}if(t.fill instanceof o._){const i=t.fill;if("linear"===i.type){const t=e.createLinearGradient(i.x0,i.y0,i.x1,i.y1);return i.gradientStops.forEach((e=>{t.addColorStop(e.offset,r.Q.shared.setValue(e.color).toHex())})),t}}return(0,a.R)("FillStyle not recognised",t),"red"}},6958:(t,e,i)=>{"use strict";var r=i(8507),s=i(2048),n=i(8218),a=i(8422);class o{constructor(t){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=t,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const t in this._gpuText){const e=this._gpuText[t];if(!e)continue;const i=e.batchableSprite.renderable;i._autoResolution&&(i._resolution=this._renderer.resolution,i.onViewUpdate())}}validateRenderable(t){const e=this._getGpuText(t),i=t._getKey();return e.currentKey!==i}addRenderable(t,e){const i=this._getGpuText(t).batchableSprite;t._didTextUpdate&&this._updateText(t),this._renderer.renderPipes.batch.addToBatch(i,e)}updateRenderable(t){const e=this._getGpuText(t).batchableSprite;t._didTextUpdate&&this._updateText(t),e._batcher.updateElement(e)}destroyRenderable(t){t.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(t.uid)}_destroyRenderableById(t){const e=this._gpuText[t];this._renderer.canvasText.decreaseReferenceCount(e.currentKey),n.Z.return(e.batchableSprite),this._gpuText[t]=null}_updateText(t){const e=t._getKey(),i=this._getGpuText(t),r=i.batchableSprite;i.currentKey!==e&&this._updateGpuText(t),t._didTextUpdate=!1;const n=t._style.padding;(0,s.y)(r.bounds,t._anchor,r.texture,n)}_updateGpuText(t){const e=this._getGpuText(t),i=e.batchableSprite;e.texture&&this._renderer.canvasText.decreaseReferenceCount(e.currentKey),e.texture=i.texture=this._renderer.canvasText.getManagedTexture(t),e.currentKey=t._getKey(),i.texture=e.texture}_getGpuText(t){return this._gpuText[t.uid]||this.initGpuText(t)}initGpuText(t){const e={texture:null,currentKey:"--",batchableSprite:n.Z.get(a.K)};return e.batchableSprite.renderable=t,e.batchableSprite.transform=t.groupTransform,e.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},e.batchableSprite.roundPixels=this._renderer._roundPixels|t._roundPixels,this._gpuText[t.uid]=e,t._resolution=t._autoResolution?this._renderer.resolution:t.resolution,this._updateText(t),t.on("destroyed",this._destroyRenderableBound),e}destroy(){for(const t in this._gpuText)this._destroyRenderableById(t);this._gpuText=null,this._renderer=null}}o.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"text"};var h=i(2577),l=i(9939),c=i(7608),u=i(2437),d=i(9252);function p(t,e,i){for(let r=0,s=4*i*e;r<e;++r,s+=4)if(0!==t[s+3])return!1;return!0}function f(t,e,i,r,s){const n=4*e;for(let e=r,a=r*n+4*i;e<=s;++e,a+=n)if(0!==t[a+3])return!1;return!0}var g=i(4670),x=i(8291),m=i(2558),_=i(4016),y=i(1242),b=i(3548);class S{constructor(t){this._activeTextures={},this._renderer=t}getTextureSize(t,e,i){const r=_.P.measureText(t||" ",i);let s=Math.ceil(Math.ceil(Math.max(1,r.width)+2*i.padding)*e),n=Math.ceil(Math.ceil(Math.max(1,r.height)+2*i.padding)*e);return s=Math.ceil(s-1e-6),n=Math.ceil(n-1e-6),s=(0,l.U5)(s),n=(0,l.U5)(n),{width:s,height:n}}getTexture(t,e,i,r){"string"==typeof t&&((0,g.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),t={text:t,style:i,resolution:e}),t.style instanceof x.x||(t.style=new x.x(t.style));const{texture:s,canvasAndContext:n}=this.createTextureAndCanvas(t);return this._renderer.texture.initSource(s._source),c.N.returnCanvasAndContext(n),s}createTextureAndCanvas(t){const{text:e,style:i}=t,r=t.resolution??this._renderer.resolution,s=_.P.measureText(e||" ",i),n=Math.ceil(Math.ceil(Math.max(1,s.width)+2*i.padding)*r),a=Math.ceil(Math.ceil(Math.max(1,s.height)+2*i.padding)*r),o=c.N.getOptimalCanvasAndContext(n,a),{canvas:h}=o;this.renderTextToCanvas(e,i,r,o);const l=(0,m.M)(h,n,a,r);if(i.trim){const t=function(t,e=1){const{width:i,height:r}=t,s=t.getContext("2d",{willReadFrequently:!0});if(null===s)throw new TypeError("Failed to get canvas 2D context");const n=s.getImageData(0,0,i,r).data;let a=0,o=0,h=i-1,l=r-1;for(;o<r&&p(n,i,o);)++o;if(o===r)return d.M.EMPTY;for(;p(n,i,l);)--l;for(;f(n,i,a,o,l);)++a;for(;f(n,i,h,o,l);)--h;return++h,++l,new d.M(a/e,o/e,(h-a)/e,(l-o)/e)}(h,r);l.frame.copyFrom(t),l.updateUvs()}return{texture:l,canvasAndContext:o}}getManagedTexture(t){t._resolution=t._autoResolution?this._renderer.resolution:t.resolution;const e=t._getKey();if(this._activeTextures[e])return this._increaseReferenceCount(e),this._activeTextures[e].texture;const{texture:i,canvasAndContext:r}=this.createTextureAndCanvas(t);return this._activeTextures[e]={canvasAndContext:r,texture:i,usageCount:1},i}_increaseReferenceCount(t){this._activeTextures[t].usageCount++}decreaseReferenceCount(t){const e=this._activeTextures[t];if(e.usageCount--,0===e.usageCount){c.N.returnCanvasAndContext(e.canvasAndContext),u.W.returnTexture(e.texture);const i=e.texture.source;i.resource=null,i.uploadMethodId="unknown",i.alphaMode="no-premultiply-alpha",this._activeTextures[t]=null}}getReferenceCount(t){return this._activeTextures[t].usageCount}renderTextToCanvas(t,e,i,r){const{canvas:s,context:n}=r,a=(0,y.Z)(e),o=_.P.measureText(t||" ",e),l=o.lines,c=o.lineHeight,u=o.lineWidths,d=o.maxLineWidth,p=o.fontProperties,f=s.height;if(n.resetTransform(),n.scale(i,i),n.textBaseline=e.textBaseline,e._stroke?.width){const t=e._stroke;n.lineWidth=t.width,n.miterLimit=t.miterLimit,n.lineJoin=t.join,n.lineCap=t.cap}let g,x;n.font=a;const m=e.dropShadow?2:1;for(let t=0;t<m;++t){const s=e.dropShadow&&0===t,a=s?Math.ceil(Math.max(1,f)+2*e.padding):0,o=a*i;if(s){n.fillStyle="black",n.strokeStyle="black";const t=e.dropShadow,r=t.color,s=t.alpha;n.shadowColor=h.Q.shared.setValue(r).setAlpha(s).toRgbaString();const a=t.blur*i,l=t.distance*i;n.shadowBlur=a,n.shadowOffsetX=Math.cos(t.angle)*l,n.shadowOffsetY=Math.sin(t.angle)*l+o}else n.fillStyle=e._fill?(0,b.r)(e._fill,n):null,e._stroke?.width&&(n.strokeStyle=(0,b.r)(e._stroke,n)),n.shadowColor="black";let m=(c-p.fontSize)/2;c-p.fontSize<0&&(m=0);const _=e._stroke?.width??0;for(let t=0;t<l.length;t++)g=_/2,x=_/2+t*c+p.ascent+m,"right"===e.align?g+=d-u[t]:"center"===e.align&&(g+=(d-u[t])/2),e._stroke?.width&&this._drawLetterSpacing(l[t],e,r,g+e.padding,x+e.padding-a,!0),void 0!==e._fill&&this._drawLetterSpacing(l[t],e,r,g+e.padding,x+e.padding-a)}}_drawLetterSpacing(t,e,i,r,s,n=!1){const{context:a}=i,o=e.letterSpacing;let h=!1;if(_.P.experimentalLetterSpacingSupported&&(_.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,h=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||h)return void(n?a.strokeText(t,r,s):a.fillText(t,r,s));let l=r;const c=_.P.graphemeSegmenter(t);let u=a.measureText(t).width,d=0;for(let t=0;t<c.length;++t){const e=c[t];n?a.strokeText(e,l,s):a.fillText(e,l,s);let i="";for(let e=t+1;e<c.length;++e)i+=c[e];d=a.measureText(i).width,l+=u-d+o,u=d}}destroy(){this._activeTextures=null}}S.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem,r.Ag.CanvasSystem],name:"canvasText"},r.XO.add(S),r.XO.add(o)},8011:(t,e,i)=>{"use strict";i.d(e,{V:()=>n});var r=i(2577);const s=["align","breakWords","cssOverrides","fontVariant","fontWeight","leading","letterSpacing","lineHeight","padding","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","fontFamily","fontStyle","fontSize"];function n(t){const e=[];let i=0;for(let r=0;r<s.length;r++){const n=`_${s[r]}`;e[i++]=t[n]}return i=a(t._fill,e,i),i=function(t,e,i){return t?(i=a(t,e,i),e[i++]=t.width,e[i++]=t.alignment,e[i++]=t.cap,e[i++]=t.join,e[i++]=t.miterLimit,i):i}(t._stroke,e,i),i=function(t,e,i){return t?(e[i++]=t.alpha,e[i++]=t.angle,e[i++]=t.blur,e[i++]=t.distance,e[i++]=r.Q.shared.setValue(t.color).toNumber(),i):i}(t.dropShadow,e,i),e.join("-")}function a(t,e,i){return t?(e[i++]=t.color,e[i++]=t.alpha,e[i++]=t.fill?.styleKey,i):i}},2558:(t,e,i)=>{"use strict";i.d(e,{M:()=>n});var r=i(2437);const s=new(i(9636).c);function n(t,e,i,n){const a=s;a.minX=0,a.minY=0,a.maxX=t.width/n|0,a.maxY=t.height/n|0;const o=r.W.getOptimalTexture(a.width,a.height,n,!1);return o.source.uploadMethodId="image",o.source.resource=t,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=e/n,o.frame.height=i/n,o.source.emit("update",o.source),o.updateUvs(),o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,