/*! For license information please see bundle.b1d1f0ce9bd1f63c106d.js.LICENSE.txt */
(()=>{"use strict";var t,e={6570:t=>{function e(t,e,r){r=r||2;var n,a,o,h,d,c,f,m=e&&e.length,_=m?e[0]*r:t.length,g=i(t,0,_,r,!0),y=[];if(!g||g.next===g.prev)return y;if(m&&(g=function(t,e,r,s){var n,a,o,h=[];for(n=0,a=e.length;n<a;n++)(o=i(t,e[n]*s,n<a-1?e[n+1]*s:t.length,s,!1))===o.next&&(o.steiner=!0),h.push(p(o));for(h.sort(l),n=0;n<h.length;n++)r=u(h[n],r);return r}(t,e,g,r)),t.length>80*r){n=o=t[0],a=h=t[1];for(var x=r;x<_;x+=r)(d=t[x])<n&&(n=d),(c=t[x+1])<a&&(a=c),d>o&&(o=d),c>h&&(h=c);f=0!==(f=Math.max(o-n,h-a))?32767/f:0}return s(g,y,r,n,a,f,0),y}function i(t,e,i,r,s){var n,a;if(s===M(t,e,i,r)>0)for(n=e;n<i;n+=r)a=A(n,t[n],t[n+1],a);else for(n=i-r;n>=e;n-=r)a=A(n,t[n],t[n+1],a);return a&&g(a,a.next)&&(T(a),a=a.next),a}function r(t,e){if(!t)return t;e||(e=t);var i,r=t;do{if(i=!1,r.steiner||!g(r,r.next)&&0!==_(r.prev,r,r.next))r=r.next;else{if(T(r),(r=e=r.prev)===r.next)break;i=!0}}while(i||r!==e);return e}function s(t,e,i,l,u,d,p){if(t){!p&&d&&function(t,e,i,r){var s=t;do{0===s.z&&(s.z=c(s.x,s.y,e,i,r)),s.prevZ=s.prev,s.nextZ=s.next,s=s.next}while(s!==t);s.prevZ.nextZ=null,s.prevZ=null,function(t){var e,i,r,s,n,a,o,h,l=1;do{for(i=t,t=null,n=null,a=0;i;){for(a++,r=i,o=0,e=0;e<l&&(o++,r=r.nextZ);e++);for(h=l;o>0||h>0&&r;)0!==o&&(0===h||!r||i.z<=r.z)?(s=i,i=i.nextZ,o--):(s=r,r=r.nextZ,h--),n?n.nextZ=s:t=s,s.prevZ=n,n=s;i=r}n.nextZ=null,l*=2}while(a>1)}(s)}(t,l,u,d);for(var f,m,_=t;t.prev!==t.next;)if(f=t.prev,m=t.next,d?a(t,l,u,d):n(t))e.push(f.i/i|0),e.push(t.i/i|0),e.push(m.i/i|0),T(t),t=m.next,_=m.next;else if((t=m)===_){p?1===p?s(t=o(r(t),e,i),e,i,l,u,d,2):2===p&&h(t,e,i,l,u,d):s(r(t),e,i,l,u,d,1);break}}}function n(t){var e=t.prev,i=t,r=t.next;if(_(e,i,r)>=0)return!1;for(var s=e.x,n=i.x,a=r.x,o=e.y,h=i.y,l=r.y,u=s<n?s<a?s:a:n<a?n:a,d=o<h?o<l?o:l:h<l?h:l,c=s>n?s>a?s:a:n>a?n:a,p=o>h?o>l?o:l:h>l?h:l,m=r.next;m!==e;){if(m.x>=u&&m.x<=c&&m.y>=d&&m.y<=p&&f(s,o,n,h,a,l,m.x,m.y)&&_(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function a(t,e,i,r){var s=t.prev,n=t,a=t.next;if(_(s,n,a)>=0)return!1;for(var o=s.x,h=n.x,l=a.x,u=s.y,d=n.y,p=a.y,m=o<h?o<l?o:l:h<l?h:l,g=u<d?u<p?u:p:d<p?d:p,y=o>h?o>l?o:l:h>l?h:l,x=u>d?u>p?u:p:d>p?d:p,v=c(m,g,e,i,r),b=c(y,x,e,i,r),w=t.prevZ,A=t.nextZ;w&&w.z>=v&&A&&A.z<=b;){if(w.x>=m&&w.x<=y&&w.y>=g&&w.y<=x&&w!==s&&w!==a&&f(o,u,h,d,l,p,w.x,w.y)&&_(w.prev,w,w.next)>=0)return!1;if(w=w.prevZ,A.x>=m&&A.x<=y&&A.y>=g&&A.y<=x&&A!==s&&A!==a&&f(o,u,h,d,l,p,A.x,A.y)&&_(A.prev,A,A.next)>=0)return!1;A=A.nextZ}for(;w&&w.z>=v;){if(w.x>=m&&w.x<=y&&w.y>=g&&w.y<=x&&w!==s&&w!==a&&f(o,u,h,d,l,p,w.x,w.y)&&_(w.prev,w,w.next)>=0)return!1;w=w.prevZ}for(;A&&A.z<=b;){if(A.x>=m&&A.x<=y&&A.y>=g&&A.y<=x&&A!==s&&A!==a&&f(o,u,h,d,l,p,A.x,A.y)&&_(A.prev,A,A.next)>=0)return!1;A=A.nextZ}return!0}function o(t,e,i){var s=t;do{var n=s.prev,a=s.next.next;!g(n,a)&&y(n,s,s.next,a)&&b(n,a)&&b(a,n)&&(e.push(n.i/i|0),e.push(s.i/i|0),e.push(a.i/i|0),T(s),T(s.next),s=t=a),s=s.next}while(s!==t);return r(s)}function h(t,e,i,n,a,o){var h=t;do{for(var l=h.next.next;l!==h.prev;){if(h.i!==l.i&&m(h,l)){var u=w(h,l);return h=r(h,h.next),u=r(u,u.next),s(h,e,i,n,a,o,0),void s(u,e,i,n,a,o,0)}l=l.next}h=h.next}while(h!==t)}function l(t,e){return t.x-e.x}function u(t,e){var i=function(t,e){var i,r=e,s=t.x,n=t.y,a=-1/0;do{if(n<=r.y&&n>=r.next.y&&r.next.y!==r.y){var o=r.x+(n-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(o<=s&&o>a&&(a=o,i=r.x<r.next.x?r:r.next,o===s))return i}r=r.next}while(r!==e);if(!i)return null;var h,l=i,u=i.x,c=i.y,p=1/0;r=i;do{s>=r.x&&r.x>=u&&s!==r.x&&f(n<c?s:a,n,u,c,n<c?a:s,n,r.x,r.y)&&(h=Math.abs(n-r.y)/(s-r.x),b(r,t)&&(h<p||h===p&&(r.x>i.x||r.x===i.x&&d(i,r)))&&(i=r,p=h)),r=r.next}while(r!==l);return i}(t,e);if(!i)return e;var s=w(i,t);return r(s,s.next),r(i,i.next)}function d(t,e){return _(t.prev,t,e.prev)<0&&_(e.next,t,t.next)<0}function c(t,e,i,r,s){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-i)*s|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-r)*s|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function p(t){var e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function f(t,e,i,r,s,n,a,o){return(s-a)*(e-o)>=(t-a)*(n-o)&&(t-a)*(r-o)>=(i-a)*(e-o)&&(i-a)*(n-o)>=(s-a)*(r-o)}function m(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&y(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(b(t,e)&&b(e,t)&&function(t,e){var i=t,r=!1,s=(t.x+e.x)/2,n=(t.y+e.y)/2;do{i.y>n!=i.next.y>n&&i.next.y!==i.y&&s<(i.next.x-i.x)*(n-i.y)/(i.next.y-i.y)+i.x&&(r=!r),i=i.next}while(i!==t);return r}(t,e)&&(_(t.prev,t,e.prev)||_(t,e.prev,e))||g(t,e)&&_(t.prev,t,t.next)>0&&_(e.prev,e,e.next)>0)}function _(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function g(t,e){return t.x===e.x&&t.y===e.y}function y(t,e,i,r){var s=v(_(t,e,i)),n=v(_(t,e,r)),a=v(_(i,r,t)),o=v(_(i,r,e));return s!==n&&a!==o||!(0!==s||!x(t,i,e))||!(0!==n||!x(t,r,e))||!(0!==a||!x(i,t,r))||!(0!==o||!x(i,e,r))}function x(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function v(t){return t>0?1:t<0?-1:0}function b(t,e){return _(t.prev,t,t.next)<0?_(t,e,t.next)>=0&&_(t,t.prev,e)>=0:_(t,e,t.prev)<0||_(t,t.next,e)<0}function w(t,e){var i=new C(t.i,t.x,t.y),r=new C(e.i,e.x,e.y),s=t.next,n=e.prev;return t.next=e,e.prev=t,i.next=s,s.prev=i,r.next=i,i.prev=r,n.next=r,r.prev=n,r}function A(t,e,i,r){var s=new C(t,e,i);return r?(s.next=r.next,s.prev=r,r.next.prev=s,r.next=s):(s.prev=s,s.next=s),s}function T(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function C(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function M(t,e,i,r){for(var s=0,n=e,a=i-r;n<i;n+=r)s+=(t[a]-t[n])*(t[n+1]+t[a+1]),a=n;return s}t.exports=e,t.exports.default=e,e.deviation=function(t,e,i,r){var s=e&&e.length,n=s?e[0]*i:t.length,a=Math.abs(M(t,0,n,i));if(s)for(var o=0,h=e.length;o<h;o++){var l=e[o]*i,u=o<h-1?e[o+1]*i:t.length;a-=Math.abs(M(t,l,u,i))}var d=0;for(o=0;o<r.length;o+=3){var c=r[o]*i,p=r[o+1]*i,f=r[o+2]*i;d+=Math.abs((t[c]-t[f])*(t[p+1]-t[c+1])-(t[c]-t[p])*(t[f+1]-t[c+1]))}return 0===a&&0===d?0:Math.abs((d-a)/a)},e.flatten=function(t){for(var e=t[0][0].length,i={vertices:[],holes:[],dimensions:e},r=0,s=0;s<t.length;s++){for(var n=0;n<t[s].length;n++)for(var a=0;a<e;a++)i.vertices.push(t[s][n][a]);s>0&&(r+=t[s-1].length,i.holes.push(r))}return i}},228:t=>{var e=Object.prototype.hasOwnProperty,i="~";function r(){}function s(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function n(t,e,r,n,a){if("function"!=typeof r)throw new TypeError("The listener must be a function");var o=new s(r,n||t,a),h=i?i+e:e;return t._events[h]?t._events[h].fn?t._events[h]=[t._events[h],o]:t._events[h].push(o):(t._events[h]=o,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new r:delete t._events[e]}function o(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(i=!1)),o.prototype.eventNames=function(){var t,r,s=[];if(0===this._eventsCount)return s;for(r in t=this._events)e.call(t,r)&&s.push(i?r.slice(1):r);return Object.getOwnPropertySymbols?s.concat(Object.getOwnPropertySymbols(t)):s},o.prototype.listeners=function(t){var e=i?i+t:t,r=this._events[e];if(!r)return[];if(r.fn)return[r.fn];for(var s=0,n=r.length,a=new Array(n);s<n;s++)a[s]=r[s].fn;return a},o.prototype.listenerCount=function(t){var e=i?i+t:t,r=this._events[e];return r?r.fn?1:r.length:0},o.prototype.emit=function(t,e,r,s,n,a){var o=i?i+t:t;if(!this._events[o])return!1;var h,l,u=this._events[o],d=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),d){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,r),!0;case 4:return u.fn.call(u.context,e,r,s),!0;case 5:return u.fn.call(u.context,e,r,s,n),!0;case 6:return u.fn.call(u.context,e,r,s,n,a),!0}for(l=1,h=new Array(d-1);l<d;l++)h[l-1]=arguments[l];u.fn.apply(u.context,h)}else{var c,p=u.length;for(l=0;l<p;l++)switch(u[l].once&&this.removeListener(t,u[l].fn,void 0,!0),d){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,e);break;case 3:u[l].fn.call(u[l].context,e,r);break;case 4:u[l].fn.call(u[l].context,e,r,s);break;default:if(!h)for(c=1,h=new Array(d-1);c<d;c++)h[c-1]=arguments[c];u[l].fn.apply(u[l].context,h)}}return!0},o.prototype.on=function(t,e,i){return n(this,t,e,i,!1)},o.prototype.once=function(t,e,i){return n(this,t,e,i,!0)},o.prototype.removeListener=function(t,e,r,s){var n=i?i+t:t;if(!this._events[n])return this;if(!e)return a(this,n),this;var o=this._events[n];if(o.fn)o.fn!==e||s&&!o.once||r&&o.context!==r||a(this,n);else{for(var h=0,l=[],u=o.length;h<u;h++)(o[h].fn!==e||s&&!o[h].once||r&&o[h].context!==r)&&l.push(o[h]);l.length?this._events[n]=1===l.length?l[0]:l:a(this,n)}return this},o.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new r,this._eventsCount=0),this},o.prototype.off=o.prototype.removeListener,o.prototype.addListener=o.prototype.on,o.prefixed=i,o.EventEmitter=o,t.exports=o},4486:(t,e,i)=>{i.d(e,{A:()=>r});const r=i(228)},1979:(t,e,i)=>{i.d(e,{l:()=>n});var r=i(268),s=i(2406);const n=new class{constructor(){this._parsers=[],this._cache=new Map,this._cacheMap=new Map}reset(){this._cacheMap.clear(),this._cache.clear()}has(t){return this._cache.has(t)}get(t){const e=this._cache.get(t);return e||(0,r.R)(`[Assets] Asset id ${t} was not found in the Cache`),e}set(t,e){const i=(0,s.z)(t);let n;for(let t=0;t<this.parsers.length;t++){const r=this.parsers[t];if(r.test(e)){n=r.getCacheableAssets(i,e);break}}const a=new Map(Object.entries(n||{}));n||i.forEach((t=>{a.set(t,e)}));const o=[...a.keys()],h={cacheKeys:o,keys:i};i.forEach((t=>{this._cacheMap.set(t,h)})),o.forEach((t=>{const i=n?n[t]:e;this._cache.has(t)&&this._cache.get(t)!==i&&(0,r.R)("[Cache] already has key:",t),this._cache.set(t,a.get(t))}))}remove(t){if(!this._cacheMap.has(t))return void(0,r.R)(`[Assets] Asset id ${t} was not found in the Cache`);const e=this._cacheMap.get(t);e.cacheKeys.forEach((t=>{this._cache.delete(t)})),e.keys.forEach((t=>{this._cacheMap.delete(t)}))}get parsers(){return this._parsers}}},2406:(t,e,i)=>{i.d(e,{z:()=>r});const r=(t,e,i=!1)=>(Array.isArray(t)||(t=[t]),e?t.map((t=>"string"==typeof t||i?e(t):t)):t)},2577:(t,e,i)=>{i.d(e,{Q:()=>R});var r={grad:.9,turn:360,rad:360/(2*Math.PI)},s=function(t){return"string"==typeof t?t.length>0:"number"==typeof t},n=function(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=Math.pow(10,e)),Math.round(i*t)/i+0},a=function(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=1),t>i?i:t>e?t:e},o=function(t){return(t=isFinite(t)?t%360:0)>0?t:t+360},h=function(t){return{r:a(t.r,0,255),g:a(t.g,0,255),b:a(t.b,0,255),a:a(t.a)}},l=function(t){return{r:n(t.r),g:n(t.g),b:n(t.b),a:n(t.a,3)}},u=/^#([0-9a-f]{3,8})$/i,d=function(t){var e=t.toString(16);return e.length<2?"0"+e:e},c=function(t){var e=t.r,i=t.g,r=t.b,s=t.a,n=Math.max(e,i,r),a=n-Math.min(e,i,r),o=a?n===e?(i-r)/a:n===i?2+(r-e)/a:4+(e-i)/a:0;return{h:60*(o<0?o+6:o),s:n?a/n*100:0,v:n/255*100,a:s}},p=function(t){var e=t.h,i=t.s,r=t.v,s=t.a;e=e/360*6,i/=100,r/=100;var n=Math.floor(e),a=r*(1-i),o=r*(1-(e-n)*i),h=r*(1-(1-e+n)*i),l=n%6;return{r:255*[r,o,a,a,h,r][l],g:255*[h,r,r,o,a,a][l],b:255*[a,a,h,r,r,o][l],a:s}},f=function(t){return{h:o(t.h),s:a(t.s,0,100),l:a(t.l,0,100),a:a(t.a)}},m=function(t){return{h:n(t.h),s:n(t.s),l:n(t.l),a:n(t.a,3)}},_=function(t){return p((i=(e=t).s,{h:e.h,s:(i*=((r=e.l)<50?r:100-r)/100)>0?2*i/(r+i)*100:0,v:r+i,a:e.a}));var e,i,r},g=function(t){return{h:(e=c(t)).h,s:(s=(200-(i=e.s))*(r=e.v)/100)>0&&s<200?i*r/100/(s<=100?s:200-s)*100:0,l:s/2,a:e.a};var e,i,r,s},y=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,x=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,v=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,b=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,w={string:[[function(t){var e=u.exec(t);return e?(t=e[1]).length<=4?{r:parseInt(t[0]+t[0],16),g:parseInt(t[1]+t[1],16),b:parseInt(t[2]+t[2],16),a:4===t.length?n(parseInt(t[3]+t[3],16)/255,2):1}:6===t.length||8===t.length?{r:parseInt(t.substr(0,2),16),g:parseInt(t.substr(2,2),16),b:parseInt(t.substr(4,2),16),a:8===t.length?n(parseInt(t.substr(6,2),16)/255,2):1}:null:null},"hex"],[function(t){var e=v.exec(t)||b.exec(t);return e?e[2]!==e[4]||e[4]!==e[6]?null:h({r:Number(e[1])/(e[2]?100/255:1),g:Number(e[3])/(e[4]?100/255:1),b:Number(e[5])/(e[6]?100/255:1),a:void 0===e[7]?1:Number(e[7])/(e[8]?100:1)}):null},"rgb"],[function(t){var e=y.exec(t)||x.exec(t);if(!e)return null;var i,s,n=f({h:(i=e[1],s=e[2],void 0===s&&(s="deg"),Number(i)*(r[s]||1)),s:Number(e[3]),l:Number(e[4]),a:void 0===e[5]?1:Number(e[5])/(e[6]?100:1)});return _(n)},"hsl"]],object:[[function(t){var e=t.r,i=t.g,r=t.b,n=t.a,a=void 0===n?1:n;return s(e)&&s(i)&&s(r)?h({r:Number(e),g:Number(i),b:Number(r),a:Number(a)}):null},"rgb"],[function(t){var e=t.h,i=t.s,r=t.l,n=t.a,a=void 0===n?1:n;if(!s(e)||!s(i)||!s(r))return null;var o=f({h:Number(e),s:Number(i),l:Number(r),a:Number(a)});return _(o)},"hsl"],[function(t){var e=t.h,i=t.s,r=t.v,n=t.a,h=void 0===n?1:n;if(!s(e)||!s(i)||!s(r))return null;var l=function(t){return{h:o(t.h),s:a(t.s,0,100),v:a(t.v,0,100),a:a(t.a)}}({h:Number(e),s:Number(i),v:Number(r),a:Number(h)});return p(l)},"hsv"]]},A=function(t,e){for(var i=0;i<e.length;i++){var r=e[i][0](t);if(r)return[r,e[i][1]]}return[null,void 0]},T=function(t,e){var i=g(t);return{h:i.h,s:a(i.s+100*e,0,100),l:i.l,a:i.a}},C=function(t){return(299*t.r+587*t.g+114*t.b)/1e3/255},M=function(t,e){var i=g(t);return{h:i.h,s:i.s,l:a(i.l+100*e,0,100),a:i.a}},k=function(){function t(t){this.parsed=function(t){return"string"==typeof t?A(t.trim(),w.string):"object"==typeof t&&null!==t?A(t,w.object):[null,void 0]}(t)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return t.prototype.isValid=function(){return null!==this.parsed},t.prototype.brightness=function(){return n(C(this.rgba),2)},t.prototype.isDark=function(){return C(this.rgba)<.5},t.prototype.isLight=function(){return C(this.rgba)>=.5},t.prototype.toHex=function(){return e=(t=l(this.rgba)).r,i=t.g,r=t.b,a=(s=t.a)<1?d(n(255*s)):"","#"+d(e)+d(i)+d(r)+a;var t,e,i,r,s,a},t.prototype.toRgb=function(){return l(this.rgba)},t.prototype.toRgbString=function(){return e=(t=l(this.rgba)).r,i=t.g,r=t.b,(s=t.a)<1?"rgba("+e+", "+i+", "+r+", "+s+")":"rgb("+e+", "+i+", "+r+")";var t,e,i,r,s},t.prototype.toHsl=function(){return m(g(this.rgba))},t.prototype.toHslString=function(){return e=(t=m(g(this.rgba))).h,i=t.s,r=t.l,(s=t.a)<1?"hsla("+e+", "+i+"%, "+r+"%, "+s+")":"hsl("+e+", "+i+"%, "+r+"%)";var t,e,i,r,s},t.prototype.toHsv=function(){return t=c(this.rgba),{h:n(t.h),s:n(t.s),v:n(t.v),a:n(t.a,3)};var t},t.prototype.invert=function(){return E({r:255-(t=this.rgba).r,g:255-t.g,b:255-t.b,a:t.a});var t},t.prototype.saturate=function(t){return void 0===t&&(t=.1),E(T(this.rgba,t))},t.prototype.desaturate=function(t){return void 0===t&&(t=.1),E(T(this.rgba,-t))},t.prototype.grayscale=function(){return E(T(this.rgba,-1))},t.prototype.lighten=function(t){return void 0===t&&(t=.1),E(M(this.rgba,t))},t.prototype.darken=function(t){return void 0===t&&(t=.1),E(M(this.rgba,-t))},t.prototype.rotate=function(t){return void 0===t&&(t=15),this.hue(this.hue()+t)},t.prototype.alpha=function(t){return"number"==typeof t?E({r:(e=this.rgba).r,g:e.g,b:e.b,a:t}):n(this.rgba.a,3);var e},t.prototype.hue=function(t){var e=g(this.rgba);return"number"==typeof t?E({h:t,s:e.s,l:e.l,a:e.a}):n(e.h)},t.prototype.isEqual=function(t){return this.toHex()===E(t).toHex()},t}(),E=function(t){return t instanceof k?t:new k(t)},P=[];!function(t){t.forEach((function(t){P.indexOf(t)<0&&(t(k,w),P.push(t))}))}([function(t,e){var i={white:"#ffffff",bisque:"#ffe4c4",blue:"#0000ff",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",antiquewhite:"#faebd7",aqua:"#00ffff",azure:"#f0ffff",whitesmoke:"#f5f5f5",papayawhip:"#ffefd5",plum:"#dda0dd",blanchedalmond:"#ffebcd",black:"#000000",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",cornsilk:"#fff8dc",cornflowerblue:"#6495ed",burlywood:"#deb887",aquamarine:"#7fffd4",beige:"#f5f5dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkkhaki:"#bdb76b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",peachpuff:"#ffdab9",darkmagenta:"#8b008b",darkred:"#8b0000",darkorchid:"#9932cc",darkorange:"#ff8c00",darkslateblue:"#483d8b",gray:"#808080",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",deeppink:"#ff1493",deepskyblue:"#00bfff",wheat:"#f5deb3",firebrick:"#b22222",floralwhite:"#fffaf0",ghostwhite:"#f8f8ff",darkviolet:"#9400d3",magenta:"#ff00ff",green:"#008000",dodgerblue:"#1e90ff",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",blueviolet:"#8a2be2",forestgreen:"#228b22",lawngreen:"#7cfc00",indianred:"#cd5c5c",indigo:"#4b0082",fuchsia:"#ff00ff",brown:"#a52a2a",maroon:"#800000",mediumblue:"#0000cd",lightcoral:"#f08080",darkturquoise:"#00ced1",lightcyan:"#e0ffff",ivory:"#fffff0",lightyellow:"#ffffe0",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",linen:"#faf0e6",mediumaquamarine:"#66cdaa",lemonchiffon:"#fffacd",lime:"#00ff00",khaki:"#f0e68c",mediumseagreen:"#3cb371",limegreen:"#32cd32",mediumspringgreen:"#00fa9a",lightskyblue:"#87cefa",lightblue:"#add8e6",midnightblue:"#191970",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",mintcream:"#f5fffa",lightslategray:"#778899",lightslategrey:"#778899",navajowhite:"#ffdead",navy:"#000080",mediumvioletred:"#c71585",powderblue:"#b0e0e6",palegoldenrod:"#eee8aa",oldlace:"#fdf5e6",paleturquoise:"#afeeee",mediumturquoise:"#48d1cc",mediumorchid:"#ba55d3",rebeccapurple:"#663399",lightsteelblue:"#b0c4de",mediumslateblue:"#7b68ee",thistle:"#d8bfd8",tan:"#d2b48c",orchid:"#da70d6",mediumpurple:"#9370db",purple:"#800080",pink:"#ffc0cb",skyblue:"#87ceeb",springgreen:"#00ff7f",palegreen:"#98fb98",red:"#ff0000",yellow:"#ffff00",slateblue:"#6a5acd",lavenderblush:"#fff0f5",peru:"#cd853f",palevioletred:"#db7093",violet:"#ee82ee",teal:"#008080",slategray:"#708090",slategrey:"#708090",aliceblue:"#f0f8ff",darkseagreen:"#8fbc8f",darkolivegreen:"#556b2f",greenyellow:"#adff2f",seagreen:"#2e8b57",seashell:"#fff5ee",tomato:"#ff6347",silver:"#c0c0c0",sienna:"#a0522d",lavender:"#e6e6fa",lightgreen:"#90ee90",orange:"#ffa500",orangered:"#ff4500",steelblue:"#4682b4",royalblue:"#4169e1",turquoise:"#40e0d0",yellowgreen:"#9acd32",salmon:"#fa8072",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",darksalmon:"#e9967a",lightgoldenrodyellow:"#fafad2",snow:"#fffafa",lightgrey:"#d3d3d3",lightgray:"#d3d3d3",dimgray:"#696969",dimgrey:"#696969",olivedrab:"#6b8e23",olive:"#808000"},r={};for(var s in i)r[i[s]]=s;var n={};t.prototype.toName=function(e){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return"transparent";var s,a,o=r[this.toHex()];if(o)return o;if(null==e?void 0:e.closest){var h=this.toRgb(),l=1/0,u="black";if(!n.length)for(var d in i)n[d]=new t(i[d]).toRgb();for(var c in i){var p=(s=h,a=n[c],Math.pow(s.r-a.r,2)+Math.pow(s.g-a.g,2)+Math.pow(s.b-a.b,2));p<l&&(l=p,u=c)}return u}},e.string.push([function(e){var r=e.toLowerCase(),s="transparent"===r?"#0000":i[r];return s?new t(s).toRgb():null},"name"])}]);const S=class t{constructor(t=16777215){this._value=null,this._components=new Float32Array(4),this._components.fill(1),this._int=16777215,this.value=t}get red(){return this._components[0]}get green(){return this._components[1]}get blue(){return this._components[2]}get alpha(){return this._components[3]}setValue(t){return this.value=t,this}set value(e){if(e instanceof t)this._value=this._cloneSource(e._value),this._int=e._int,this._components.set(e._components);else{if(null===e)throw new Error("Cannot set Color#value to null");null!==this._value&&this._isSourceEqual(this._value,e)||(this._value=this._cloneSource(e),this._normalize(this._value))}}get value(){return this._value}_cloneSource(t){return"string"==typeof t||"number"==typeof t||t instanceof Number||null===t?t:Array.isArray(t)||ArrayBuffer.isView(t)?t.slice(0):"object"==typeof t&&null!==t?{...t}:t}_isSourceEqual(t,e){const i=typeof t;if(i!==typeof e)return!1;if("number"===i||"string"===i||t instanceof Number)return t===e;if(Array.isArray(t)&&Array.isArray(e)||ArrayBuffer.isView(t)&&ArrayBuffer.isView(e))return t.length===e.length&&t.every(((t,i)=>t===e[i]));if(null!==t&&null!==e){const i=Object.keys(t),r=Object.keys(e);return i.length===r.length&&i.every((i=>t[i]===e[i]))}return t===e}toRgba(){const[t,e,i,r]=this._components;return{r:t,g:e,b:i,a:r}}toRgb(){const[t,e,i]=this._components;return{r:t,g:e,b:i}}toRgbaString(){const[t,e,i]=this.toUint8RgbArray();return`rgba(${t},${e},${i},${this.alpha})`}toUint8RgbArray(t){const[e,i,r]=this._components;return this._arrayRgb||(this._arrayRgb=[]),t||(t=this._arrayRgb),t[0]=Math.round(255*e),t[1]=Math.round(255*i),t[2]=Math.round(255*r),t}toArray(t){this._arrayRgba||(this._arrayRgba=[]),t||(t=this._arrayRgba);const[e,i,r,s]=this._components;return t[0]=e,t[1]=i,t[2]=r,t[3]=s,t}toRgbArray(t){this._arrayRgb||(this._arrayRgb=[]),t||(t=this._arrayRgb);const[e,i,r]=this._components;return t[0]=e,t[1]=i,t[2]=r,t}toNumber(){return this._int}toBgrNumber(){const[t,e,i]=this.toUint8RgbArray();return(i<<16)+(e<<8)+t}toLittleEndianNumber(){const t=this._int;return(t>>16)+(65280&t)+((255&t)<<16)}multiply(e){const[i,r,s,n]=t._temp.setValue(e)._components;return this._components[0]*=i,this._components[1]*=r,this._components[2]*=s,this._components[3]*=n,this._refreshInt(),this._value=null,this}premultiply(t,e=!0){return e&&(this._components[0]*=t,this._components[1]*=t,this._components[2]*=t),this._components[3]=t,this._refreshInt(),this._value=null,this}toPremultiplied(t,e=!0){if(1===t)return(255<<24)+this._int;if(0===t)return e?0:this._int;let i=this._int>>16&255,r=this._int>>8&255,s=255&this._int;return e&&(i=i*t+.5|0,r=r*t+.5|0,s=s*t+.5|0),(255*t<<24)+(i<<16)+(r<<8)+s}toHex(){const t=this._int.toString(16);return`#${"000000".substring(0,6-t.length)+t}`}toHexa(){const t=Math.round(255*this._components[3]).toString(16);return this.toHex()+"00".substring(0,2-t.length)+t}setAlpha(t){return this._components[3]=this._clamp(t),this}_normalize(e){let i,r,s,n;if(("number"==typeof e||e instanceof Number)&&e>=0&&e<=16777215)i=(e>>16&255)/255,r=(e>>8&255)/255,s=(255&e)/255,n=1;else if((Array.isArray(e)||e instanceof Float32Array)&&e.length>=3&&e.length<=4)e=this._clamp(e),[i,r,s,n=1]=e;else if((e instanceof Uint8Array||e instanceof Uint8ClampedArray)&&e.length>=3&&e.length<=4)e=this._clamp(e,0,255),[i,r,s,n=255]=e,i/=255,r/=255,s/=255,n/=255;else if("string"==typeof e||"object"==typeof e){if("string"==typeof e){const i=t.HEX_PATTERN.exec(e);i&&(e=`#${i[2]}`)}const a=E(e);a.isValid()&&(({r:i,g:r,b:s,a:n}=a.rgba),i/=255,r/=255,s/=255)}if(void 0===i)throw new Error(`Unable to convert color ${e}`);this._components[0]=i,this._components[1]=r,this._components[2]=s,this._components[3]=n,this._refreshInt()}_refreshInt(){this._clamp(this._components);const[t,e,i]=this._components;this._int=(255*t<<16)+(255*e<<8)+(255*i|0)}_clamp(t,e=0,i=1){return"number"==typeof t?Math.min(Math.max(t,e),i):(t.forEach(((r,s)=>{t[s]=Math.min(Math.max(r,e),i)})),t)}static isColorLike(e){return"number"==typeof e||"string"==typeof e||e instanceof Number||e instanceof t||Array.isArray(e)||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Float32Array||void 0!==e.r&&void 0!==e.g&&void 0!==e.b||void 0!==e.r&&void 0!==e.g&&void 0!==e.b&&void 0!==e.a||void 0!==e.h&&void 0!==e.s&&void 0!==e.l||void 0!==e.h&&void 0!==e.s&&void 0!==e.l&&void 0!==e.a||void 0!==e.h&&void 0!==e.s&&void 0!==e.v||void 0!==e.h&&void 0!==e.s&&void 0!==e.v&&void 0!==e.a}};S.shared=new S,S._temp=new S,S.HEX_PATTERN=/^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;let R=S},1761:(t,e,i)=>{i.d(e,{e:()=>s});let r={createCanvas:(t,e)=>{const i=document.createElement("canvas");return i.width=t,i.height=e,i},getCanvasRenderingContext2D:()=>CanvasRenderingContext2D,getWebGLRenderingContext:()=>WebGLRenderingContext,getNavigator:()=>navigator,getBaseUrl:()=>document.baseURI??window.location.href,getFontFaceSet:()=>document.fonts,fetch:(t,e)=>fetch(t,e),parseXML:t=>(new DOMParser).parseFromString(t,"text/xml")};const s={get:()=>r,set(t){r=t}}},8507:(t,e,i)=>{i.d(e,{Ag:()=>r,XO:()=>a});var r=(t=>(t.Application="application",t.WebGLPipes="webgl-pipes",t.WebGLPipesAdaptor="webgl-pipes-adaptor",t.WebGLSystem="webgl-system",t.WebGPUPipes="webgpu-pipes",t.WebGPUPipesAdaptor="webgpu-pipes-adaptor",t.WebGPUSystem="webgpu-system",t.CanvasSystem="canvas-system",t.CanvasPipesAdaptor="canvas-pipes-adaptor",t.CanvasPipes="canvas-pipes",t.Asset="asset",t.LoadParser="load-parser",t.ResolveParser="resolve-parser",t.CacheParser="cache-parser",t.DetectionParser="detection-parser",t.MaskEffect="mask-effect",t.BlendMode="blend-mode",t.TextureSource="texture-source",t.Environment="environment",t.ShapeBuilder="shape-builder",t.Batcher="batcher",t))(r||{});const s=t=>{if("function"==typeof t||"object"==typeof t&&t.extension){if(!t.extension)throw new Error("Extension class must have an extension object");t={..."object"!=typeof t.extension?{type:t.extension}:t.extension,ref:t}}if("object"!=typeof t)throw new Error("Invalid extension type");return"string"==typeof(t={...t}).type&&(t.type=[t.type]),t},n=(t,e)=>s(t).priority??e,a={_addHandlers:{},_removeHandlers:{},_queue:{},remove(...t){return t.map(s).forEach((t=>{t.type.forEach((e=>this._removeHandlers[e]?.(t)))})),this},add(...t){return t.map(s).forEach((t=>{t.type.forEach((e=>{const i=this._addHandlers,r=this._queue;i[e]?i[e]?.(t):(r[e]=r[e]||[],r[e]?.push(t))}))})),this},handle(t,e,i){const r=this._addHandlers,s=this._removeHandlers;if(r[t]||s[t])throw new Error(`Extension type ${t} already has a handler`);r[t]=e,s[t]=i;const n=this._queue;return n[t]&&(n[t]?.forEach((t=>e(t))),delete n[t]),this},handleByMap(t,e){return this.handle(t,(t=>{t.name&&(e[t.name]=t.ref)}),(t=>{t.name&&delete e[t.name]}))},handleByNamedList(t,e,i=-1){return this.handle(t,(t=>{e.findIndex((e=>e.name===t.name))>=0||(e.push({name:t.name,value:t.ref}),e.sort(((t,e)=>n(e.value,i)-n(t.value,i))))}),(t=>{const i=e.findIndex((e=>e.name===t.name));-1!==i&&e.splice(i,1)}))},handleByList(t,e,i=-1){return this.handle(t,(t=>{e.includes(t.ref)||(e.push(t.ref),e.sort(((t,e)=>n(e,i)-n(t,i))))}),(t=>{const i=e.indexOf(t.ref);-1!==i&&e.splice(i,1)}))}}},9049:(t,e,i)=>{i.d(e,{a:()=>r});class r{constructor(){this.pipe="filter",this.priority=1}destroy(){for(let t=0;t<this.filters.length;t++)this.filters[t].destroy();this.filters=null,this.filterArea=null}}},9313:(t,e,i)=>{i.d(e,{u:()=>n});var r=i(1652),s=i(5101);class n{constructor(t=1,e=0,i=0,r=1,s=0,n=0){this.array=null,this.a=t,this.b=e,this.c=i,this.d=r,this.tx=s,this.ty=n}fromArray(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]}set(t,e,i,r,s,n){return this.a=t,this.b=e,this.c=i,this.d=r,this.tx=s,this.ty=n,this}toArray(t,e){this.array||(this.array=new Float32Array(9));const i=e||this.array;return t?(i[0]=this.a,i[1]=this.b,i[2]=0,i[3]=this.c,i[4]=this.d,i[5]=0,i[6]=this.tx,i[7]=this.ty,i[8]=1):(i[0]=this.a,i[1]=this.c,i[2]=this.tx,i[3]=this.b,i[4]=this.d,i[5]=this.ty,i[6]=0,i[7]=0,i[8]=1),i}apply(t,e){e=e||new s.b;const i=t.x,r=t.y;return e.x=this.a*i+this.c*r+this.tx,e.y=this.b*i+this.d*r+this.ty,e}applyInverse(t,e){e=e||new s.b;const i=this.a,r=this.b,n=this.c,a=this.d,o=this.tx,h=this.ty,l=1/(i*a+n*-r),u=t.x,d=t.y;return e.x=a*l*u+-n*l*d+(h*n-o*a)*l,e.y=i*l*d+-r*l*u+(-h*i+o*r)*l,e}translate(t,e){return this.tx+=t,this.ty+=e,this}scale(t,e){return this.a*=t,this.d*=e,this.c*=t,this.b*=e,this.tx*=t,this.ty*=e,this}rotate(t){const e=Math.cos(t),i=Math.sin(t),r=this.a,s=this.c,n=this.tx;return this.a=r*e-this.b*i,this.b=r*i+this.b*e,this.c=s*e-this.d*i,this.d=s*i+this.d*e,this.tx=n*e-this.ty*i,this.ty=n*i+this.ty*e,this}append(t){const e=this.a,i=this.b,r=this.c,s=this.d;return this.a=t.a*e+t.b*r,this.b=t.a*i+t.b*s,this.c=t.c*e+t.d*r,this.d=t.c*i+t.d*s,this.tx=t.tx*e+t.ty*r+this.tx,this.ty=t.tx*i+t.ty*s+this.ty,this}appendFrom(t,e){const i=t.a,r=t.b,s=t.c,n=t.d,a=t.tx,o=t.ty,h=e.a,l=e.b,u=e.c,d=e.d;return this.a=i*h+r*u,this.b=i*l+r*d,this.c=s*h+n*u,this.d=s*l+n*d,this.tx=a*h+o*u+e.tx,this.ty=a*l+o*d+e.ty,this}setTransform(t,e,i,r,s,n,a,o,h){return this.a=Math.cos(a+h)*s,this.b=Math.sin(a+h)*s,this.c=-Math.sin(a-o)*n,this.d=Math.cos(a-o)*n,this.tx=t-(i*this.a+r*this.c),this.ty=e-(i*this.b+r*this.d),this}prepend(t){const e=this.tx;if(1!==t.a||0!==t.b||0!==t.c||1!==t.d){const e=this.a,i=this.c;this.a=e*t.a+this.b*t.c,this.b=e*t.b+this.b*t.d,this.c=i*t.a+this.d*t.c,this.d=i*t.b+this.d*t.d}return this.tx=e*t.a+this.ty*t.c+t.tx,this.ty=e*t.b+this.ty*t.d+t.ty,this}decompose(t){const e=this.a,i=this.b,s=this.c,n=this.d,a=t.pivot,o=-Math.atan2(-s,n),h=Math.atan2(i,e),l=Math.abs(o+h);return l<1e-5||Math.abs(r.TO-l)<1e-5?(t.rotation=h,t.skew.x=t.skew.y=0):(t.rotation=0,t.skew.x=o,t.skew.y=h),t.scale.x=Math.sqrt(e*e+i*i),t.scale.y=Math.sqrt(s*s+n*n),t.position.x=this.tx+(a.x*e+a.y*s),t.position.y=this.ty+(a.x*i+a.y*n),t}invert(){const t=this.a,e=this.b,i=this.c,r=this.d,s=this.tx,n=t*r-e*i;return this.a=r/n,this.b=-e/n,this.c=-i/n,this.d=t/n,this.tx=(i*this.ty-r*s)/n,this.ty=-(t*this.ty-e*s)/n,this}isIdentity(){return 1===this.a&&0===this.b&&0===this.c&&1===this.d&&0===this.tx&&0===this.ty}identity(){return this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0,this}clone(){const t=new n;return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t}copyTo(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t}copyFrom(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this}equals(t){return t.a===this.a&&t.b===this.b&&t.c===this.c&&t.d===this.d&&t.tx===this.tx&&t.ty===this.ty}toString(){return`[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`}static get IDENTITY(){return o.identity()}static get shared(){return a.identity()}}const a=new n,o=new n},1652:(t,e,i)=>{i.d(e,{TO:()=>r,Td:()=>n,bO:()=>s});const r=2*Math.PI,s=180/Math.PI,n=Math.PI/180},9939:(t,e,i)=>{function r(t){return t+=0===t?1:0,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,1+(t|=t>>>16)}function s(t){return!(t&t-1||!t)}i.d(e,{U5:()=>r,f3:()=>s})},2812:(t,e,i)=>{i.d(e,{o:()=>r});class r{constructor(t,e,i){this._x=e||0,this._y=i||0,this._observer=t}clone(t){return new r(t??this._observer,this._x,this._y)}set(t=0,e=t){return this._x===t&&this._y===e||(this._x=t,this._y=e,this._observer._onUpdate(this)),this}copyFrom(t){return this._x===t.x&&this._y===t.y||(this._x=t.x,this._y=t.y,this._observer._onUpdate(this)),this}copyTo(t){return t.set(this._x,this._y),t}equals(t){return t.x===this._x&&t.y===this._y}toString(){return`[pixi.js/math:ObservablePoint x=0 y=0 scope=${this._observer}]`}get x(){return this._x}set x(t){this._x!==t&&(this._x=t,this._observer._onUpdate(this))}get y(){return this._y}set y(t){this._y!==t&&(this._y=t,this._observer._onUpdate(this))}}},5101:(t,e,i)=>{i.d(e,{b:()=>r});class r{constructor(t=0,e=0){this.x=0,this.y=0,this.x=t,this.y=e}clone(){return new r(this.x,this.y)}copyFrom(t){return this.set(t.x,t.y),this}copyTo(t){return t.set(this.x,this.y),t}equals(t){return t.x===this.x&&t.y===this.y}set(t=0,e=t){return this.x=t,this.y=e,this}toString(){return`[pixi.js/math:Point x=${this.x} y=${this.y}]`}static get shared(){return s.x=0,s.y=0,s}}const s=new r},9252:(t,e,i)=>{i.d(e,{M:()=>n});var r=i(5101);const s=[new r.b,new r.b,new r.b,new r.b];class n{constructor(t=0,e=0,i=0,r=0){this.type="rectangle",this.x=Number(t),this.y=Number(e),this.width=Number(i),this.height=Number(r)}get left(){return this.x}get right(){return this.x+this.width}get top(){return this.y}get bottom(){return this.y+this.height}isEmpty(){return this.left===this.right||this.top===this.bottom}static get EMPTY(){return new n(0,0,0,0)}clone(){return new n(this.x,this.y,this.width,this.height)}copyFromBounds(t){return this.x=t.minX,this.y=t.minY,this.width=t.maxX-t.minX,this.height=t.maxY-t.minY,this}copyFrom(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this}copyTo(t){return t.copyFrom(this),t}contains(t,e){return!(this.width<=0||this.height<=0)&&t>=this.x&&t<this.x+this.width&&e>=this.y&&e<this.y+this.height}strokeContains(t,e,i,r=.5){const{width:s,height:n}=this;if(s<=0||n<=0)return!1;const a=this.x,o=this.y,h=i*(1-r),l=i-h;return t>=a-h&&t<=a+s+h&&e>=o-h&&e<=o+n+h&&!(t>a+l&&t<a+s-l&&e>o+l&&e<o+n-l)}intersects(t,e){if(!e){const e=this.x<t.x?t.x:this.x;if((this.right>t.right?t.right:this.right)<=e)return!1;const i=this.y<t.y?t.y:this.y;return(this.bottom>t.bottom?t.bottom:this.bottom)>i}const i=this.left,r=this.right,n=this.top,a=this.bottom;if(r<=i||a<=n)return!1;const o=s[0].set(t.left,t.top),h=s[1].set(t.left,t.bottom),l=s[2].set(t.right,t.top),u=s[3].set(t.right,t.bottom);if(l.x<=o.x||h.y<=o.y)return!1;const d=Math.sign(e.a*e.d-e.b*e.c);if(0===d)return!1;if(e.apply(o,o),e.apply(h,h),e.apply(l,l),e.apply(u,u),Math.max(o.x,h.x,l.x,u.x)<=i||Math.min(o.x,h.x,l.x,u.x)>=r||Math.max(o.y,h.y,l.y,u.y)<=n||Math.min(o.y,h.y,l.y,u.y)>=a)return!1;const c=d*(h.y-o.y),p=d*(o.x-h.x),f=c*i+p*n,m=c*r+p*n,_=c*i+p*a,g=c*r+p*a;if(Math.max(f,m,_,g)<=c*o.x+p*o.y||Math.min(f,m,_,g)>=c*u.x+p*u.y)return!1;const y=d*(o.y-l.y),x=d*(l.x-o.x),v=y*i+x*n,b=y*r+x*n,w=y*i+x*a,A=y*r+x*a;return!(Math.max(v,b,w,A)<=y*o.x+x*o.y||Math.min(v,b,w,A)>=y*u.x+x*u.y)}pad(t=0,e=t){return this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e,this}fit(t){const e=Math.max(this.x,t.x),i=Math.min(this.x+this.width,t.x+t.width),r=Math.max(this.y,t.y),s=Math.min(this.y+this.height,t.y+t.height);return this.x=e,this.width=Math.max(i-e,0),this.y=r,this.height=Math.max(s-r,0),this}ceil(t=1,e=.001){const i=Math.ceil((this.x+this.width-e)*t)/t,r=Math.ceil((this.y+this.height-e)*t)/t;return this.x=Math.floor((this.x+e)*t)/t,this.y=Math.floor((this.y+e)*t)/t,this.width=i-this.x,this.height=r-this.y,this}enlarge(t){const e=Math.min(this.x,t.x),i=Math.max(this.x+this.width,t.x+t.width),r=Math.min(this.y,t.y),s=Math.max(this.y+this.height,t.y+t.height);return this.x=e,this.width=i-e,this.y=r,this.height=s-r,this}getBounds(t){return t||(t=new n),t.copyFrom(this),t}toString(){return`[pixi.js/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`}}},5753:(t,e,i)=>{var r=i(8507),s=i(6844),n=i(9636),a=i(9443);const o=new n.c;function h(t,e,i){const r=o;t.measurable=!0,(0,a.fB)(t,i,r),e.addBoundsMask(r),t.measurable=!1}var l=i(7269),u=i(2208),d=i(268);function c(t,e,i){const r=u.o.get();t.measurable=!0;const s=u.u.get().identity(),n=p(t,i,s);(0,l.n)(t,r,n),t.measurable=!1,e.addBoundsMask(r),u.u.return(s),u.o.return(r)}function p(t,e,i){return t?(t!==e&&(p(t.parent,e,i),t.updateLocalTransform(),i.append(t.localTransform)),i):((0,d.R)("Mask bounds, renderable is not inside the root container"),i)}class f{constructor(t){this.priority=0,this.inverse=!1,this.pipe="alphaMask",t?.mask&&this.init(t.mask)}init(t){this.mask=t,this.renderMaskToTexture=!(t instanceof s.k),this.mask.renderable=this.renderMaskToTexture,this.mask.includeInBuild=!this.renderMaskToTexture,this.mask.measurable=!1}reset(){this.mask.measurable=!0,this.mask=null}addBounds(t,e){this.inverse||h(this.mask,t,e)}addLocalBounds(t,e){c(this.mask,t,e)}containsPoint(t,e){return e(this.mask,t)}destroy(){this.reset()}static test(t){return t instanceof s.k}}f.extension=r.Ag.MaskEffect;class m{constructor(t){this.priority=0,this.pipe="colorMask",t?.mask&&this.init(t.mask)}init(t){this.mask=t}destroy(){}static test(t){return"number"==typeof t}}m.extension=r.Ag.MaskEffect;var _=i(5819);class g{constructor(t){this.priority=0,this.pipe="stencilMask",t?.mask&&this.init(t.mask)}init(t){this.mask=t,this.mask.includeInBuild=!1,this.mask.measurable=!1}reset(){this.mask.measurable=!0,this.mask.includeInBuild=!0,this.mask=null}addBounds(t,e){h(this.mask,t,e)}addLocalBounds(t,e){c(this.mask,t,e)}containsPoint(t,e){return e(this.mask,t)}destroy(){this.reset()}static test(t){return t instanceof _.mc}}g.extension=r.Ag.MaskEffect;var y=i(4195),x=i(4884),v=i(8293),b=i(7309);let w;var A=i(1285);const T=class t extends A.v{constructor(e){super(e),this.isReady=!1,this.uploadMethodId="video",e={...t.defaultOptions,...e},this._autoUpdate=!0,this._isConnectedToTicker=!1,this._updateFPS=e.updateFPS||0,this._msToNextUpdate=0,this.autoPlay=!1!==e.autoPlay,this.alphaMode=e.alphaMode??"premultiply-alpha-on-upload",this._videoFrameRequestCallback=this._videoFrameRequestCallback.bind(this),this._videoFrameRequestCallbackHandle=null,this._load=null,this._resolve=null,this._reject=null,this._onCanPlay=this._onCanPlay.bind(this),this._onCanPlayThrough=this._onCanPlayThrough.bind(this),this._onError=this._onError.bind(this),this._onPlayStart=this._onPlayStart.bind(this),this._onPlayStop=this._onPlayStop.bind(this),this._onSeeked=this._onSeeked.bind(this),!1!==e.autoLoad&&this.load()}updateFrame(){if(!this.destroyed){if(this._updateFPS){const t=b.R.shared.elapsedMS*this.resource.playbackRate;this._msToNextUpdate=Math.floor(this._msToNextUpdate-t)}(!this._updateFPS||this._msToNextUpdate<=0)&&(this._msToNextUpdate=this._updateFPS?Math.floor(1e3/this._updateFPS):0),this.isValid&&this.update()}}_videoFrameRequestCallback(){this.updateFrame(),this.destroyed?this._videoFrameRequestCallbackHandle=null:this._videoFrameRequestCallbackHandle=this.resource.requestVideoFrameCallback(this._videoFrameRequestCallback)}get isValid(){return!!this.resource.videoWidth&&!!this.resource.videoHeight}async load(){if(this._load)return this._load;const t=this.resource,e=this.options;return(t.readyState===t.HAVE_ENOUGH_DATA||t.readyState===t.HAVE_FUTURE_DATA)&&t.width&&t.height&&(t.complete=!0),t.addEventListener("play",this._onPlayStart),t.addEventListener("pause",this._onPlayStop),t.addEventListener("seeked",this._onSeeked),this._isSourceReady()?this._mediaReady():(e.preload||t.addEventListener("canplay",this._onCanPlay),t.addEventListener("canplaythrough",this._onCanPlayThrough),t.addEventListener("error",this._onError,!0)),this.alphaMode=await async function(){return w??(w=(async()=>{const t=document.createElement("canvas").getContext("webgl");if(!t)return"premultiply-alpha-on-upload";const e=await new Promise((t=>{const e=document.createElement("video");e.onloadeddata=()=>t(e),e.onerror=()=>t(null),e.autoplay=!1,e.crossOrigin="anonymous",e.preload="auto",e.src="data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=",e.load()}));if(!e)return"premultiply-alpha-on-upload";const i=t.createTexture();t.bindTexture(t.TEXTURE_2D,i);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,i,0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,t.NONE),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e);const s=new Uint8Array(4);return t.readPixels(0,0,1,1,t.RGBA,t.UNSIGNED_BYTE,s),t.deleteFramebuffer(r),t.deleteTexture(i),t.getExtension("WEBGL_lose_context")?.loseContext(),s[0]<=s[3]?"premultiplied-alpha":"premultiply-alpha-on-upload"})()),w}(),this._load=new Promise(((i,r)=>{this.isValid?i(this):(this._resolve=i,this._reject=r,void 0!==e.preloadTimeoutMs&&(this._preloadTimeout=setTimeout((()=>{this._onError(new ErrorEvent(`Preload exceeded timeout of ${e.preloadTimeoutMs}ms`))}))),t.load())})),this._load}_onError(t){this.resource.removeEventListener("error",this._onError,!0),this.emit("error",t),this._reject&&(this._reject(t),this._reject=null,this._resolve=null)}_isSourcePlaying(){const t=this.resource;return!t.paused&&!t.ended}_isSourceReady(){return this.resource.readyState>2}_onPlayStart(){this.isValid||this._mediaReady(),this._configureAutoUpdate()}_onPlayStop(){this._configureAutoUpdate()}_onSeeked(){this._autoUpdate&&!this._isSourcePlaying()&&(this._msToNextUpdate=0,this.updateFrame(),this._msToNextUpdate=0)}_onCanPlay(){this.resource.removeEventListener("canplay",this._onCanPlay),this._mediaReady()}_onCanPlayThrough(){this.resource.removeEventListener("canplaythrough",this._onCanPlay),this._preloadTimeout&&(clearTimeout(this._preloadTimeout),this._preloadTimeout=void 0),this._mediaReady()}_mediaReady(){const t=this.resource;this.isValid&&(this.isReady=!0,this.resize(t.videoWidth,t.videoHeight)),this._msToNextUpdate=0,this.updateFrame(),this._msToNextUpdate=0,this._resolve&&(this._resolve(this),this._resolve=null,this._reject=null),this._isSourcePlaying()?this._onPlayStart():this.autoPlay&&this.resource.play()}destroy(){this._configureAutoUpdate();const t=this.resource;t&&(t.removeEventListener("play",this._onPlayStart),t.removeEventListener("pause",this._onPlayStop),t.removeEventListener("seeked",this._onSeeked),t.removeEventListener("canplay",this._onCanPlay),t.removeEventListener("canplaythrough",this._onCanPlayThrough),t.removeEventListener("error",this._onError,!0),t.pause(),t.src="",t.load()),super.destroy()}get autoUpdate(){return this._autoUpdate}set autoUpdate(t){t!==this._autoUpdate&&(this._autoUpdate=t,this._configureAutoUpdate())}get updateFPS(){return this._updateFPS}set updateFPS(t){t!==this._updateFPS&&(this._updateFPS=t,this._configureAutoUpdate())}_configureAutoUpdate(){this._autoUpdate&&this._isSourcePlaying()?!this._updateFPS&&this.resource.requestVideoFrameCallback?(this._isConnectedToTicker&&(b.R.shared.remove(this.updateFrame,this),this._isConnectedToTicker=!1,this._msToNextUpdate=0),null===this._videoFrameRequestCallbackHandle&&(this._videoFrameRequestCallbackHandle=this.resource.requestVideoFrameCallback(this._videoFrameRequestCallback))):(null!==this._videoFrameRequestCallbackHandle&&(this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle),this._videoFrameRequestCallbackHandle=null),this._isConnectedToTicker||(b.R.shared.add(this.updateFrame,this),this._isConnectedToTicker=!0,this._msToNextUpdate=0)):(null!==this._videoFrameRequestCallbackHandle&&(this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle),this._videoFrameRequestCallbackHandle=null),this._isConnectedToTicker&&(b.R.shared.remove(this.updateFrame,this),this._isConnectedToTicker=!1,this._msToNextUpdate=0))}static test(t){return globalThis.HTMLVideoElement&&t instanceof HTMLVideoElement}};T.extension=r.Ag.TextureSource,T.defaultOptions={...A.v.defaultOptions,autoLoad:!0,autoPlay:!0,updateFPS:0,crossorigin:!0,loop:!1,muted:!0,playsinline:!0,preload:!1},T.MIME_TYPES={ogv:"video/ogg",mov:"video/quicktime",m4v:"video/mp4"};let C=T;i(6557),r.XO.add(f,m,g,C,v.b,x.q,y.P)},1257:(t,e,i)=>{i.d(e,{u:()=>r});var r=(t=>(t[t.NONE=0]="NONE",t[t.COLOR=16384]="COLOR",t[t.STENCIL=1024]="STENCIL",t[t.DEPTH=256]="DEPTH",t[t.COLOR_DEPTH=16640]="COLOR_DEPTH",t[t.COLOR_STENCIL=17408]="COLOR_STENCIL",t[t.DEPTH_STENCIL=1280]="DEPTH_STENCIL",t[t.ALL=17664]="ALL",t))(r||{})},848:(t,e,i)=>{i.d(e,{L:()=>s});var r=i(133);class s{constructor(){this.uid=(0,r.L)("instructionSet"),this.instructions=[],this.instructionSize=0,this.renderables=[],this.gcTick=0}reset(){this.instructionSize=0}add(t){this.instructions[this.instructionSize++]=t}log(){this.instructions.length=this.instructionSize,console.table(this.instructions,["type","action"])}}},800:(t,e,i)=>{i.d(e,{k:()=>f});var r=i(2577),s=i(8507);const n=[];s.XO.handleByNamedList(s.Ag.Environment,n);var a=i(5819),o=i(4577),h=i(4670),l=i(1257),u=i(7729),d=i(4486);const c=["init","destroy","contextChange","resolutionChange","reset","renderEnd","renderStart","render","update","postrender","prerender"],p=class t extends d.A{constructor(t){super(),this.runners=Object.create(null),this.renderPipes=Object.create(null),this._initOptions={},this._systemsHash=Object.create(null),this.type=t.type,this.name=t.name,this.config=t;const e=[...c,...this.config.runners??[]];this._addRunners(...e),this._unsafeEvalCheck()}async init(e={}){const i=!0===e.skipExtensionImports||!1===e.manageImports;await async function(t){if(!t)for(let t=0;t<n.length;t++){const e=n[t];if(e.value.test())return void await e.value.load()}}(i),this._addSystems(this.config.systems),this._addPipes(this.config.renderPipes,this.config.renderPipeAdaptors);for(const t in this._systemsHash)e={...this._systemsHash[t].constructor.defaultOptions,...e};e={...t.defaultOptions,...e},this._roundPixels=e.roundPixels?1:0;for(let t=0;t<this.runners.init.items.length;t++)await this.runners.init.items[t].init(e);this._initOptions=e}render(t,e){let i=t;if(i instanceof a.mc&&(i={container:i},e&&((0,h.t6)(h.lj,"passing a second argument is deprecated, please use render options instead"),i.target=e.renderTexture)),i.target||(i.target=this.view.renderTarget),i.target===this.view.renderTarget&&(this._lastObjectRendered=i.container,i.clearColor=this.background.colorRgba),i.clearColor){const t=Array.isArray(i.clearColor)&&4===i.clearColor.length;i.clearColor=t?i.clearColor:r.Q.shared.setValue(i.clearColor).toArray()}i.transform||(i.container.updateLocalTransform(),i.transform=i.container.localTransform),i.container.enableRenderGroup(),this.runners.prerender.emit(i),this.runners.renderStart.emit(i),this.runners.render.emit(i),this.runners.renderEnd.emit(i),this.runners.postrender.emit(i)}resize(t,e,i){const r=this.view.resolution;this.view.resize(t,e,i),this.emit("resize",this.view.screen.width,this.view.screen.height,this.view.resolution),void 0!==i&&i!==r&&this.runners.resolutionChange.emit(i)}clear(t={}){t.target||(t.target=this.renderTarget.renderTarget),t.clearColor||(t.clearColor=this.background.colorRgba),t.clear??(t.clear=l.u.ALL);const{clear:e,clearColor:i,target:s}=t;r.Q.shared.setValue(i??this.background.colorRgba),this.renderTarget.clear(s,e,r.Q.shared.toArray())}get resolution(){return this.view.resolution}set resolution(t){this.view.resolution=t,this.runners.resolutionChange.emit(t)}get width(){return this.view.texture.frame.width}get height(){return this.view.texture.frame.height}get canvas(){return this.view.canvas}get lastObjectRendered(){return this._lastObjectRendered}get renderingToScreen(){return this.renderTarget.renderingToScreen}get screen(){return this.view.screen}_addRunners(...t){t.forEach((t=>{this.runners[t]=new u.C(t)}))}_addSystems(t){let e;for(e in t){const i=t[e];this._addSystem(i.value,i.name)}}_addSystem(t,e){const i=new t(this);if(this[e])throw new Error(`Whoops! The name "${e}" is already in use`);this[e]=i,this._systemsHash[e]=i;for(const t in this.runners)this.runners[t].add(i);return this}_addPipes(t,e){const i=e.reduce(((t,e)=>(t[e.name]=e.value,t)),{});t.forEach((t=>{const e=t.value,r=t.name,s=i[r];this.renderPipes[r]=new e(this,s?new s:null)}))}destroy(t=!1){this.runners.destroy.items.reverse(),this.runners.destroy.emit(t),Object.values(this.runners).forEach((t=>{t.destroy()})),this._systemsHash=null,this.renderPipes=null}generateTexture(t){return this.textureGenerator.generateTexture(t)}get roundPixels(){return!!this._roundPixels}_unsafeEvalCheck(){if(!(0,o.f)())throw new Error("Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.")}};p.defaultOptions={resolution:1,failIfMajorPerformanceCaveat:!1,roundPixels:!1};let f=p},7729:(t,e,i)=>{i.d(e,{C:()=>r});class r{constructor(t){this.items=[],this._name=t}emit(t,e,i,r,s,n,a,o){const{name:h,items:l}=this;for(let u=0,d=l.length;u<d;u++)l[u][h](t,e,i,r,s,n,a,o);return this}add(t){return t[this._name]&&(this.remove(t),this.items.push(t)),this}remove(t){const e=this.items.indexOf(t);return-1!==e&&this.items.splice(e,1),this}contains(t){return-1!==this.items.indexOf(t)}removeAll(){return this.items.length=0,this}destroy(){this.removeAll(),this.items=null,this._name=null}get empty(){return 0===this.items.length}get name(){return this._name}}},4492:(t,e,i)=>{i.d(e,{g:()=>v});var r=i(4486),s=i(9313);const n=[1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1,0,1],a=[0,1,1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1],o=[0,-1,-1,-1,0,1,1,1,0,1,1,1,0,-1,-1,-1],h=[1,1,0,-1,-1,-1,0,1,-1,-1,0,1,1,1,0,-1],l=[],u=[],d=Math.sign;!function(){for(let t=0;t<16;t++){const e=[];l.push(e);for(let i=0;i<16;i++){const r=d(n[t]*n[i]+o[t]*a[i]),s=d(a[t]*n[i]+h[t]*a[i]),l=d(n[t]*o[i]+o[t]*h[i]),u=d(a[t]*o[i]+h[t]*h[i]);for(let t=0;t<16;t++)if(n[t]===r&&a[t]===s&&o[t]===l&&h[t]===u){e.push(t);break}}}for(let t=0;t<16;t++){const e=new s.u;e.set(n[t],a[t],o[t],h[t],0,0),u.push(e)}}();const c={E:0,SE:1,S:2,SW:3,W:4,NW:5,N:6,NE:7,MIRROR_VERTICAL:8,MAIN_DIAGONAL:10,MIRROR_HORIZONTAL:12,REVERSE_DIAGONAL:14,uX:t=>n[t],uY:t=>a[t],vX:t=>o[t],vY:t=>h[t],inv:t=>8&t?15&t:7&-t,add:(t,e)=>l[t][e],sub:(t,e)=>l[t][c.inv(e)],rotate180:t=>4^t,isVertical:t=>2==(3&t),byDirection:(t,e)=>2*Math.abs(t)<=Math.abs(e)?e>=0?c.S:c.N:2*Math.abs(e)<=Math.abs(t)?t>0?c.E:c.W:e>0?t>0?c.SE:c.SW:t>0?c.NE:c.NW,matrixAppendRotationInv:(t,e,i=0,r=0)=>{const s=u[c.inv(e)];s.tx=i,s.ty=r,t.append(s)}};var p=i(9252),f=i(133),m=i(4670);const _=()=>{};var g=i(4195),y=i(1285),x=i(1196);class v extends r.A{constructor({source:t,label:e,frame:i,orig:r,trim:s,defaultAnchor:n,defaultBorders:a,rotate:o,dynamic:h}={}){if(super(),this.uid=(0,f.L)("texture"),this.uvs={x0:0,y0:0,x1:0,y1:0,x2:0,y2:0,x3:0,y3:0},this.frame=new p.M,this.noFrame=!1,this.dynamic=!1,this.isTexture=!0,this.label=e,this.source=t?.source??new y.v,this.noFrame=!i,i)this.frame.copyFrom(i);else{const{width:t,height:e}=this._source;this.frame.width=t,this.frame.height=e}this.orig=r||this.frame,this.trim=s,this.rotate=o??0,this.defaultAnchor=n,this.defaultBorders=a,this.destroyed=!1,this.dynamic=h||!1,this.updateUvs()}set source(t){this._source&&this._source.off("resize",this.update,this),this._source=t,t.on("resize",this.update,this),this.emit("update",this)}get source(){return this._source}get textureMatrix(){return this._textureMatrix||(this._textureMatrix=new x.N(this)),this._textureMatrix}get width(){return this.orig.width}get height(){return this.orig.height}updateUvs(){const{uvs:t,frame:e}=this,{width:i,height:r}=this._source,s=e.x/i,n=e.y/r,a=e.width/i,o=e.height/r;let h=this.rotate;if(h){const e=a/2,i=o/2,r=s+e,l=n+i;h=c.add(h,c.NW),t.x0=r+e*c.uX(h),t.y0=l+i*c.uY(h),h=c.add(h,2),t.x1=r+e*c.uX(h),t.y1=l+i*c.uY(h),h=c.add(h,2),t.x2=r+e*c.uX(h),t.y2=l+i*c.uY(h),h=c.add(h,2),t.x3=r+e*c.uX(h),t.y3=l+i*c.uY(h)}else t.x0=s,t.y0=n,t.x1=s+a,t.y1=n,t.x2=s+a,t.y2=n+o,t.x3=s,t.y3=n+o}destroy(t=!1){this._source&&t&&(this._source.destroy(),this._source=null),this._textureMatrix=null,this.destroyed=!0,this.emit("destroy",this),this.removeAllListeners()}update(){this.noFrame&&(this.frame.width=this._source.width,this.frame.height=this._source.height),this.updateUvs(),this.emit("update",this)}get baseTexture(){return(0,m.t6)(m.lj,"Texture.baseTexture is now Texture.source"),this._source}}v.EMPTY=new v({label:"EMPTY",source:new y.v({label:"EMPTY"})}),v.EMPTY.destroy=_,v.WHITE=new v({source:new g.P({resource:new Uint8Array([255,255,255,255]),width:1,height:1,alphaMode:"premultiply-alpha-on-upload",label:"WHITE"}),label:"WHITE"}),v.WHITE.destroy=_},1196:(t,e,i)=>{i.d(e,{N:()=>n});var r=i(9313);const s=new r.u;class n{constructor(t,e){this.mapCoord=new r.u,this.uClampFrame=new Float32Array(4),this.uClampOffset=new Float32Array(2),this._textureID=-1,this._updateID=0,this.clampOffset=0,this.clampMargin=void 0===e?t.width<10?0:.5:e,this.isSimple=!1,this.texture=t}get texture(){return this._texture}set texture(t){this.texture!==t&&(this._texture?.removeListener("update",this.update,this),this._texture=t,this._texture.addListener("update",this.update,this),this.update())}multiplyUvs(t,e){void 0===e&&(e=t);const i=this.mapCoord;for(let r=0;r<t.length;r+=2){const s=t[r],n=t[r+1];e[r]=s*i.a+n*i.c+i.tx,e[r+1]=s*i.b+n*i.d+i.ty}return e}update(){const t=this._texture;this._updateID++;const e=t.uvs;this.mapCoord.set(e.x1-e.x0,e.y1-e.y0,e.x3-e.x0,e.y3-e.y0,e.x0,e.y0);const i=t.orig,r=t.trim;r&&(s.set(i.width/r.width,0,0,i.height/r.height,-r.x/r.width,-r.y/r.height),this.mapCoord.append(s));const n=t.source,a=this.uClampFrame,o=this.clampMargin/n._resolution,h=this.clampOffset/n._resolution;return a[0]=(t.frame.x+o+h)/n.width,a[1]=(t.frame.y+o+h)/n.height,a[2]=(t.frame.x+t.frame.width-o+h)/n.width,a[3]=(t.frame.y+t.frame.height-o+h)/n.height,this.uClampOffset[0]=this.clampOffset/n.pixelWidth,this.uClampOffset[1]=this.clampOffset/n.pixelHeight,this.isSimple=t.frame.width===n.width&&t.frame.height===n.height&&0===t.rotate,!0}}},2437:(t,e,i)=>{i.d(e,{W:()=>o});var r=i(9939),s=i(1285),n=i(4492);let a=0;const o=new class{constructor(t){this._poolKeyHash=Object.create(null),this._texturePool={},this.textureOptions=t||{},this.enableFullScreen=!1}createTexture(t,e,i){const r=new s.v({...this.textureOptions,width:t,height:e,resolution:1,antialias:i,autoGarbageCollect:!0});return new n.g({source:r,label:"texturePool_"+a++})}getOptimalTexture(t,e,i=1,s){let n=Math.ceil(t*i-1e-6),a=Math.ceil(e*i-1e-6);n=(0,r.U5)(n),a=(0,r.U5)(a);const o=(n<<17)+(a<<1)+(s?1:0);this._texturePool[o]||(this._texturePool[o]=[]);let h=this._texturePool[o].pop();return h||(h=this.createTexture(n,a,s)),h.source._resolution=i,h.source.width=n/i,h.source.height=a/i,h.source.pixelWidth=n,h.source.pixelHeight=a,h.frame.x=0,h.frame.y=0,h.frame.width=t,h.frame.height=e,h.updateUvs(),this._poolKeyHash[h.uid]=o,h}getSameSizeTexture(t,e=!1){const i=t.source;return this.getOptimalTexture(t.width,t.height,i._resolution,e)}returnTexture(t){const e=this._poolKeyHash[t.uid];this._texturePool[e].push(t)}clear(t){if(t=!1!==t)for(const t in this._texturePool){const e=this._texturePool[t];if(e)for(let t=0;t<e.length;t++)e[t].destroy(!0)}this._texturePool={}}}},218:(t,e,i)=>{i.d(e,{n:()=>h});var r=i(4486),s=i(133),n=i(4670);const a=Object.create(null),o=class t extends r.A{constructor(e={}){super(),this._resourceType="textureSampler",this._touched=0,this._maxAnisotropy=1,this.destroyed=!1,e={...t.defaultOptions,...e},this.addressMode=e.addressMode,this.addressModeU=e.addressModeU??this.addressModeU,this.addressModeV=e.addressModeV??this.addressModeV,this.addressModeW=e.addressModeW??this.addressModeW,this.scaleMode=e.scaleMode,this.magFilter=e.magFilter??this.magFilter,this.minFilter=e.minFilter??this.minFilter,this.mipmapFilter=e.mipmapFilter??this.mipmapFilter,this.lodMinClamp=e.lodMinClamp,this.lodMaxClamp=e.lodMaxClamp,this.compare=e.compare,this.maxAnisotropy=e.maxAnisotropy??1}set addressMode(t){this.addressModeU=t,this.addressModeV=t,this.addressModeW=t}get addressMode(){return this.addressModeU}set wrapMode(t){(0,n.t6)(n.lj,"TextureStyle.wrapMode is now TextureStyle.addressMode"),this.addressMode=t}get wrapMode(){return this.addressMode}set scaleMode(t){this.magFilter=t,this.minFilter=t,this.mipmapFilter=t}get scaleMode(){return this.magFilter}set maxAnisotropy(t){this._maxAnisotropy=Math.min(t,16),this._maxAnisotropy>1&&(this.scaleMode="linear")}get maxAnisotropy(){return this._maxAnisotropy}get _resourceId(){return this._sharedResourceId||this._generateResourceId()}update(){this.emit("change",this),this._sharedResourceId=null}_generateResourceId(){const t=`${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;return this._sharedResourceId=function(t){const e=a[t];return void 0===e&&(a[t]=(0,s.L)("resource")),e}(t),this._resourceId}destroy(){this.destroyed=!0,this.emit("destroy",this),this.emit("change",this),this.removeAllListeners()}};o.defaultOptions={addressMode:"clamp-to-edge",scaleMode:"linear"};let h=o},4195:(t,e,i)=>{i.d(e,{P:()=>n});var r=i(8507),s=i(1285);class n extends s.v{constructor(t){const e=t.resource||new Float32Array(t.width*t.height*4);let i=t.format;i||(i=e instanceof Float32Array?"rgba32float":e instanceof Int32Array||e instanceof Uint32Array?"rgba32uint":e instanceof Int16Array||e instanceof Uint16Array?"rgba16uint":(Int8Array,"bgra8unorm")),super({...t,resource:e,format:i}),this.uploadMethodId="buffer"}static test(t){return t instanceof Int8Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array}}n.extension=r.Ag.TextureSource},4884:(t,e,i)=>{i.d(e,{q:()=>a});var r=i(1761),s=i(8507),n=i(1285);class a extends n.v{constructor(t){t.resource||(t.resource=r.e.get().createCanvas()),t.width||(t.width=t.resource.width,t.autoDensity||(t.width/=t.resolution)),t.height||(t.height=t.resource.height,t.autoDensity||(t.height/=t.resolution)),super(t),this.uploadMethodId="image",this.autoDensity=t.autoDensity,this.resizeCanvas(),this.transparent=!!t.transparent}resizeCanvas(){this.autoDensity&&(this.resource.style.width=`${this.width}px`,this.resource.style.height=`${this.height}px`),this.resource.width===this.pixelWidth&&this.resource.height===this.pixelHeight||(this.resource.width=this.pixelWidth,this.resource.height=this.pixelHeight)}resize(t=this.width,e=this.height,i=this._resolution){const r=super.resize(t,e,i);return r&&this.resizeCanvas(),r}static test(t){return globalThis.HTMLCanvasElement&&t instanceof HTMLCanvasElement||globalThis.OffscreenCanvas&&t instanceof OffscreenCanvas}get context2D(){return this._context2D||(this._context2D=this.resource.getContext("2d"))}}a.extension=s.Ag.TextureSource},8293:(t,e,i)=>{i.d(e,{b:()=>o});var r=i(1761),s=i(8507),n=i(268),a=i(1285);class o extends a.v{constructor(t){if(t.resource&&globalThis.HTMLImageElement&&t.resource instanceof HTMLImageElement){const e=r.e.get().createCanvas(t.resource.width,t.resource.height);e.getContext("2d").drawImage(t.resource,0,0,t.resource.width,t.resource.height),t.resource=e,(0,n.R)("ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.")}super(t),this.uploadMethodId="image",this.autoGarbageCollect=!0}static test(t){return globalThis.HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap||globalThis.VideoFrame&&t instanceof VideoFrame}}o.extension=s.Ag.TextureSource},1285:(t,e,i)=>{i.d(e,{v:()=>h});var r=i(4486),s=i(9939),n=i(133),a=i(218);const o=class t extends r.A{constructor(e={}){super(),this.options=e,this.uid=(0,n.L)("textureSource"),this._resourceType="textureSource",this._resourceId=(0,n.L)("resource"),this.uploadMethodId="unknown",this._resolution=1,this.pixelWidth=1,this.pixelHeight=1,this.width=1,this.height=1,this.sampleCount=1,this.mipLevelCount=1,this.autoGenerateMipmaps=!1,this.format="rgba8unorm",this.dimension="2d",this.antialias=!1,this._touched=0,this._batchTick=-1,this._textureBindLocation=-1,e={...t.defaultOptions,...e},this.label=e.label??"",this.resource=e.resource,this.autoGarbageCollect=e.autoGarbageCollect,this._resolution=e.resolution,e.width?this.pixelWidth=e.width*this._resolution:this.pixelWidth=this.resource?this.resourceWidth??1:1,e.height?this.pixelHeight=e.height*this._resolution:this.pixelHeight=this.resource?this.resourceHeight??1:1,this.width=this.pixelWidth/this._resolution,this.height=this.pixelHeight/this._resolution,this.format=e.format,this.dimension=e.dimensions,this.mipLevelCount=e.mipLevelCount,this.autoGenerateMipmaps=e.autoGenerateMipmaps,this.sampleCount=e.sampleCount,this.antialias=e.antialias,this.alphaMode=e.alphaMode,this.style=new a.n(function(t){const e={};for(const i in t)void 0!==t[i]&&(e[i]=t[i]);return e}(e)),this.destroyed=!1,this._refreshPOT()}get source(){return this}get style(){return this._style}set style(t){this.style!==t&&(this._style?.off("change",this._onStyleChange,this),this._style=t,this._style?.on("change",this._onStyleChange,this),this._onStyleChange())}get addressMode(){return this._style.addressMode}set addressMode(t){this._style.addressMode=t}get repeatMode(){return this._style.addressMode}set repeatMode(t){this._style.addressMode=t}get magFilter(){return this._style.magFilter}set magFilter(t){this._style.magFilter=t}get minFilter(){return this._style.minFilter}set minFilter(t){this._style.minFilter=t}get mipmapFilter(){return this._style.mipmapFilter}set mipmapFilter(t){this._style.mipmapFilter=t}get lodMinClamp(){return this._style.lodMinClamp}set lodMinClamp(t){this._style.lodMinClamp=t}get lodMaxClamp(){return this._style.lodMaxClamp}set lodMaxClamp(t){this._style.lodMaxClamp=t}_onStyleChange(){this.emit("styleChange",this)}update(){if(this.resource){const t=this._resolution;if(this.resize(this.resourceWidth/t,this.resourceHeight/t))return}this.emit("update",this)}destroy(){this.destroyed=!0,this.emit("destroy",this),this.emit("change",this),this._style&&(this._style.destroy(),this._style=null),this.uploadMethodId=null,this.resource=null,this.removeAllListeners()}unload(){this._resourceId=(0,n.L)("resource"),this.emit("change",this),this.emit("unload",this)}get resourceWidth(){const{resource:t}=this;return t.naturalWidth||t.videoWidth||t.displayWidth||t.width}get resourceHeight(){const{resource:t}=this;return t.naturalHeight||t.videoHeight||t.displayHeight||t.height}get resolution(){return this._resolution}set resolution(t){this._resolution!==t&&(this._resolution=t,this.width=this.pixelWidth/t,this.height=this.pixelHeight/t)}resize(t,e,i){i||(i=this._resolution),t||(t=this.width),e||(e=this.height);const r=Math.round(t*i),s=Math.round(e*i);return this.width=r/i,this.height=s/i,this._resolution=i,(this.pixelWidth!==r||this.pixelHeight!==s)&&(this._refreshPOT(),this.pixelWidth=r,this.pixelHeight=s,this.emit("resize",this),this._resourceId=(0,n.L)("resource"),this.emit("change",this),!0)}updateMipmaps(){this.autoGenerateMipmaps&&this.mipLevelCount>1&&this.emit("updateMipmaps",this)}set wrapMode(t){this._style.wrapMode=t}get wrapMode(){return this._style.wrapMode}set scaleMode(t){this._style.scaleMode=t}get scaleMode(){return this._style.scaleMode}_refreshPOT(){this.isPowerOfTwo=(0,s.f3)(this.pixelWidth)&&(0,s.f3)(this.pixelHeight)}static test(t){throw new Error("Unimplemented")}};o.defaultOptions={resolution:1,format:"bgra8unorm",alphaMode:"premultiply-alpha-on-upload",dimensions:"2d",mipLevelCount:1,autoGenerateMipmaps:!1,sampleCount:1,antialias:!1,autoGarbageCollect:!1};let h=o},6557:(t,e,i)=>{var r=i(1979),s=i(8507),n=i(1285),a=i(4492);const o=[];function h(t={}){const e=t&&t.resource,i=e?t.resource:t,r=e?t:{resource:t};for(let t=0;t<o.length;t++){const e=o[t];if(e.test(i))return new e(r)}throw new Error(`Could not find a source type for resource: ${r.resource}`)}s.XO.handleByList(s.Ag.TextureSource,o),a.g.from=function(t,e=!1){return"string"==typeof t?r.l.get(t):t instanceof n.v?new a.g({source:t}):function(t={},e=!1){const i=t&&t.resource,s=i?t.resource:t,n=i?t:{resource:t};if(!e&&r.l.has(s))return r.l.get(s);const o=new a.g({source:h(n)});return o.on("destroy",(()=>{r.l.has(s)&&r.l.remove(s)})),e||r.l.set(s,o),o}(t,e)},n.v.from=h},5819:(t,e,i)=>{i.d(e,{mc:()=>z,u:()=>U,ig:()=>X,fR:()=>N});var r=i(4486),s=i(2577),n=i(9313),a=i(1652),o=i(2812),h=i(133),l=i(4670),u=i(8218);const d={get isCachedAsTexture(){return!!this.renderGroup?.isCachedAsTexture},cacheAsTexture(t){"boolean"==typeof t&&!1===t?this.disableRenderGroup():(this.enableRenderGroup(),this.renderGroup.enableCacheAsTexture(!0===t?{}:t))},updateCacheTexture(){this.renderGroup?.updateCacheTexture()},get cacheAsBitmap(){return this.isCachedAsTexture},set cacheAsBitmap(t){(0,l.t6)("v8.6.0","cacheAsBitmap is deprecated, use cacheAsTexture instead."),this.cacheAsTexture(t)}};var c=i(9903);const p={allowChildren:!0,removeChildren(t=0,e){const i=e??this.children.length,r=i-t,s=[];if(r>0&&r<=i){for(let e=i-1;e>=t;e--){const t=this.children[e];t&&(s.push(t),t.parent=null)}(0,c.d)(this.children,t,i);const e=this.renderGroup||this.parentRenderGroup;e&&e.removeChildren(s);for(let t=0;t<s.length;++t)this.emit("childRemoved",s[t],this,t),s[t].emit("removed",this);return s}if(0===r&&0===this.children.length)return s;throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},removeChildAt(t){const e=this.getChildAt(t);return this.removeChild(e)},getChildAt(t){if(t<0||t>=this.children.length)throw new Error(`getChildAt: Index (${t}) does not exist.`);return this.children[t]},setChildIndex(t,e){if(e<0||e>=this.children.length)throw new Error(`The index ${e} supplied is out of bounds ${this.children.length}`);this.getChildIndex(t),this.addChildAt(t,e)},getChildIndex(t){const e=this.children.indexOf(t);if(-1===e)throw new Error("The supplied Container must be a child of the caller");return e},addChildAt(t,e){this.allowChildren||(0,l.t6)(l.lj,"addChildAt: Only Containers will be allowed to add children in v8.0.0");const{children:i}=this;if(e<0||e>i.length)throw new Error(`${t}addChildAt: The index ${e} supplied is out of bounds ${i.length}`);if(t.parent){const i=t.parent.children.indexOf(t);if(t.parent===this&&i===e)return t;-1!==i&&t.parent.children.splice(i,1)}e===i.length?i.push(t):i.splice(e,0,t),t.parent=this,t.didChange=!0,t._updateFlags=15;const r=this.renderGroup||this.parentRenderGroup;return r&&r.addChild(t),this.sortableChildren&&(this.sortDirty=!0),this.emit("childAdded",t,this,e),t.emit("added",this),t},swapChildren(t,e){if(t===e)return;const i=this.getChildIndex(t),r=this.getChildIndex(e);this.children[i]=e,this.children[r]=t;const s=this.renderGroup||this.parentRenderGroup;s&&(s.structureDidChange=!0),this._didContainerChangeTick++},removeFromParent(){this.parent?.removeChild(this)},reparentChild(...t){return 1===t.length?this.reparentChildAt(t[0],this.children.length):(t.forEach((t=>this.reparentChildAt(t,this.children.length))),t[0])},reparentChildAt(t,e){if(t.parent===this)return this.setChildIndex(t,e),t;const i=t.worldTransform.clone();t.removeFromParent(),this.addChildAt(t,e);const r=this.worldTransform.clone();return r.invert(),i.prepend(r),t.setFromMatrix(i),t}};var f=i(9049),m=i(8507);const _=new class{constructor(){this._effectClasses=[],this._tests=[],this._initialized=!1}init(){this._initialized||(this._initialized=!0,this._effectClasses.forEach((t=>{this.add({test:t.test,maskClass:t})})))}add(t){this._tests.push(t)}getMaskEffect(t){this._initialized||this.init();for(let e=0;e<this._tests.length;e++){const i=this._tests[e];if(i.test(t))return u.Z.get(i.maskClass,t)}return t}returnMaskEffect(t){u.Z.return(t)}};m.XO.handleByList(m.Ag.MaskEffect,_._effectClasses);const g={_maskEffect:null,_maskOptions:{inverse:!1},_filterEffect:null,effects:[],_markStructureAsChanged(){const t=this.renderGroup||this.parentRenderGroup;t&&(t.structureDidChange=!0)},addEffect(t){-1===this.effects.indexOf(t)&&(this.effects.push(t),this.effects.sort(((t,e)=>t.priority-e.priority)),this._markStructureAsChanged(),this._updateIsSimple())},removeEffect(t){const e=this.effects.indexOf(t);-1!==e&&(this.effects.splice(e,1),this._markStructureAsChanged(),this._updateIsSimple())},set mask(t){const e=this._maskEffect;e?.mask!==t&&(e&&(this.removeEffect(e),_.returnMaskEffect(e),this._maskEffect=null),null!=t&&(this._maskEffect=_.getMaskEffect(t),this.addEffect(this._maskEffect)))},setMask(t){this._maskOptions={...this._maskOptions,...t},t.mask&&(this.mask=t.mask),this._markStructureAsChanged()},get mask(){return this._maskEffect?.mask},set filters(t){!Array.isArray(t)&&t&&(t=[t]);const e=this._filterEffect||(this._filterEffect=new f.a),i=t?.length>0,r=i!==e.filters?.length>0;t=Array.isArray(t)?t.slice(0):t,e.filters=Object.freeze(t),r&&(i?this.addEffect(e):(this.removeEffect(e),e.filters=t??null))},get filters(){return this._filterEffect?.filters},set filterArea(t){this._filterEffect||(this._filterEffect=new f.a),this._filterEffect.filterArea=t},get filterArea(){return this._filterEffect?.filterArea}},y={label:null,get name(){return(0,l.t6)(l.lj,"Container.name property has been removed, use Container.label instead"),this.label},set name(t){(0,l.t6)(l.lj,"Container.name property has been removed, use Container.label instead"),this.label=t},getChildByName(t,e=!1){return this.getChildByLabel(t,e)},getChildByLabel(t,e=!1){const i=this.children;for(let e=0;e<i.length;e++){const r=i[e];if(r.label===t||t instanceof RegExp&&t.test(r.label))return r}if(e)for(let e=0;e<i.length;e++){const r=i[e].getChildByLabel(t,!0);if(r)return r}return null},getChildrenByLabel(t,e=!1,i=[]){const r=this.children;for(let e=0;e<r.length;e++){const s=r[e];(s.label===t||t instanceof RegExp&&t.test(s.label))&&i.push(s)}if(e)for(let e=0;e<r.length;e++)r[e].getChildrenByLabel(t,!0,i);return i}};var x=i(9443),v=i(2208),b=i(753);function w(t){return((255&t)<<16)+(65280&t)+(t>>16&255)}const A={getGlobalAlpha(t){if(t)return this.renderGroup?this.renderGroup.worldAlpha:this.parentRenderGroup?this.parentRenderGroup.worldAlpha*this.alpha:this.alpha;let e=this.alpha,i=this.parent;for(;i;)e*=i.alpha,i=i.parent;return e},getGlobalTransform(t,e){if(e)return t.copyFrom(this.worldTransform);this.updateLocalTransform();const i=(0,x.Ek)(this,v.u.get().identity());return t.appendFrom(this.localTransform,i),v.u.return(i),t},getGlobalTint(t){if(t)return this.renderGroup?w(this.renderGroup.worldColor):this.parentRenderGroup?w((0,b.j)(this.localColor,this.parentRenderGroup.worldColor)):this.tint;let e=this.localColor,i=this.parent;for(;i;)e=(0,b.j)(e,i.localColor),i=i.parent;return w(e)}};var T=i(9636),C=i(7269);function M(t,e){const i=t.children;for(let t=0;t<i.length;t++){const r=i[t],s=r.uid,n=(65535&r._didViewChangeTick)<<16|65535&r._didContainerChangeTick,a=e.index;e.data[a]===s&&e.data[a+1]===n||(e.data[e.index]=s,e.data[e.index+1]=n,e.didChange=!0),e.index=a+2,r.children.length&&M(r,e)}return e.didChange}const k=new n.u,E={_localBoundsCacheId:-1,_localBoundsCacheData:null,_setWidth(t,e){const i=Math.sign(this.scale.x)||1;this.scale.x=0!==e?t/e*i:i},_setHeight(t,e){const i=Math.sign(this.scale.y)||1;this.scale.y=0!==e?t/e*i:i},getLocalBounds(){this._localBoundsCacheData||(this._localBoundsCacheData={data:[],index:1,didChange:!1,localBounds:new T.c});const t=this._localBoundsCacheData;return t.index=1,t.didChange=!1,t.data[0]!==this._didViewChangeTick&&(t.didChange=!0,t.data[0]=this._didViewChangeTick),M(this,t),t.didChange&&(0,C.n)(this,t.localBounds,k),t.localBounds},getBounds(t,e){return(0,x.fB)(this,t,e||new T.c)}},P={_onRender:null,set onRender(t){const e=this.renderGroup||this.parentRenderGroup;if(!t)return this._onRender&&e?.removeOnRender(this),void(this._onRender=null);this._onRender||e?.addOnRender(this),this._onRender=t},get onRender(){return this._onRender}},S={_zIndex:0,sortDirty:!1,sortableChildren:!1,get zIndex(){return this._zIndex},set zIndex(t){this._zIndex!==t&&(this._zIndex=t,this.depthOfChildModified())},depthOfChildModified(){this.parent&&(this.parent.sortableChildren=!0,this.parent.sortDirty=!0),this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0)},sortChildren(){this.sortDirty&&(this.sortDirty=!1,this.children.sort(R))}};function R(t,e){return t._zIndex-e._zIndex}var O=i(5101);const I={getGlobalPosition(t=new O.b,e=!1){return this.parent?this.parent.toGlobal(this._position,t,e):(t.x=this._position.x,t.y=this._position.y),t},toGlobal(t,e,i=!1){const r=this.getGlobalTransform(v.u.get(),i);return e=r.apply(t,e),v.u.return(r),e},toLocal(t,e,i,r){e&&(t=e.toGlobal(t,i,r));const s=this.getGlobalTransform(v.u.get(),r);return i=s.applyInverse(t,i),v.u.return(s),i}};var F=i(848),B=i(2437);class D{constructor(){this.renderPipeId="renderGroup",this.root=null,this.canBundle=!1,this.renderGroupParent=null,this.renderGroupChildren=[],this.worldTransform=new n.u,this.worldColorAlpha=4294967295,this.worldColor=16777215,this.worldAlpha=1,this.childrenToUpdate=Object.create(null),this.updateTick=0,this.gcTick=0,this.childrenRenderablesToUpdate={list:[],index:0},this.structureDidChange=!0,this.instructionSet=new F.L,this._onRenderContainers=[],this.textureNeedsUpdate=!0,this.isCachedAsTexture=!1,this._matrixDirty=7}init(t){this.root=t,t._onRender&&this.addOnRender(t),t.didChange=!0;const e=t.children;for(let t=0;t<e.length;t++){const i=e[t];i._updateFlags=15,this.addChild(i)}}enableCacheAsTexture(t={}){this.textureOptions=t,this.isCachedAsTexture=!0,this.textureNeedsUpdate=!0}disableCacheAsTexture(){this.isCachedAsTexture=!1,this.texture&&(B.W.returnTexture(this.texture),this.texture=null)}updateCacheTexture(){this.textureNeedsUpdate=!0}reset(){this.renderGroupChildren.length=0;for(const t in this.childrenToUpdate){const e=this.childrenToUpdate[t];e.list.fill(null),e.index=0}this.childrenRenderablesToUpdate.index=0,this.childrenRenderablesToUpdate.list.fill(null),this.root=null,this.updateTick=0,this.structureDidChange=!0,this._onRenderContainers.length=0,this.renderGroupParent=null,this.disableCacheAsTexture()}get localTransform(){return this.root.localTransform}addRenderGroupChild(t){t.renderGroupParent&&t.renderGroupParent._removeRenderGroupChild(t),t.renderGroupParent=this,this.renderGroupChildren.push(t)}_removeRenderGroupChild(t){const e=this.renderGroupChildren.indexOf(t);e>-1&&this.renderGroupChildren.splice(e,1),t.renderGroupParent=null}addChild(t){if(this.structureDidChange=!0,t.parentRenderGroup=this,t.updateTick=-1,t.parent===this.root?t.relativeRenderGroupDepth=1:t.relativeRenderGroupDepth=t.parent.relativeRenderGroupDepth+1,t.didChange=!0,this.onChildUpdate(t),t.renderGroup)return void this.addRenderGroupChild(t.renderGroup);t._onRender&&this.addOnRender(t);const e=t.children;for(let t=0;t<e.length;t++)this.addChild(e[t])}removeChild(t){if(this.structureDidChange=!0,t._onRender&&(t.renderGroup||this.removeOnRender(t)),t.parentRenderGroup=null,t.renderGroup)return void this._removeRenderGroupChild(t.renderGroup);const e=t.children;for(let t=0;t<e.length;t++)this.removeChild(e[t])}removeChildren(t){for(let e=0;e<t.length;e++)this.removeChild(t[e])}onChildUpdate(t){let e=this.childrenToUpdate[t.relativeRenderGroupDepth];e||(e=this.childrenToUpdate[t.relativeRenderGroupDepth]={index:0,list:[]}),e.list[e.index++]=t}updateRenderable(t){t.globalDisplayStatus<7||(this.instructionSet.renderPipes[t.renderPipeId].updateRenderable(t),t.didViewUpdate=!1)}onChildViewUpdate(t){this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++]=t}get isRenderable(){return 7===this.root.localDisplayStatus&&this.worldAlpha>0}addOnRender(t){this._onRenderContainers.push(t)}removeOnRender(t){this._onRenderContainers.splice(this._onRenderContainers.indexOf(t),1)}runOnRender(){for(let t=0;t<this._onRenderContainers.length;t++)this._onRenderContainers[t]._onRender()}destroy(){this.disableCacheAsTexture(),this.renderGroupParent=null,this.root=null,this.childrenRenderablesToUpdate=null,this.childrenToUpdate=null,this.renderGroupChildren=null,this._onRenderContainers=null,this.instructionSet=null}getChildren(t=[]){const e=this.root.children;for(let i=0;i<e.length;i++)this._getChildren(e[i],t);return t}_getChildren(t,e=[]){if(e.push(t),t.renderGroup)return e;const i=t.children;for(let t=0;t<i.length;t++)this._getChildren(i[t],e);return e}invalidateMatrices(){this._matrixDirty=7}get inverseWorldTransform(){return 1&this._matrixDirty?(this._matrixDirty&=-2,this._inverseWorldTransform||(this._inverseWorldTransform=new n.u),this._inverseWorldTransform.copyFrom(this.worldTransform).invert()):this._inverseWorldTransform}get textureOffsetInverseTransform(){return 2&this._matrixDirty?(this._matrixDirty&=-3,this._textureOffsetInverseTransform||(this._textureOffsetInverseTransform=new n.u),this._textureOffsetInverseTransform.copyFrom(this.inverseWorldTransform).translate(-this._textureBounds.x,-this._textureBounds.y)):this._textureOffsetInverseTransform}get inverseParentTextureTransform(){if(!(4&this._matrixDirty))return this._inverseParentTextureTransform;this._matrixDirty&=-5;const t=this._parentCacheAsTextureRenderGroup;return t?(this._inverseParentTextureTransform||(this._inverseParentTextureTransform=new n.u),this._inverseParentTextureTransform.copyFrom(this.worldTransform).prepend(t.inverseWorldTransform).translate(-t._textureBounds.x,-t._textureBounds.y)):this.worldTransform}get cacheToLocalTransform(){return this._parentCacheAsTextureRenderGroup?this._parentCacheAsTextureRenderGroup.textureOffsetInverseTransform:null}}const L=new o.o(null),Y=new o.o(null),G=new o.o(null,1,1),X=1,U=2,N=4;class z extends r.A{constructor(t={}){super(),this.uid=(0,h.L)("renderable"),this._updateFlags=15,this.renderGroup=null,this.parentRenderGroup=null,this.parentRenderGroupIndex=0,this.didChange=!1,this.didViewUpdate=!1,this.relativeRenderGroupDepth=0,this.children=[],this.parent=null,this.includeInBuild=!0,this.measurable=!0,this.isSimple=!0,this.updateTick=-1,this.localTransform=new n.u,this.relativeGroupTransform=new n.u,this.groupTransform=this.relativeGroupTransform,this.destroyed=!1,this._position=new o.o(this,0,0),this._scale=G,this._pivot=Y,this._skew=L,this._cx=1,this._sx=0,this._cy=0,this._sy=1,this._rotation=0,this.localColor=16777215,this.localAlpha=1,this.groupAlpha=1,this.groupColor=16777215,this.groupColorAlpha=4294967295,this.localBlendMode="inherit",this.groupBlendMode="normal",this.localDisplayStatus=7,this.globalDisplayStatus=7,this._didContainerChangeTick=0,this._didViewChangeTick=0,this._didLocalTransformChangeId=-1,this.effects=[],function(t,e,i={}){for(const r in e)i[r]||void 0===e[r]||(t[r]=e[r])}(this,t,{children:!0,parent:!0,effects:!0}),t.children?.forEach((t=>this.addChild(t))),t.parent?.addChild(this)}static mixin(t){Object.defineProperties(z.prototype,Object.getOwnPropertyDescriptors(t))}set _didChangeId(t){this._didViewChangeTick=t>>12&4095,this._didContainerChangeTick=4095&t}get _didChangeId(){return 4095&this._didContainerChangeTick|(4095&this._didViewChangeTick)<<12}addChild(...t){if(this.allowChildren||(0,l.t6)(l.lj,"addChild: Only Containers will be allowed to add children in v8.0.0"),t.length>1){for(let e=0;e<t.length;e++)this.addChild(t[e]);return t[0]}const e=t[0],i=this.renderGroup||this.parentRenderGroup;return e.parent===this?(this.children.splice(this.children.indexOf(e),1),this.children.push(e),i&&(i.structureDidChange=!0),e):(e.parent&&e.parent.removeChild(e),this.children.push(e),this.sortableChildren&&(this.sortDirty=!0),e.parent=this,e.didChange=!0,e._updateFlags=15,i&&i.addChild(e),this.emit("childAdded",e,this,this.children.length-1),e.emit("added",this),this._didViewChangeTick++,0!==e._zIndex&&e.depthOfChildModified(),e)}removeChild(...t){if(t.length>1){for(let e=0;e<t.length;e++)this.removeChild(t[e]);return t[0]}const e=t[0],i=this.children.indexOf(e);return i>-1&&(this._didViewChangeTick++,this.children.splice(i,1),this.renderGroup?this.renderGroup.removeChild(e):this.parentRenderGroup&&this.parentRenderGroup.removeChild(e),e.parent=null,this.emit("childRemoved",e,this,i),e.emit("removed",this)),e}_onUpdate(t){t&&t===this._skew&&this._updateSkew(),this._didContainerChangeTick++,this.didChange||(this.didChange=!0,this.parentRenderGroup&&this.parentRenderGroup.onChildUpdate(this))}set isRenderGroup(t){!!this.renderGroup!==t&&(t?this.enableRenderGroup():this.disableRenderGroup())}get isRenderGroup(){return!!this.renderGroup}enableRenderGroup(){if(this.renderGroup)return;const t=this.parentRenderGroup;t?.removeChild(this),this.renderGroup=u.Z.get(D,this),this.groupTransform=n.u.IDENTITY,t?.addChild(this),this._updateIsSimple()}disableRenderGroup(){if(!this.renderGroup)return;const t=this.parentRenderGroup;t?.removeChild(this),u.Z.return(this.renderGroup),this.renderGroup=null,this.groupTransform=this.relativeGroupTransform,t?.addChild(this),this._updateIsSimple()}_updateIsSimple(){this.isSimple=!this.renderGroup&&0===this.effects.length}get worldTransform(){return this._worldTransform||(this._worldTransform=new n.u),this.renderGroup?this._worldTransform.copyFrom(this.renderGroup.worldTransform):this.parentRenderGroup&&this._worldTransform.appendFrom(this.relativeGroupTransform,this.parentRenderGroup.worldTransform),this._worldTransform}get x(){return this._position.x}set x(t){this._position.x=t}get y(){return this._position.y}set y(t){this._position.y=t}get position(){return this._position}set position(t){this._position.copyFrom(t)}get rotation(){return this._rotation}set rotation(t){this._rotation!==t&&(this._rotation=t,this._onUpdate(this._skew))}get angle(){return this.rotation*a.bO}set angle(t){this.rotation=t*a.Td}get pivot(){return this._pivot===Y&&(this._pivot=new o.o(this,0,0)),this._pivot}set pivot(t){this._pivot===Y&&(this._pivot=new o.o(this,0,0)),"number"==typeof t?this._pivot.set(t):this._pivot.copyFrom(t)}get skew(){return this._skew===L&&(this._skew=new o.o(this,0,0)),this._skew}set skew(t){this._skew===L&&(this._skew=new o.o(this,0,0)),this._skew.copyFrom(t)}get scale(){return this._scale===G&&(this._scale=new o.o(this,1,1)),this._scale}set scale(t){this._scale===G&&(this._scale=new o.o(this,0,0)),"number"==typeof t?this._scale.set(t):this._scale.copyFrom(t)}get width(){return Math.abs(this.scale.x*this.getLocalBounds().width)}set width(t){const e=this.getLocalBounds().width;this._setWidth(t,e)}get height(){return Math.abs(this.scale.y*this.getLocalBounds().height)}set height(t){const e=this.getLocalBounds().height;this._setHeight(t,e)}getSize(t){t||(t={});const e=this.getLocalBounds();return t.width=Math.abs(this.scale.x*e.width),t.height=Math.abs(this.scale.y*e.height),t}setSize(t,e){const i=this.getLocalBounds();"object"==typeof t?(e=t.height??t.width,t=t.width):e??(e=t),void 0!==t&&this._setWidth(t,i.width),void 0!==e&&this._setHeight(e,i.height)}_updateSkew(){const t=this._rotation,e=this._skew;this._cx=Math.cos(t+e._y),this._sx=Math.sin(t+e._y),this._cy=-Math.sin(t-e._x),this._sy=Math.cos(t-e._x)}updateTransform(t){return this.position.set("number"==typeof t.x?t.x:this.position.x,"number"==typeof t.y?t.y:this.position.y),this.scale.set("number"==typeof t.scaleX?t.scaleX||1:this.scale.x,"number"==typeof t.scaleY?t.scaleY||1:this.scale.y),this.rotation="number"==typeof t.rotation?t.rotation:this.rotation,this.skew.set("number"==typeof t.skewX?t.skewX:this.skew.x,"number"==typeof t.skewY?t.skewY:this.skew.y),this.pivot.set("number"==typeof t.pivotX?t.pivotX:this.pivot.x,"number"==typeof t.pivotY?t.pivotY:this.pivot.y),this}setFromMatrix(t){t.decompose(this)}updateLocalTransform(){const t=this._didContainerChangeTick;if(this._didLocalTransformChangeId===t)return;this._didLocalTransformChangeId=t;const e=this.localTransform,i=this._scale,r=this._pivot,s=this._position,n=i._x,a=i._y,o=r._x,h=r._y;e.a=this._cx*n,e.b=this._sx*n,e.c=this._cy*a,e.d=this._sy*a,e.tx=s._x-(o*e.a+h*e.c),e.ty=s._y-(o*e.b+h*e.d)}set alpha(t){t!==this.localAlpha&&(this.localAlpha=t,this._updateFlags|=X,this._onUpdate())}get alpha(){return this.localAlpha}set tint(t){const e=s.Q.shared.setValue(t??16777215).toBgrNumber();e!==this.localColor&&(this.localColor=e,this._updateFlags|=X,this._onUpdate())}get tint(){return w(this.localColor)}set blendMode(t){this.localBlendMode!==t&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=U,this.localBlendMode=t,this._onUpdate())}get blendMode(){return this.localBlendMode}get visible(){return!!(2&this.localDisplayStatus)}set visible(t){const e=t?2:0;(2&this.localDisplayStatus)!==e&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=N,this.localDisplayStatus^=2,this._onUpdate())}get culled(){return!(4&this.localDisplayStatus)}set culled(t){const e=t?0:4;(4&this.localDisplayStatus)!==e&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=N,this.localDisplayStatus^=4,this._onUpdate())}get renderable(){return!!(1&this.localDisplayStatus)}set renderable(t){const e=t?1:0;(1&this.localDisplayStatus)!==e&&(this._updateFlags|=N,this.localDisplayStatus^=1,this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._onUpdate())}get isRenderable(){return 7===this.localDisplayStatus&&this.groupAlpha>0}destroy(t=!1){if(this.destroyed)return;let e;if(this.destroyed=!0,this.children.length&&(e=this.removeChildren(0,this.children.length)),this.removeFromParent(),this.parent=null,this._maskEffect=null,this._filterEffect=null,this.effects=null,this._position=null,this._scale=null,this._pivot=null,this._skew=null,this.emit("destroyed",this),this.removeAllListeners(),("boolean"==typeof t?t:t?.children)&&e)for(let i=0;i<e.length;++i)e[i].destroy(t);this.renderGroup?.destroy(),this.renderGroup=null}}z.mixin(p),z.mixin(I),z.mixin(P),z.mixin(E),z.mixin(g),z.mixin(y),z.mixin(S),z.mixin({cullArea:null,cullable:!1,cullableChildren:!0}),z.mixin(d),z.mixin(A)},9636:(t,e,i)=>{i.d(e,{c:()=>a});var r=i(9313),s=i(9252);const n=new r.u;class a{constructor(t=1/0,e=1/0,i=-1/0,r=-1/0){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.matrix=n,this.minX=t,this.minY=e,this.maxX=i,this.maxY=r}isEmpty(){return this.minX>this.maxX||this.minY>this.maxY}get rectangle(){this._rectangle||(this._rectangle=new s.M);const t=this._rectangle;return this.minX>this.maxX||this.minY>this.maxY?(t.x=0,t.y=0,t.width=0,t.height=0):t.copyFromBounds(this),t}clear(){return this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.matrix=n,this}set(t,e,i,r){this.minX=t,this.minY=e,this.maxX=i,this.maxY=r}addFrame(t,e,i,r,s){s||(s=this.matrix);const n=s.a,a=s.b,o=s.c,h=s.d,l=s.tx,u=s.ty;let d=this.minX,c=this.minY,p=this.maxX,f=this.maxY,m=n*t+o*e+l,_=a*t+h*e+u;m<d&&(d=m),_<c&&(c=_),m>p&&(p=m),_>f&&(f=_),m=n*i+o*e+l,_=a*i+h*e+u,m<d&&(d=m),_<c&&(c=_),m>p&&(p=m),_>f&&(f=_),m=n*t+o*r+l,_=a*t+h*r+u,m<d&&(d=m),_<c&&(c=_),m>p&&(p=m),_>f&&(f=_),m=n*i+o*r+l,_=a*i+h*r+u,m<d&&(d=m),_<c&&(c=_),m>p&&(p=m),_>f&&(f=_),this.minX=d,this.minY=c,this.maxX=p,this.maxY=f}addRect(t,e){this.addFrame(t.x,t.y,t.x+t.width,t.y+t.height,e)}addBounds(t,e){this.addFrame(t.minX,t.minY,t.maxX,t.maxY,e)}addBoundsMask(t){this.minX=this.minX>t.minX?this.minX:t.minX,this.minY=this.minY>t.minY?this.minY:t.minY,this.maxX=this.maxX<t.maxX?this.maxX:t.maxX,this.maxY=this.maxY<t.maxY?this.maxY:t.maxY}applyMatrix(t){const e=this.minX,i=this.minY,r=this.maxX,s=this.maxY,{a:n,b:a,c:o,d:h,tx:l,ty:u}=t;let d=n*e+o*i+l,c=a*e+h*i+u;this.minX=d,this.minY=c,this.maxX=d,this.maxY=c,d=n*r+o*i+l,c=a*r+h*i+u,this.minX=d<this.minX?d:this.minX,this.minY=c<this.minY?c:this.minY,this.maxX=d>this.maxX?d:this.maxX,this.maxY=c>this.maxY?c:this.maxY,d=n*e+o*s+l,c=a*e+h*s+u,this.minX=d<this.minX?d:this.minX,this.minY=c<this.minY?c:this.minY,this.maxX=d>this.maxX?d:this.maxX,this.maxY=c>this.maxY?c:this.maxY,d=n*r+o*s+l,c=a*r+h*s+u,this.minX=d<this.minX?d:this.minX,this.minY=c<this.minY?c:this.minY,this.maxX=d>this.maxX?d:this.maxX,this.maxY=c>this.maxY?c:this.maxY}fit(t){return this.minX<t.left&&(this.minX=t.left),this.maxX>t.right&&(this.maxX=t.right),this.minY<t.top&&(this.minY=t.top),this.maxY>t.bottom&&(this.maxY=t.bottom),this}fitBounds(t,e,i,r){return this.minX<t&&(this.minX=t),this.maxX>e&&(this.maxX=e),this.minY<i&&(this.minY=i),this.maxY>r&&(this.maxY=r),this}pad(t,e=t){return this.minX-=t,this.maxX+=t,this.minY-=e,this.maxY+=e,this}ceil(){return this.minX=Math.floor(this.minX),this.minY=Math.floor(this.minY),this.maxX=Math.ceil(this.maxX),this.maxY=Math.ceil(this.maxY),this}clone(){return new a(this.minX,this.minY,this.maxX,this.maxY)}scale(t,e=t){return this.minX*=t,this.minY*=e,this.maxX*=t,this.maxY*=e,this}get x(){return this.minX}set x(t){const e=this.maxX-this.minX;this.minX=t,this.maxX=t+e}get y(){return this.minY}set y(t){const e=this.maxY-this.minY;this.minY=t,this.maxY=t+e}get width(){return this.maxX-this.minX}set width(t){this.maxX=this.minX+t}get height(){return this.maxY-this.minY}set height(t){this.maxY=this.minY+t}get left(){return this.minX}get right(){return this.maxX}get top(){return this.minY}get bottom(){return this.maxY}get isPositive(){return this.maxX-this.minX>0&&this.maxY-this.minY>0}get isValid(){return this.minX+this.minY!==1/0}addVertexData(t,e,i,r){let s=this.minX,n=this.minY,a=this.maxX,o=this.maxY;r||(r=this.matrix);const h=r.a,l=r.b,u=r.c,d=r.d,c=r.tx,p=r.ty;for(let r=e;r<i;r+=2){const e=t[r],i=t[r+1],f=h*e+u*i+c,m=l*e+d*i+p;s=f<s?f:s,n=m<n?m:n,a=f>a?f:a,o=m>o?m:o}this.minX=s,this.minY=n,this.maxX=a,this.maxY=o}containsPoint(t,e){return this.minX<=t&&this.minY<=e&&this.maxX>=t&&this.maxY>=e}toString(){return`[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`}copyFrom(t){return this.minX=t.minX,this.minY=t.minY,this.maxX=t.maxX,this.maxY=t.maxY,this}}},9443:(t,e,i)=>{i.d(e,{Ek:()=>o,fB:()=>n});var r=i(9313),s=i(2208);function n(t,e,i){let n,h;return i.clear(),t.parent?e?n=t.parent.worldTransform:(h=s.u.get().identity(),n=o(t,h)):n=r.u.IDENTITY,a(t,i,n,e),h&&s.u.return(h),i.isValid||i.set(0,0,0,0),i}function a(t,e,i,n){if(!t.visible||!t.measurable)return;let o;n?o=t.worldTransform:(t.updateLocalTransform(),o=s.u.get(),o.appendFrom(t.localTransform,i));const h=e,l=!!t.effects.length;if(l&&(e=s.o.get().clear()),t.boundsArea)e.addRect(t.boundsArea,o);else{t.bounds&&(e.matrix=o,e.addBounds(t.bounds));for(let i=0;i<t.children.length;i++)a(t.children[i],e,o,n)}if(l){for(let i=0;i<t.effects.length;i++)t.effects[i].addBounds?.(e);h.addBounds(e,r.u.IDENTITY),s.o.return(e)}n||s.u.return(o)}function o(t,e){const i=t.parent;return i&&(o(i,e),i.updateLocalTransform(),e.append(i.localTransform)),e}},7269:(t,e,i)=>{i.d(e,{n:()=>n});var r=i(9313),s=i(2208);function n(t,e,i){return e.clear(),i||(i=r.u.IDENTITY),a(t,e,i,t,!0),e.isValid||e.set(0,0,0,0),e}function a(t,e,i,n,o){let h;if(o)h=s.u.get(),h=i.copyTo(h);else{if(!t.visible||!t.measurable)return;t.updateLocalTransform();const e=t.localTransform;h=s.u.get(),h.appendFrom(e,i)}const l=e,u=!!t.effects.length;if(u&&(e=s.o.get().clear()),t.boundsArea)e.addRect(t.boundsArea,h);else{t.renderPipeId&&(e.matrix=h,e.addBounds(t.bounds));const i=t.children;for(let t=0;t<i.length;t++)a(i[t],e,h,n,!1)}if(u){for(let i=0;i<t.effects.length;i++)t.effects[i].addLocalBounds?.(e,n);l.addBounds(e,r.u.IDENTITY),s.o.return(e)}s.u.return(h)}},2208:(t,e,i)=>{i.d(e,{o:()=>o,u:()=>a});var r=i(9313),s=i(8425),n=i(9636);const a=new s.b(r.u),o=new s.b(n.c)},753:(t,e,i)=>{i.d(e,{j:()=>n});var r=i(4676);const s=16777215;function n(t,e){return t===s?e:e===s?t:(0,r.u)(t,e)}},4676:(t,e,i)=>{function r(t,e){return 16777215!==t&&e?16777215!==e&&t?((t>>16&255)*(e>>16&255)/255<<16)+((t>>8&255)*(e>>8&255)/255<<8)+((255&t)*(255&e)/255|0):t:e}i.d(e,{u:()=>r})},6844:(t,e,i)=>{i.d(e,{k:()=>h});var r=i(2812),s=i(4492),n=i(2048),a=i(4670),o=i(4985);class h extends o.l{constructor(t=s.g.EMPTY){t instanceof s.g&&(t={texture:t});const{texture:e=s.g.EMPTY,anchor:i,roundPixels:n,width:a,height:o,...h}=t;super({label:"Sprite",...h}),this.renderPipeId="sprite",this.batched=!0,this._visualBounds={minX:0,maxX:1,minY:0,maxY:0},this._anchor=new r.o({_onUpdate:()=>{this.onViewUpdate()}}),i?this.anchor=i:e.defaultAnchor&&(this.anchor=e.defaultAnchor),this.texture=e,this.allowChildren=!1,this.roundPixels=n??!1,void 0!==a&&(this.width=a),void 0!==o&&(this.height=o)}static from(t,e=!1){return t instanceof s.g?new h(t):new h(s.g.from(t,e))}set texture(t){t||(t=s.g.EMPTY);const e=this._texture;e!==t&&(e&&e.dynamic&&e.off("update",this.onViewUpdate,this),t.dynamic&&t.on("update",this.onViewUpdate,this),this._texture=t,this._width&&this._setWidth(this._width,this._texture.orig.width),this._height&&this._setHeight(this._height,this._texture.orig.height),this.onViewUpdate())}get texture(){return this._texture}get visualBounds(){return(0,n.y)(this._visualBounds,this._anchor,this._texture,0),this._visualBounds}get sourceBounds(){return(0,a.t6)("8.6.1","Sprite.sourceBounds is deprecated, use visualBounds instead."),this.visualBounds}updateBounds(){const t=this._anchor,e=this._texture,i=this._bounds,{width:r,height:s}=e.orig;i.minX=-t._x*r,i.maxX=i.minX+r,i.minY=-t._y*s,i.maxY=i.minY+s}destroy(t=!1){if(super.destroy(t),"boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._texture.destroy(e)}this._texture=null,this._visualBounds=null,this._bounds=null,this._anchor=null}get anchor(){return this._anchor}set anchor(t){"number"==typeof t?this._anchor.set(t):this._anchor.copyFrom(t)}get width(){return Math.abs(this.scale.x)*this._texture.orig.width}set width(t){this._setWidth(t,this._texture.orig.width),this._width=t}get height(){return Math.abs(this.scale.y)*this._texture.orig.height}set height(t){this._setHeight(t,this._texture.orig.height),this._height=t}getSize(t){return t||(t={}),t.width=Math.abs(this.scale.x)*this._texture.orig.width,t.height=Math.abs(this.scale.y)*this._texture.orig.height,t}setSize(t,e){"object"==typeof t?(e=t.height??t.width,t=t.width):e??(e=t),void 0!==t&&this._setWidth(t,this._texture.orig.width),void 0!==e&&this._setHeight(e,this._texture.orig.height)}}},4985:(t,e,i)=>{i.d(e,{l:()=>n});var r=i(9636),s=i(5819);class n extends s.mc{constructor(){super(...arguments),this.canBundle=!0,this.allowChildren=!1,this._roundPixels=0,this._lastUsed=-1,this._bounds=new r.c(0,1,0,0),this._boundsDirty=!0}get bounds(){return this._boundsDirty?(this.updateBounds(),this._boundsDirty=!1,this._bounds):this._bounds}get roundPixels(){return!!this._roundPixels}set roundPixels(t){this._roundPixels=t?1:0}containsPoint(t){const e=this.bounds,{x:i,y:r}=t;return i>=e.minX&&i<=e.maxX&&r>=e.minY&&r<=e.maxY}onViewUpdate(){if(this._didViewChangeTick++,this._boundsDirty=!0,this.didViewUpdate)return;this.didViewUpdate=!0;const t=this.renderGroup||this.parentRenderGroup;t&&t.onChildViewUpdate(this)}destroy(t){super.destroy(t),this._bounds=null}}},6312:(t,e,i)=>{var r=i(8507),s=(t=>(t[t.Low=0]="Low",t[t.Normal=1]="Normal",t[t.High=2]="High",t))(s||{}),n=i(268),a=i(1761);function o(t){if("string"!=typeof t)throw new TypeError(`Path must be a string. Received ${JSON.stringify(t)}`)}function h(t){return t.split("?")[0].split("#")[0]}const l={toPosix:t=>t.replace(new RegExp("\\".replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g"),"/"),isUrl(t){return/^https?:/.test(this.toPosix(t))},isDataUrl:t=>/^data:([a-z]+\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s<>]*?)$/i.test(t),isBlobUrl:t=>t.startsWith("blob:"),hasProtocol(t){return/^[^/:]+:/.test(this.toPosix(t))},getProtocol(t){o(t),t=this.toPosix(t);const e=/^file:\/\/\//.exec(t);if(e)return e[0];const i=/^[^/:]+:\/{0,2}/.exec(t);return i?i[0]:""},toAbsolute(t,e,i){if(o(t),this.isDataUrl(t)||this.isBlobUrl(t))return t;const r=h(this.toPosix(e??a.e.get().getBaseUrl())),s=h(this.toPosix(i??this.rootname(r)));return(t=this.toPosix(t)).startsWith("/")?l.join(s,t.slice(1)):this.isAbsolute(t)?t:this.join(r,t)},normalize(t){if(o(t),0===t.length)return".";if(this.isDataUrl(t)||this.isBlobUrl(t))return t;let e="";const i=(t=this.toPosix(t)).startsWith("/");this.hasProtocol(t)&&(e=this.rootname(t),t=t.slice(e.length));const r=t.endsWith("/");return(t=function(t){let e="",i=0,r=-1,s=0,n=-1;for(let a=0;a<=t.length;++a){if(a<t.length)n=t.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(r===a-1||1===s);else if(r!==a-1&&2===s){if(e.length<2||2!==i||46!==e.charCodeAt(e.length-1)||46!==e.charCodeAt(e.length-2))if(e.length>2){const t=e.lastIndexOf("/");if(t!==e.length-1){-1===t?(e="",i=0):(e=e.slice(0,t),i=e.length-1-e.lastIndexOf("/")),r=a,s=0;continue}}else if(2===e.length||1===e.length){e="",i=0,r=a,s=0;continue}}else e.length>0?e+=`/${t.slice(r+1,a)}`:e=t.slice(r+1,a),i=a-r-1;r=a,s=0}else 46===n&&-1!==s?++s:s=-1}return e}(t)).length>0&&r&&(t+="/"),i?`/${t}`:e+t},isAbsolute(t){return o(t),t=this.toPosix(t),!!this.hasProtocol(t)||t.startsWith("/")},join(...t){if(0===t.length)return".";let e;for(let i=0;i<t.length;++i){const r=t[i];if(o(r),r.length>0)if(void 0===e)e=r;else{const s=t[i-1]??"";this.joinExtensions.includes(this.extname(s).toLowerCase())?e+=`/../${r}`:e+=`/${r}`}}return void 0===e?".":this.normalize(e)},dirname(t){if(o(t),0===t.length)return".";let e=(t=this.toPosix(t)).charCodeAt(0);const i=47===e;let r=-1,s=!0;const n=this.getProtocol(t),a=t;for(let i=(t=t.slice(n.length)).length-1;i>=1;--i)if(e=t.charCodeAt(i),47===e){if(!s){r=i;break}}else s=!1;return-1===r?i?"/":this.isUrl(a)?n+t:n:i&&1===r?"//":n+t.slice(0,r)},rootname(t){o(t);let e="";if(e=(t=this.toPosix(t)).startsWith("/")?"/":this.getProtocol(t),this.isUrl(t)){const i=t.indexOf("/",e.length);e=-1!==i?t.slice(0,i):t,e.endsWith("/")||(e+="/")}return e},basename(t,e){o(t),e&&o(e),t=h(this.toPosix(t));let i,r=0,s=-1,n=!0;if(void 0!==e&&e.length>0&&e.length<=t.length){if(e.length===t.length&&e===t)return"";let a=e.length-1,o=-1;for(i=t.length-1;i>=0;--i){const h=t.charCodeAt(i);if(47===h){if(!n){r=i+1;break}}else-1===o&&(n=!1,o=i+1),a>=0&&(h===e.charCodeAt(a)?-1==--a&&(s=i):(a=-1,s=o))}return r===s?s=o:-1===s&&(s=t.length),t.slice(r,s)}for(i=t.length-1;i>=0;--i)if(47===t.charCodeAt(i)){if(!n){r=i+1;break}}else-1===s&&(n=!1,s=i+1);return-1===s?"":t.slice(r,s)},extname(t){o(t);let e=-1,i=0,r=-1,s=!0,n=0;for(let a=(t=h(this.toPosix(t))).length-1;a>=0;--a){const o=t.charCodeAt(a);if(47!==o)-1===r&&(s=!1,r=a+1),46===o?-1===e?e=a:1!==n&&(n=1):-1!==e&&(n=-1);else if(!s){i=a+1;break}}return-1===e||-1===r||0===n||1===n&&e===r-1&&e===i+1?"":t.slice(e,r)},parse(t){o(t);const e={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return e;let i=(t=h(this.toPosix(t))).charCodeAt(0);const r=this.isAbsolute(t);let s;e.root=this.rootname(t),s=r||this.hasProtocol(t)?1:0;let n=-1,a=0,l=-1,u=!0,d=t.length-1,c=0;for(;d>=s;--d)if(i=t.charCodeAt(d),47!==i)-1===l&&(u=!1,l=d+1),46===i?-1===n?n=d:1!==c&&(c=1):-1!==n&&(c=-1);else if(!u){a=d+1;break}return-1===n||-1===l||0===c||1===c&&n===l-1&&n===a+1?-1!==l&&(e.base=e.name=0===a&&r?t.slice(1,l):t.slice(a,l)):(0===a&&r?(e.name=t.slice(1,n),e.base=t.slice(1,l)):(e.name=t.slice(a,n),e.base=t.slice(a,l)),e.ext=t.slice(n,l)),e.dir=this.dirname(t),e},sep:"/",delimiter:":",joinExtensions:[".html"]};var u=i(2406);function d(t,e,i,r,s){const n=e[i];for(let a=0;a<n.length;a++){const o=n[a];i<e.length-1?d(t.replace(r[i],o),e,i+1,r,s):s.push(t.replace(r[i],o))}}function c(t){const e=t.match(/\{(.*?)\}/g),i=[];if(e){const r=[];e.forEach((t=>{const e=t.substring(1,t.length-1).split(",");r.push(e)})),d(t,r,0,e,i)}else i.push(t);return i}const p=t=>!Array.isArray(t);class f{constructor(){this._defaultBundleIdentifierOptions={connector:"-",createBundleAssetId:(t,e)=>`${t}${this._bundleIdConnector}${e}`,extractAssetIdFromBundle:(t,e)=>e.replace(`${t}${this._bundleIdConnector}`,"")},this._bundleIdConnector=this._defaultBundleIdentifierOptions.connector,this._createBundleAssetId=this._defaultBundleIdentifierOptions.createBundleAssetId,this._extractAssetIdFromBundle=this._defaultBundleIdentifierOptions.extractAssetIdFromBundle,this._assetMap={},this._preferredOrder=[],this._parsers=[],this._resolverHash={},this._bundles={}}setBundleIdentifier(t){if(this._bundleIdConnector=t.connector??this._bundleIdConnector,this._createBundleAssetId=t.createBundleAssetId??this._createBundleAssetId,this._extractAssetIdFromBundle=t.extractAssetIdFromBundle??this._extractAssetIdFromBundle,"bar"!==this._extractAssetIdFromBundle("foo",this._createBundleAssetId("foo","bar")))throw new Error("[Resolver] GenerateBundleAssetId are not working correctly")}prefer(...t){t.forEach((t=>{this._preferredOrder.push(t),t.priority||(t.priority=Object.keys(t.params))})),this._resolverHash={}}set basePath(t){this._basePath=t}get basePath(){return this._basePath}set rootPath(t){this._rootPath=t}get rootPath(){return this._rootPath}get parsers(){return this._parsers}reset(){this.setBundleIdentifier(this._defaultBundleIdentifierOptions),this._assetMap={},this._preferredOrder=[],this._resolverHash={},this._rootPath=null,this._basePath=null,this._manifest=null,this._bundles={},this._defaultSearchParams=null}setDefaultSearchParams(t){if("string"==typeof t)this._defaultSearchParams=t;else{const e=t;this._defaultSearchParams=Object.keys(e).map((t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`)).join("&")}}getAlias(t){const{alias:e,src:i}=t;return(0,u.z)(e||i,(t=>"string"==typeof t?t:Array.isArray(t)?t.map((t=>t?.src??t)):t?.src?t.src:t),!0)}addManifest(t){this._manifest&&(0,n.R)("[Resolver] Manifest already exists, this will be overwritten"),this._manifest=t,t.bundles.forEach((t=>{this.addBundle(t.name,t.assets)}))}addBundle(t,e){const i=[];let r=e;Array.isArray(e)||(r=Object.entries(e).map((([t,e])=>"string"==typeof e||Array.isArray(e)?{alias:t,src:e}:{alias:t,...e}))),r.forEach((e=>{const r=e.src,s=e.alias;let n;if("string"==typeof s){const e=this._createBundleAssetId(t,s);i.push(e),n=[s,e]}else{const e=s.map((e=>this._createBundleAssetId(t,e)));i.push(...e),n=[...s,...e]}this.add({...e,alias:n,src:r})})),this._bundles[t]=i}add(t){const e=[];let i;Array.isArray(t)?e.push(...t):e.push(t),i=t=>{this.hasKey(t)&&(0,n.R)(`[Resolver] already has key: ${t} overwriting`)},(0,u.z)(e).forEach((t=>{const{src:e}=t;let{data:r,format:s,loadParser:n}=t;const a=(0,u.z)(e).map((t=>"string"==typeof t?c(t):Array.isArray(t)?t:[t])),o=this.getAlias(t);Array.isArray(o)?o.forEach(i):i(o);const h=[];a.forEach((t=>{t.forEach((t=>{let e={};if("object"!=typeof t){e.src=t;for(let i=0;i<this._parsers.length;i++){const r=this._parsers[i];if(r.test(t)){e=r.parse(t);break}}}else r=t.data??r,s=t.format??s,n=t.loadParser??n,e={...e,...t};if(!o)throw new Error(`[Resolver] alias is undefined for this asset: ${e.src}`);e=this._buildResolvedAsset(e,{aliases:o,data:r,format:s,loadParser:n}),h.push(e)}))})),o.forEach((t=>{this._assetMap[t]=h}))}))}resolveBundle(t){const e=p(t);t=(0,u.z)(t);const i={};return t.forEach((t=>{const e=this._bundles[t];if(e){const r=this.resolve(e),s={};for(const e in r){const i=r[e];s[this._extractAssetIdFromBundle(t,e)]=i}i[t]=s}})),e?i[t[0]]:i}resolveUrl(t){const e=this.resolve(t);if("string"!=typeof t){const t={};for(const i in e)t[i]=e[i].src;return t}return e.src}resolve(t){const e=p(t);t=(0,u.z)(t);const i={};return t.forEach((t=>{if(!this._resolverHash[t])if(this._assetMap[t]){let e=this._assetMap[t];const i=this._getPreferredOrder(e);i?.priority.forEach((t=>{i.params[t].forEach((i=>{const r=e.filter((e=>!!e[t]&&e[t]===i));r.length&&(e=r)}))})),this._resolverHash[t]=e[0]}else this._resolverHash[t]=this._buildResolvedAsset({alias:[t],src:t},{});i[t]=this._resolverHash[t]})),e?i[t[0]]:i}hasKey(t){return!!this._assetMap[t]}hasBundle(t){return!!this._bundles[t]}_getPreferredOrder(t){for(let e=0;e<t.length;e++){const e=t[0],i=this._preferredOrder.find((t=>t.params.format.includes(e.format)));if(i)return i}return this._preferredOrder[0]}_appendDefaultSearchParams(t){return this._defaultSearchParams?`${t}${/\?/.test(t)?"&":"?"}${this._defaultSearchParams}`:t}_buildResolvedAsset(t,e){const{aliases:i,data:r,loadParser:s,format:n}=e;return(this._basePath||this._rootPath)&&(t.src=l.toAbsolute(t.src,this._basePath,this._rootPath)),t.alias=i??t.alias??[t.src],t.src=this._appendDefaultSearchParams(t.src),t.data={...r||{},...t.data},t.loadParser=s??t.loadParser,t.format=n??t.format??t.src.split(".").pop().split("?").shift().split("#").shift(),t}}f.RETINA_PREFIX=/@([0-9\.]+)x/;const m=(t,e)=>{const i=e.split("?")[1];return i&&(t+=`?${i}`),t};var _=i(4492),g=i(9252);const y=class t{constructor(t,e){this.linkedSheets=[],this._texture=t instanceof _.g?t:null,this.textureSource=t.source,this.textures={},this.animations={},this.data=e;const i=parseFloat(e.meta.scale);i?(this.resolution=i,t.source.resolution=this.resolution):this.resolution=t.source._resolution,this._frames=this.data.frames,this._frameKeys=Object.keys(this._frames),this._batchIndex=0,this._callback=null}parse(){return new Promise((e=>{this._callback=e,this._batchIndex=0,this._frameKeys.length<=t.BATCH_SIZE?(this._processFrames(0),this._processAnimations(),this._parseComplete()):this._nextBatch()}))}_processFrames(e){let i=e;const r=t.BATCH_SIZE;for(;i-e<r&&i<this._frameKeys.length;){const t=this._frameKeys[i],e=this._frames[t],r=e.frame;if(r){let i=null,s=null;const n=!1!==e.trimmed&&e.sourceSize?e.sourceSize:e.frame,a=new g.M(0,0,Math.floor(n.w)/this.resolution,Math.floor(n.h)/this.resolution);i=e.rotated?new g.M(Math.floor(r.x)/this.resolution,Math.floor(r.y)/this.resolution,Math.floor(r.h)/this.resolution,Math.floor(r.w)/this.resolution):new g.M(Math.floor(r.x)/this.resolution,Math.floor(r.y)/this.resolution,Math.floor(r.w)/this.resolution,Math.floor(r.h)/this.resolution),!1!==e.trimmed&&e.spriteSourceSize&&(s=new g.M(Math.floor(e.spriteSourceSize.x)/this.resolution,Math.floor(e.spriteSourceSize.y)/this.resolution,Math.floor(r.w)/this.resolution,Math.floor(r.h)/this.resolution)),this.textures[t]=new _.g({source:this.textureSource,frame:i,orig:a,trim:s,rotate:e.rotated?2:0,defaultAnchor:e.anchor,defaultBorders:e.borders,label:t.toString()})}i++}}_processAnimations(){const t=this.data.animations||{};for(const e in t){this.animations[e]=[];for(let i=0;i<t[e].length;i++){const r=t[e][i];this.animations[e].push(this.textures[r])}}}_parseComplete(){const t=this._callback;this._callback=null,this._batchIndex=0,t.call(this,this.textures)}_nextBatch(){this._processFrames(this._batchIndex*t.BATCH_SIZE),this._batchIndex++,setTimeout((()=>{this._batchIndex*t.BATCH_SIZE<this._frameKeys.length?this._nextBatch():(this._processAnimations(),this._parseComplete())}),0)}destroy(t=!1){for(const t in this.textures)this.textures[t].destroy();this._frames=null,this._frameKeys=null,this.data=null,this.textures=null,t&&(this._texture?.destroy(),this.textureSource.destroy()),this._texture=null,this.textureSource=null,this.linkedSheets=[]}};y.BATCH_SIZE=1e3;let x=y;const v=["jpg","png","jpeg","avif","webp","basis","etc2","bc7","bc6h","bc5","bc4","bc3","bc2","bc1","eac","astc"];function b(t,e,i){const r={};if(t.forEach((t=>{r[t]=e})),Object.keys(e.textures).forEach((t=>{r[t]=e.textures[t]})),!i){const i=l.dirname(t[0]);e.linkedSheets.forEach(((t,s)=>{const n=b([`${i}/${e.data.meta.related_multi_packs[s]}`],t,!0);Object.assign(r,n)}))}return r}const w={extension:r.Ag.Asset,cache:{test:t=>t instanceof x,getCacheableAssets:(t,e)=>b(t,e,!1)},resolver:{extension:{type:r.Ag.ResolveParser,name:"resolveSpritesheet"},test:t=>{const e=t.split("?")[0].split("."),i=e.pop(),r=e.pop();return"json"===i&&v.includes(r)},parse:t=>{const e=t.split(".");return{resolution:parseFloat(f.RETINA_PREFIX.exec(t)?.[1]??"1"),format:e[e.length-2],src:t}}},loader:{name:"spritesheetLoader",extension:{type:r.Ag.LoadParser,priority:s.Normal,name:"spritesheetLoader"},testParse:async(t,e)=>".json"===l.extname(e.src).toLowerCase()&&!!t.frames,async parse(t,e,i){const{texture:r,imageFilename:s}=e?.data??{};let n,a=l.dirname(e.src);if(a&&a.lastIndexOf("/")!==a.length-1&&(a+="/"),r instanceof _.g)n=r;else{const r=m(a+(s??t.meta.image),e.src);n=(await i.load([r]))[r]}const o=new x(n.source,t);await o.parse();const h=t?.meta?.related_multi_packs;if(Array.isArray(h)){const t=[];for(const r of h){if("string"!=typeof r)continue;let s=a+r;e.data?.ignoreMultiPack||(s=m(s,e.src),t.push(i.load({src:s,data:{ignoreMultiPack:!0}})))}const r=await Promise.all(t);o.linkedSheets=r,r.forEach((t=>{t.linkedSheets=[o].concat(o.linkedSheets.filter((e=>e!==t)))}))}return o},async unload(t,e,i){await i.unload(t.textureSource._sourceOrigin),t.destroy(!1)}}};r.XO.add(w)},7309:(t,e,i)=>{i.d(e,{R:()=>a});var r=i(4458);class s{constructor(t,e=null,i=0,r=!1){this.next=null,this.previous=null,this._destroyed=!1,this._fn=t,this._context=e,this.priority=i,this._once=r}match(t,e=null){return this._fn===t&&this._context===e}emit(t){this._fn&&(this._context?this._fn.call(this._context,t):this._fn(t));const e=this.next;return this._once&&this.destroy(!0),this._destroyed&&(this.next=null),e}connect(t){this.previous=t,t.next&&(t.next.previous=this),this.next=t.next,t.next=this}destroy(t=!1){this._destroyed=!0,this._fn=null,this._context=null,this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous);const e=this.next;return this.next=t?null:e,this.previous=null,e}}const n=class t{constructor(){this.autoStart=!1,this.deltaTime=1,this.lastTime=-1,this.speed=1,this.started=!1,this._requestId=null,this._maxElapsedMS=100,this._minElapsedMS=0,this._protected=!1,this._lastFrame=-1,this._head=new s(null,null,1/0),this.deltaMS=1/t.targetFPMS,this.elapsedMS=1/t.targetFPMS,this._tick=t=>{this._requestId=null,this.started&&(this.update(t),this.started&&null===this._requestId&&this._head.next&&(this._requestId=requestAnimationFrame(this._tick)))}}_requestIfNeeded(){null===this._requestId&&this._head.next&&(this.lastTime=performance.now(),this._lastFrame=this.lastTime,this._requestId=requestAnimationFrame(this._tick))}_cancelIfNeeded(){null!==this._requestId&&(cancelAnimationFrame(this._requestId),this._requestId=null)}_startIfPossible(){this.started?this._requestIfNeeded():this.autoStart&&this.start()}add(t,e,i=r.d.NORMAL){return this._addListener(new s(t,e,i))}addOnce(t,e,i=r.d.NORMAL){return this._addListener(new s(t,e,i,!0))}_addListener(t){let e=this._head.next,i=this._head;if(e){for(;e;){if(t.priority>e.priority){t.connect(i);break}i=e,e=e.next}t.previous||t.connect(i)}else t.connect(i);return this._startIfPossible(),this}remove(t,e){let i=this._head.next;for(;i;)i=i.match(t,e)?i.destroy():i.next;return this._head.next||this._cancelIfNeeded(),this}get count(){if(!this._head)return 0;let t=0,e=this._head;for(;e=e.next;)t++;return t}start(){this.started||(this.started=!0,this._requestIfNeeded())}stop(){this.started&&(this.started=!1,this._cancelIfNeeded())}destroy(){if(!this._protected){this.stop();let t=this._head.next;for(;t;)t=t.destroy(!0);this._head.destroy(),this._head=null}}update(e=performance.now()){let i;if(e>this.lastTime){if(i=this.elapsedMS=e-this.lastTime,i>this._maxElapsedMS&&(i=this._maxElapsedMS),i*=this.speed,this._minElapsedMS){const t=e-this._lastFrame|0;if(t<this._minElapsedMS)return;this._lastFrame=e-t%this._minElapsedMS}this.deltaMS=i,this.deltaTime=this.deltaMS*t.targetFPMS;const r=this._head;let s=r.next;for(;s;)s=s.emit(this);r.next||this._cancelIfNeeded()}else this.deltaTime=this.deltaMS=this.elapsedMS=0;this.lastTime=e}get FPS(){return 1e3/this.elapsedMS}get minFPS(){return 1e3/this._maxElapsedMS}set minFPS(e){const i=Math.min(this.maxFPS,e),r=Math.min(Math.max(0,i)/1e3,t.targetFPMS);this._maxElapsedMS=1/r}get maxFPS(){return this._minElapsedMS?Math.round(1e3/this._minElapsedMS):0}set maxFPS(t){if(0===t)this._minElapsedMS=0;else{const e=Math.max(this.minFPS,t);this._minElapsedMS=1/(e/1e3)}}static get shared(){if(!t._shared){const e=t._shared=new t;e.autoStart=!0,e._protected=!0}return t._shared}static get system(){if(!t._system){const e=t._system=new t;e.autoStart=!0,e._protected=!0}return t._system}};n.targetFPMS=.06;let a=n},4458:(t,e,i)=>{i.d(e,{d:()=>r});var r=(t=>(t[t.INTERACTION=50]="INTERACTION",t[t.HIGH=25]="HIGH",t[t.NORMAL=0]="NORMAL",t[t.LOW=-25]="LOW",t[t.UTILITY=-50]="UTILITY",t))(r||{})},4577:(t,e,i)=>{let r;function s(){if("boolean"==typeof r)return r;try{const t=new Function("param1","param2","param3","return param1[param2] === param3;");r=!0===t({a:"b"},"a","b")}catch(t){r=!1}return r}i.d(e,{f:()=>s})},2571:(t,e,i)=>{i.d(e,{xv:()=>r}),i(4486);const r="8.6.6"},9903:(t,e,i)=>{function r(t,e,i){const r=t.length;let s;if(e>=r||0===i)return;const n=r-(i=e+i>r?r-e:i);for(s=e;s<n;++s)t[s]=t[s+i];t.length=n}i.d(e,{d:()=>r})},133:(t,e,i)=>{i.d(e,{L:()=>s});const r={default:-1};function s(t="default"){return void 0===r[t]&&(r[t]=-1),++r[t]}},2048:(t,e,i)=>{function r(t,e,i,r){const{width:s,height:n}=i.orig,a=i.trim;if(a){const i=a.width,o=a.height;t.minX=a.x-e._x*s-r,t.maxX=t.minX+i,t.minY=a.y-e._y*n-r,t.maxY=t.minY+o}else t.minX=-e._x*s-r,t.maxX=t.minX+s,t.minY=-e._y*n-r,t.maxY=t.minY+n}i.d(e,{y:()=>r})},7073:(t,e,i)=>{i.d(e,{M:()=>n,d:()=>a});var r=i(8507),s=i(2571);class n{static init(){globalThis.__PIXI_APP_INIT__?.(this,s.xv)}static destroy(){}}n.extension=r.Ag.Application;class a{constructor(t){this._renderer=t}init(){globalThis.__PIXI_RENDERER_INIT__?.(this._renderer,s.xv)}destroy(){this._renderer=null}}a.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem],name:"initHook",priority:-10}},4670:(t,e,i)=>{i.d(e,{Ek:()=>n,lj:()=>s,t6:()=>a});const r={},s="8.0.0",n="8.3.4";function a(t,e,i=3){if(r[e])return;let s=(new Error).stack;void 0===s?console.warn("PixiJS Deprecation Warning: ",`${e}\nDeprecated since v${t}`):(s=s.split("\n").splice(i).join("\n"),console.groupCollapsed?(console.groupCollapsed("%cPixiJS Deprecation Warning: %c%s","color:#614108;background:#fffbe6","font-weight:normal;color:#614108;background:#fffbe6",`${e}\nDeprecated since v${t}`),console.warn(s),console.groupEnd()):(console.warn("PixiJS Deprecation Warning: ",`${e}\nDeprecated since v${t}`),console.warn(s))),r[e]=!0}},268:(t,e,i)=>{i.d(e,{R:()=>n});let r=0;const s=500;function n(...t){r!==s&&(r++,r===s?console.warn("PixiJS Warning: too many warnings, no more warnings will be reported to the console by PixiJS."):console.warn("PixiJS Warning: ",...t))}},8425:(t,e,i)=>{i.d(e,{b:()=>r});class r{constructor(t,e){this._pool=[],this._count=0,this._index=0,this._classType=t,e&&this.prepopulate(e)}prepopulate(t){for(let e=0;e<t;e++)this._pool[this._index++]=new this._classType;this._count+=t}get(t){let e;return e=this._index>0?this._pool[--this._index]:new this._classType,e.init?.(t),e}return(t){t.reset?.(),this._pool[this._index++]=t}get totalSize(){return this._count}get totalFree(){return this._index}get totalUsed(){return this._count-this._index}clear(){this._pool.length=0,this._index=0}}},8218:(t,e,i)=>{i.d(e,{Z:()=>s});var r=i(8425);const s=new class{constructor(){this._poolsByClass=new Map}prepopulate(t,e){this.getPool(t).prepopulate(e)}get(t,e){return this.getPool(t).get(e)}return(t){this.getPool(t.constructor).return(t)}getPool(t){return this._poolsByClass.has(t)||this._poolsByClass.set(t,new r.b(t)),this._poolsByClass.get(t)}stats(){const t={};return this._poolsByClass.forEach((e=>{const i=t[e._classType.name]?e._classType.name+e._classType.ID:e._classType.name;t[i]={free:e.totalFree,used:e.totalUsed,size:e.totalSize}})),t}}}},i={};function r(t){var s=i[t];if(void 0!==s)return s.exports;var n=i[t]={exports:{}};return e[t](n,n.exports,r),n.exports}r.m=e,r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.f={},r.e=t=>Promise.all(Object.keys(r.f).reduce(((e,i)=>(r.f[i](t,e),e)),[])),r.u=t=>t+".bundle."+r.h()+".js",r.h=()=>"b1d1f0ce9bd1f63c106d",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},r.l=(e,i,s,n)=>{if(t[e])t[e].push(i);else{var a,o;if(void 0!==s)for(var h=document.getElementsByTagName("script"),l=0;l<h.length;l++){var u=h[l];if(u.getAttribute("src")==e){a=u;break}}a||(o=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,r.nc&&a.setAttribute("nonce",r.nc),a.src=e),t[e]=[i];var d=(i,r)=>{a.onerror=a.onload=null,clearTimeout(c);var s=t[e];if(delete t[e],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((t=>t(r))),i)return i(r)},c=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),o&&document.head.appendChild(a)}},r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");if(i.length)for(var s=i.length-1;s>-1&&(!t||!/^http(s?):/.test(t));)t=i[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{var t={792:0};r.f.j=(e,i)=>{var s=r.o(t,e)?t[e]:void 0;if(0!==s)if(s)i.push(s[2]);else{var n=new Promise(((i,r)=>s=t[e]=[i,r]));i.push(s[2]=n);var a=r.p+r.u(e),o=new Error;r.l(a,(i=>{if(r.o(t,e)&&(0!==(s=t[e])&&(t[e]=void 0),s)){var n=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.src;o.message="Loading chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,s[1](o)}}),"chunk-"+e,e)}};var e=(e,i)=>{var s,n,[a,o,h]=i,l=0;if(a.some((e=>0!==t[e]))){for(s in o)r.o(o,s)&&(r.m[s]=o[s]);h&&h(r)}for(e&&e(i);l<a.length;l++)n=a[l],r.o(t,n)&&t[n]&&t[n][0](),t[n]=0},i=self.webpackChunk=self.webpackChunk||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})();var s=r(8507);const n={extension:{type:s.Ag.Environment,name:"browser",priority:-1},test:()=>!0,load:async()=>{await Promise.all([r.e(647),r.e(120),r.e(852)]).then(r.bind(r,9852))}},a={extension:{type:s.Ag.Environment,name:"webworker",priority:0},test:()=>"undefined"!=typeof self&&void 0!==self.WorkerGlobalScope,load:async()=>{await Promise.all([r.e(647),r.e(120),r.e(162)]).then(r.bind(r,2162))}};r(5753),r(6312);var o=r(1761),h=r(800);let l,u;async function d(t={}){return void 0!==u||(u=await(async()=>{const e=o.e.get().getNavigator().gpu;if(!e)return!1;try{const i=await e.requestAdapter(t);return await i.requestDevice(),!0}catch(t){return!1}})()),u}const c=["webgl","webgpu","canvas"];var p=r(5819),f=r(7073),m=r(4670);const _=class t{constructor(...t){this.stage=new p.mc,void 0!==t[0]&&(0,m.t6)(m.lj,"Application constructor options are deprecated, please use Application.init() instead.")}async init(e){e={...e},this.renderer=await async function(t){let e,i=[];t.preference?(i.push(t.preference),c.forEach((e=>{e!==t.preference&&i.push(e)}))):i=c.slice();let s={};for(let a=0;a<i.length;a++){const u=i[a];if("webgpu"===u&&await d()){const{WebGPURenderer:i}=await Promise.all([r.e(647),r.e(292),r.e(751)]).then(r.bind(r,4751));e=i,s={...t,...t.webgpu};break}if("webgl"===u&&(n=t.failIfMajorPerformanceCaveat??h.k.defaultOptions.failIfMajorPerformanceCaveat,void 0!==l||(l=(()=>{const t={stencil:!0,failIfMajorPerformanceCaveat:n??h.k.defaultOptions.failIfMajorPerformanceCaveat};try{if(!o.e.get().getWebGLRenderingContext())return!1;let e=o.e.get().createCanvas().getContext("webgl",t);const i=!!e?.getContextAttributes()?.stencil;if(e){const t=e.getExtension("WEBGL_lose_context");t&&t.loseContext()}return e=null,i}catch(t){return!1}})()),l)){const{WebGLRenderer:i}=await Promise.all([r.e(647),r.e(292),r.e(151)]).then(r.bind(r,3151));e=i,s={...t,...t.webgl};break}if("canvas"===u)throw s={...t},new Error("CanvasRenderer is not yet implemented")}var n;if(delete s.webgpu,delete s.webgl,!e)throw new Error("No available renderer for the current environment");const a=new e;return await a.init(s),a}(e),t._plugins.forEach((t=>{t.init.call(this,e)}))}render(){this.renderer.render({container:this.stage})}get canvas(){return this.renderer.canvas}get view(){return(0,m.t6)(m.lj,"Application.view is deprecated, please use Application.canvas instead."),this.renderer.canvas}get screen(){return this.renderer.screen}destroy(e=!1,i=!1){const r=t._plugins.slice(0);r.reverse(),r.forEach((t=>{t.destroy.call(this)})),this.stage.destroy(i),this.stage=null,this.renderer.destroy(e),this.renderer=null}};_._plugins=[];let g=_;s.XO.handleByList(s.Ag.Application,g._plugins),s.XO.add(f.M),r(6557);var y=r(6844);function x(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function v(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}r(4486),r(6570),s.XO.add(n,a);var b,w,A,T,C,M,k,E,P,S,R,O,I,F,B,D,L,Y={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},G={duration:.5,overwrite:!1,delay:0},X=1e8,U=1e-8,N=2*Math.PI,z=N/4,H=0,j=Math.sqrt,W=Math.cos,$=Math.sin,V=function(t){return"string"==typeof t},q=function(t){return"function"==typeof t},Z=function(t){return"number"==typeof t},Q=function(t){return void 0===t},K=function(t){return"object"==typeof t},J=function(t){return!1!==t},tt=function(){return"undefined"!=typeof window},et=function(t){return q(t)||V(t)},it="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},rt=Array.isArray,st=/(?:-?\.?\d|\.)+/gi,nt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,at=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,ot=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,ht=/[+-]=-?[.\d]+/,lt=/[^,'"\[\]\s]+/gi,ut=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,dt={},ct={},pt=function(t){return(ct=Nt(t,dt))&&Ni},ft=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},mt=function(t,e){return!e&&console.warn(t)},_t=function(t,e){return t&&(dt[t]=e)&&ct&&(ct[t]=e)||dt},gt=function(){return 0},yt={suppressEvents:!0,isStart:!0,kill:!1},xt={suppressEvents:!0,kill:!1},vt={suppressEvents:!0},bt={},wt=[],At={},Tt={},Ct={},Mt=30,kt=[],Et="",Pt=function(t){var e,i,r=t[0];if(K(r)||q(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(i=kt.length;i--&&!kt[i].targetTest(r););e=kt[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new ii(t[i],e)))||t.splice(i,1);return t},St=function(t){return t._gsap||Pt(xe(t))[0]._gsap},Rt=function(t,e,i){return(i=t[e])&&q(i)?t[e]():Q(i)&&t.getAttribute&&t.getAttribute(e)||i},Ot=function(t,e){return(t=t.split(",")).forEach(e)||t},It=function(t){return Math.round(1e5*t)/1e5||0},Ft=function(t){return Math.round(1e7*t)/1e7||0},Bt=function(t,e){var i=e.charAt(0),r=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+r:"-"===i?t-r:"*"===i?t*r:t/r},Dt=function(t,e){for(var i=e.length,r=0;t.indexOf(e[r])<0&&++r<i;);return r<i},Lt=function(){var t,e,i=wt.length,r=wt.slice(0);for(At={},wt.length=0,t=0;t<i;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},Yt=function(t,e,i,r){wt.length&&!w&&Lt(),t.render(e,i,r||w&&e<0&&(t._initted||t._startAt)),wt.length&&!w&&Lt()},Gt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(lt).length<2?e:V(t)?t.trim():t},Xt=function(t){return t},Ut=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},Nt=function(t,e){for(var i in e)t[i]=e[i];return t},zt=function t(e,i){for(var r in i)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=K(i[r])?t(e[r]||(e[r]={}),i[r]):i[r]);return e},Ht=function(t,e){var i,r={};for(i in t)i in e||(r[i]=t[i]);return r},jt=function(t){var e,i=t.parent||T,r=t.keyframes?(e=rt(t.keyframes),function(t,i){for(var r in i)r in t||"duration"===r&&e||"ease"===r||(t[r]=i[r])}):Ut;if(J(t.inherit))for(;i;)r(t,i.vars.defaults),i=i.parent||i._dp;return t},Wt=function(t,e,i,r,s){void 0===i&&(i="_first"),void 0===r&&(r="_last");var n,a=t[r];if(s)for(n=e[s];a&&a[s]>n;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[r]=e,e._prev=a,e.parent=e._dp=t,e},$t=function(t,e,i,r){void 0===i&&(i="_first"),void 0===r&&(r="_last");var s=e._prev,n=e._next;s?s._next=n:t[i]===e&&(t[i]=n),n?n._prev=s:t[r]===e&&(t[r]=s),e._next=e._prev=e.parent=null},Vt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},qt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Zt=function(t,e,i,r){return t._startAt&&(w?t._startAt.revert(xt):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,r))},Qt=function t(e){return!e||e._ts&&t(e.parent)},Kt=function(t){return t._repeat?Jt(t._tTime,t=t.duration()+t._rDelay)*t:0},Jt=function(t,e){var i=Math.floor(t=Ft(t/e));return t&&i===t?i-1:i},te=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},ee=function(t){return t._end=Ft(t._start+(t._tDur/Math.abs(t._ts||t._rts||U)||0))},ie=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=Ft(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),ee(t),i._dirty||qt(i,t)),t},re=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=te(t.rawTime(),e),(!e._dur||me(0,e.totalDuration(),i)-e._tTime>U)&&e.render(i,!0)),qt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},se=function(t,e,i,r){return e.parent&&Vt(e),e._start=Ft((Z(i)?i:i||t!==T?ce(t,i,e):t._time)+e._delay),e._end=Ft(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),Wt(t,e,"_first","_last",t._sort?"_start":0),he(e)||(t._recent=e),r||re(t,e),t._ts<0&&ie(t,t._tTime),t},ne=function(t,e){return(dt.ScrollTrigger||ft("scrollTrigger",e))&&dt.ScrollTrigger.create(e,t)},ae=function(t,e,i,r,s){return ui(t,e,s),t._initted?!i&&t._pt&&!w&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&P!==ze.frame?(wt.push(t),t._lazy=[s,r],1):void 0:1},oe=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},he=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},le=function(t,e,i,r){var s=t._repeat,n=Ft(e)||0,a=t._tTime/t._tDur;return a&&!r&&(t._time*=n/t._dur),t._dur=n,t._tDur=s?s<0?1e10:Ft(n*(s+1)+t._rDelay*s):n,a>0&&!r&&ie(t,t._tTime=t._tDur*a),t.parent&&ee(t),i||qt(t.parent,t),t},ue=function(t){return t instanceof si?qt(t):le(t,t._dur)},de={_start:0,endTime:gt,totalDuration:gt},ce=function t(e,i,r){var s,n,a,o=e.labels,h=e._recent||de,l=e.duration()>=X?h.endTime(!1):e._dur;return V(i)&&(isNaN(i)||i in o)?(n=i.charAt(0),a="%"===i.substr(-1),s=i.indexOf("="),"<"===n||">"===n?(s>=0&&(i=i.replace(/=/,"")),("<"===n?h._start:h.endTime(h._repeat>=0))+(parseFloat(i.substr(1))||0)*(a?(s<0?h:r).totalDuration()/100:1)):s<0?(i in o||(o[i]=l),o[i]):(n=parseFloat(i.charAt(s-1)+i.substr(s+1)),a&&r&&(n=n/100*(rt(r)?r[0]:r).totalDuration()),s>1?t(e,i.substr(0,s-1),r)+n:l+n)):null==i?l:+i},pe=function(t,e,i){var r,s,n=Z(e[1]),a=(n?2:1)+(t<2?0:1),o=e[a];if(n&&(o.duration=e[1]),o.parent=i,t){for(r=o,s=i;s&&!("immediateRender"in r);)r=s.vars.defaults||{},s=J(s.vars.inherit)&&s.parent;o.immediateRender=J(r.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new mi(e[0],o,e[a+1])},fe=function(t,e){return t||0===t?e(t):e},me=function(t,e,i){return i<t?t:i>e?e:i},_e=function(t,e){return V(t)&&(e=ut.exec(t))?e[1]:""},ge=[].slice,ye=function(t,e){return t&&K(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&K(t[0]))&&!t.nodeType&&t!==C},xe=function(t,e,i){return A&&!e&&A.selector?A.selector(t):!V(t)||i||!M&&He()?rt(t)?function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var r;return V(t)&&!e||ye(t,1)?(r=i).push.apply(r,xe(t)):i.push(t)}))||i}(t,i):ye(t)?ge.call(t,0):t?[t]:[]:ge.call((e||k).querySelectorAll(t),0)},ve=function(t){return t=xe(t)[0]||mt("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return xe(e,i.querySelectorAll?i:i===t?mt("Invalid scope")||k.createElement("div"):t)}},be=function(t){return t.sort((function(){return.5-Math.random()}))},we=function(t){if(q(t))return t;var e=K(t)?t:{each:t},i=Qe(e.ease),r=e.from||0,s=parseFloat(e.base)||0,n={},a=r>0&&r<1,o=isNaN(r)||a,h=e.axis,l=r,u=r;return V(r)?l=u={center:.5,edges:.5,end:1}[r]||0:!a&&o&&(l=r[0],u=r[1]),function(t,a,d){var c,p,f,m,_,g,y,x,v,b=(d||e).length,w=n[b];if(!w){if(!(v="auto"===e.grid?0:(e.grid||[1,X])[1])){for(y=-X;y<(y=d[v++].getBoundingClientRect().left)&&v<b;);v<b&&v--}for(w=n[b]=[],c=o?Math.min(v,b)*l-.5:r%v,p=v===X?0:o?b*u/v-.5:r/v|0,y=0,x=X,g=0;g<b;g++)f=g%v-c,m=p-(g/v|0),w[g]=_=h?Math.abs("y"===h?m:f):j(f*f+m*m),_>y&&(y=_),_<x&&(x=_);"random"===r&&be(w),w.max=y-x,w.min=x,w.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(v>b?b-1:h?"y"===h?b/v:v:Math.max(v,b/v))||0)*("edges"===r?-1:1),w.b=b<0?s-b:s,w.u=_e(e.amount||e.each)||0,i=i&&b<0?qe(i):i}return b=(w[t]-w.min)/w.max||0,Ft(w.b+(i?i(b):b)*w.v)+w.u}},Ae=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var r=Ft(Math.round(parseFloat(i)/t)*t*e);return(r-r%1)/e+(Z(i)?0:_e(i))}},Te=function(t,e){var i,r,s=rt(t);return!s&&K(t)&&(i=s=t.radius||X,t.values?(t=xe(t.values),(r=!Z(t[0]))&&(i*=i)):t=Ae(t.increment)),fe(e,s?q(t)?function(e){return r=t(e),Math.abs(r-e)<=i?r:e}:function(e){for(var s,n,a=parseFloat(r?e.x:e),o=parseFloat(r?e.y:0),h=X,l=0,u=t.length;u--;)(s=r?(s=t[u].x-a)*s+(n=t[u].y-o)*n:Math.abs(t[u]-a))<h&&(h=s,l=u);return l=!i||h<=i?t[l]:e,r||l===e||Z(e)?l:l+_e(e)}:Ae(t))},Ce=function(t,e,i,r){return fe(rt(t)?!e:!0===i?!!(i=0):!r,(function(){return rt(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(r=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*r)/r}))},Me=function(t,e,i){return fe(i,(function(i){return t[~~e(i)]}))},ke=function(t){for(var e,i,r,s,n=0,a="";~(e=t.indexOf("random(",n));)r=t.indexOf(")",e),s="["===t.charAt(e+7),i=t.substr(e+7,r-e-7).match(s?lt:st),a+=t.substr(n,e-n)+Ce(s?i:+i[0],s?0:+i[1],+i[2]||1e-5),n=r+1;return a+t.substr(n,t.length-n)},Ee=function(t,e,i,r,s){var n=e-t,a=r-i;return fe(s,(function(e){return i+((e-t)/n*a||0)}))},Pe=function(t,e,i){var r,s,n,a=t.labels,o=X;for(r in a)(s=a[r]-e)<0==!!i&&s&&o>(s=Math.abs(s))&&(n=r,o=s);return n},Se=function(t,e,i){var r,s,n,a=t.vars,o=a[e],h=A,l=t._ctx;if(o)return r=a[e+"Params"],s=a.callbackScope||t,i&&wt.length&&Lt(),l&&(A=l),n=r?o.apply(s,r):o.call(s),A=h,n},Re=function(t){return Vt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!w),t.progress()<1&&Se(t,"onInterrupt"),t},Oe=[],Ie=function(t){if(t)if(t=!t.name&&t.default||t,tt()||t.headless){var e=t.name,i=q(t),r=e&&!i&&t.init?function(){this._props=[]}:t,s={init:gt,render:Ti,add:hi,kill:Mi,modifier:Ci,rawVars:0},n={targetTest:0,get:0,getSetter:vi,aliases:{},register:0};if(He(),t!==r){if(Tt[e])return;Ut(r,Ut(Ht(t,s),n)),Nt(r.prototype,Nt(s,Ht(t,n))),Tt[r.prop=e]=r,t.targetTest&&(kt.push(r),bt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}_t(e,r),t.register&&t.register(Ni,r,Pi)}else Oe.push(t)},Fe=255,Be={aqua:[0,Fe,Fe],lime:[0,Fe,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Fe],navy:[0,0,128],white:[Fe,Fe,Fe],olive:[128,128,0],yellow:[Fe,Fe,0],orange:[Fe,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Fe,0,0],pink:[Fe,192,203],cyan:[0,Fe,Fe],transparent:[Fe,Fe,Fe,0]},De=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*Fe+.5|0},Le=function(t,e,i){var r,s,n,a,o,h,l,u,d,c,p=t?Z(t)?[t>>16,t>>8&Fe,t&Fe]:0:Be.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Be[t])p=Be[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),s=t.charAt(2),n=t.charAt(3),t="#"+r+r+s+s+n+n+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Fe,p&Fe,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Fe,t&Fe]}else if("hsl"===t.substr(0,3))if(p=c=t.match(st),e){if(~t.indexOf("="))return p=t.match(nt),i&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,r=2*(h=+p[2]/100)-(s=h<=.5?h*(o+1):h+o-h*o),p.length>3&&(p[3]*=1),p[0]=De(a+1/3,r,s),p[1]=De(a,r,s),p[2]=De(a-1/3,r,s);else p=t.match(st)||Be.transparent;p=p.map(Number)}return e&&!c&&(r=p[0]/Fe,s=p[1]/Fe,n=p[2]/Fe,h=((l=Math.max(r,s,n))+(u=Math.min(r,s,n)))/2,l===u?a=o=0:(d=l-u,o=h>.5?d/(2-l-u):d/(l+u),a=l===r?(s-n)/d+(s<n?6:0):l===s?(n-r)/d+2:(r-s)/d+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*h+.5)),i&&p.length<4&&(p[3]=1),p},Ye=function(t){var e=[],i=[],r=-1;return t.split(Xe).forEach((function(t){var s=t.match(at)||[];e.push.apply(e,s),i.push(r+=s.length+1)})),e.c=i,e},Ge=function(t,e,i){var r,s,n,a,o="",h=(t+o).match(Xe),l=e?"hsla(":"rgba(",u=0;if(!h)return t;if(h=h.map((function(t){return(t=Le(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(n=Ye(t),(r=i.c).join(o)!==n.c.join(o)))for(a=(s=t.replace(Xe,"1").split(at)).length-1;u<a;u++)o+=s[u]+(~r.indexOf(u)?h.shift()||l+"0,0,0,0)":(n.length?n:h.length?h:i).shift());if(!s)for(a=(s=t.split(Xe)).length-1;u<a;u++)o+=s[u]+h[u];return o+s[a]},Xe=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Be)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ue=/hsl[a]?\(/,Ne=function(t){var e,i=t.join(" ");if(Xe.lastIndex=0,Xe.test(i))return e=Ue.test(i),t[1]=Ge(t[1],e),t[0]=Ge(t[0],e,Ye(t[1])),!0},ze=function(){var t,e,i,r,s,n,a=Date.now,o=500,h=33,l=a(),u=l,d=1e3/240,c=d,p=[],f=function i(f){var m,_,g,y,x=a()-u,v=!0===f;if((x>o||x<0)&&(l+=x-h),((m=(g=(u+=x)-l)-c)>0||v)&&(y=++r.frame,s=g-1e3*r.time,r.time=g/=1e3,c+=m+(m>=d?4:d-m),_=1),v||(t=e(i)),_)for(n=0;n<p.length;n++)p[n](g,s,y,f)};return r={time:0,frame:0,tick:function(){f(!0)},deltaRatio:function(t){return s/(1e3/(t||60))},wake:function(){E&&(!M&&tt()&&(C=M=window,k=C.document||{},dt.gsap=Ni,(C.gsapVersions||(C.gsapVersions=[])).push(Ni.version),pt(ct||C.GreenSockGlobals||!C.gsap&&C||{}),Oe.forEach(Ie)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&r.sleep(),e=i||function(t){return setTimeout(t,c-1e3*r.time+1|0)},R=1,f(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),R=0,e=gt},lagSmoothing:function(t,e){o=t||1/0,h=Math.min(e||33,o)},fps:function(t){d=1e3/(t||240),c=1e3*r.time+d},add:function(t,e,i){var s=e?function(e,i,n,a){t(e,i,n,a),r.remove(s)}:t;return r.remove(t),p[i?"unshift":"push"](s),He(),s},remove:function(t,e){~(e=p.indexOf(t))&&p.splice(e,1)&&n>=e&&n--},_listeners:p}}(),He=function(){return!R&&ze.wake()},je={},We=/^[\d.\-M][\d.\-,\s]/,$e=/["']/g,Ve=function(t){for(var e,i,r,s={},n=t.substr(1,t.length-3).split(":"),a=n[0],o=1,h=n.length;o<h;o++)i=n[o],e=o!==h-1?i.lastIndexOf(","):i.length,r=i.substr(0,e),s[a]=isNaN(r)?r.replace($e,"").trim():+r,a=i.substr(e+1).trim();return s},qe=function(t){return function(e){return 1-t(1-e)}},Ze=function t(e,i){for(var r,s=e._first;s;)s instanceof si?t(s,i):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===i||(s.timeline?t(s.timeline,i):(r=s._ease,s._ease=s._yEase,s._yEase=r,s._yoyo=i)),s=s._next},Qe=function(t,e){return t&&(q(t)?t:je[t]||function(t){var e,i,r,s,n=(t+"").split("("),a=je[n[0]];return a&&n.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Ve(n[1])]:(e=t,i=e.indexOf("(")+1,r=e.indexOf(")"),s=e.indexOf("(",i),e.substring(i,~s&&s<r?e.indexOf(")",r+1):r)).split(",").map(Gt)):je._CE&&We.test(t)?je._CE("",t):a}(t))||e},Ke=function(t,e,i,r){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var s,n={easeIn:e,easeOut:i,easeInOut:r};return Ot(t,(function(t){for(var e in je[t]=dt[t]=n,je[s=t.toLowerCase()]=i,n)je[s+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=je[t+"."+e]=n[e]})),n},Je=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},ti=function t(e,i,r){var s=i>=1?i:1,n=(r||(e?.3:.45))/(i<1?i:1),a=n/N*(Math.asin(1/s)||0),o=function(t){return 1===t?1:s*Math.pow(2,-10*t)*$((t-a)*n)+1},h="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Je(o);return n=N/n,h.config=function(i,r){return t(e,i,r)},h},ei=function t(e,i){void 0===i&&(i=1.70158);var r=function(t){return t?--t*t*((i+1)*t+i)+1:0},s="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:Je(r);return s.config=function(i){return t(e,i)},s};Ot("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;Ke(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),je.Linear.easeNone=je.none=je.Linear.easeIn,Ke("Elastic",ti("in"),ti("out"),ti()),O=7.5625,B=2*(F=1/(I=2.75)),D=2.5*F,Ke("Bounce",(function(t){return 1-L(1-t)}),L=function(t){return t<F?O*t*t:t<B?O*Math.pow(t-1.5/I,2)+.75:t<D?O*(t-=2.25/I)*t+.9375:O*Math.pow(t-2.625/I,2)+.984375}),Ke("Expo",(function(t){return Math.pow(2,10*(t-1))*t+t*t*t*t*t*t*(1-t)})),Ke("Circ",(function(t){return-(j(1-t*t)-1)})),Ke("Sine",(function(t){return 1===t?1:1-W(t*z)})),Ke("Back",ei("in"),ei("out"),ei()),je.SteppedEase=je.steps=dt.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,r=t+(e?0:1),s=e?1:0;return function(t){return((r*me(0,.99999999,t)|0)+s)*i}}},G.ease=je["quad.out"],Ot("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return Et+=t+","+t+"Params,"}));var ii=function(t,e){this.id=H++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:Rt,this.set=e?e.getSetter:vi},ri=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,le(this,+t.duration,1,1),this.data=t.data,A&&(this._ctx=A,A.data.push(this)),R||ze.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,le(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(He(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(ie(this,t),!i._dp||i.parent||re(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&se(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===U||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),Yt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Kt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Kt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?Jt(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?te(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(me(-Math.abs(this._delay),this._tDur,i),!1!==e),ee(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(He(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==U&&(this._tTime-=U)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&se(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(J(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?te(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=vt);var e=w;return w=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),w=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,ue(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,ue(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(ce(this,t),J(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,J(e)),this._dur||(this._zTime=-1e-8),this},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-U))},e.eventCallback=function(t,e,i){var r=this.vars;return arguments.length>1?(e?(r[t]=e,i&&(r[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(i){var r=q(t)?t:Xt,s=function(){var t=e.then;e.then=null,q(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),i(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?s():e._prom=s}))},e.kill=function(){Re(this)},t}();Ut(ri.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var si=function(t){function e(e,i){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=J(e.sortChildren),T&&se(e.parent||T,x(r),i),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&ne(x(r),e.scrollTrigger),r}v(e,t);var i=e.prototype;return i.to=function(t,e,i){return pe(0,arguments,this),this},i.from=function(t,e,i){return pe(1,arguments,this),this},i.fromTo=function(t,e,i,r){return pe(2,arguments,this),this},i.set=function(t,e,i){return e.duration=0,e.parent=this,jt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new mi(t,e,ce(this,i),1),this},i.call=function(t,e,i){return se(this,mi.delayedCall(0,t,e),i)},i.staggerTo=function(t,e,i,r,s,n,a){return i.duration=e,i.stagger=i.stagger||r,i.onComplete=n,i.onCompleteParams=a,i.parent=this,new mi(t,i,ce(this,s)),this},i.staggerFrom=function(t,e,i,r,s,n,a){return i.runBackwards=1,jt(i).immediateRender=J(i.immediateRender),this.staggerTo(t,e,i,r,s,n,a)},i.staggerFromTo=function(t,e,i,r,s,n,a,o){return r.startAt=i,jt(r).immediateRender=J(r.immediateRender),this.staggerTo(t,e,r,s,n,a,o)},i.render=function(t,e,i){var r,s,n,a,o,h,l,u,d,c,p,f,m=this._time,_=this._dirty?this.totalDuration():this._tDur,g=this._dur,y=t<=0?0:Ft(t),x=this._zTime<0!=t<0&&(this._initted||!g);if(this!==T&&y>_&&t>=0&&(y=_),y!==this._tTime||i||x){if(m!==this._time&&g&&(y+=this._time-m,t+=this._time-m),r=y,d=this._start,h=!(u=this._ts),x&&(g||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(p=this._yoyo,o=g+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,i);if(r=Ft(y%o),y===_?(a=this._repeat,r=g):((a=~~(c=Ft(y/o)))&&a===c&&(r=g,a--),r>g&&(r=g)),c=Jt(this._tTime,o),!m&&this._tTime&&c!==a&&this._tTime-c*o-this._dur<=0&&(c=a),p&&1&a&&(r=g-r,f=1),a!==c&&!this._lock){var v=p&&1&c,b=v===(p&&1&a);if(a<c&&(v=!v),m=v?0:y%g?g:y,this._lock=1,this.render(m||(f?0:Ft(a*o)),e,!g)._lock=0,this._tTime=y,!e&&this.parent&&Se(this,"onRepeat"),this.vars.repeatRefresh&&!f&&(this.invalidate()._lock=1),m&&m!==this._time||h!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(g=this._dur,_=this._tDur,b&&(this._lock=2,m=v?g:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!f&&this.invalidate()),this._lock=0,!this._ts&&!h)return this;Ze(this,f)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,i){var r;if(i>e)for(r=t._first;r&&r._start<=i;){if("isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=i;){if("isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,Ft(m),Ft(r)),l&&(y-=r-(r=l._start))),this._tTime=y,this._time=r,this._act=!u,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&r&&!e&&!a&&(Se(this,"onStart"),this._tTime!==y))return this;if(r>=m&&t>=0)for(s=this._first;s;){if(n=s._next,(s._act||r>=s._start)&&s._ts&&l!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(r-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(r-s._start)*s._ts,e,i),r!==this._time||!this._ts&&!h){l=0,n&&(y+=this._zTime=-1e-8);break}}s=n}else{s=this._last;for(var A=t<0?t:r;s;){if(n=s._prev,(s._act||A<=s._end)&&s._ts&&l!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(A-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(A-s._start)*s._ts,e,i||w&&(s._initted||s._startAt)),r!==this._time||!this._ts&&!h){l=0,n&&(y+=this._zTime=A?-1e-8:U);break}}s=n}}if(l&&!e&&(this.pause(),l.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=d,ee(this),this.render(t,e,i);this._onUpdate&&!e&&Se(this,"onUpdate",!0),(y===_&&this._tTime>=this.totalDuration()||!y&&m)&&(d!==this._start&&Math.abs(u)===Math.abs(this._ts)||this._lock||((t||!g)&&(y===_&&this._ts>0||!y&&this._ts<0)&&Vt(this,1),e||t<0&&!m||!y&&!m&&_||(Se(this,y===_&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<_&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(t,e){var i=this;if(Z(e)||(e=ce(this,e,t)),!(t instanceof ri)){if(rt(t))return t.forEach((function(t){return i.add(t,e)})),this;if(V(t))return this.addLabel(t,e);if(!q(t))return this;t=mi.delayedCall(0,t)}return this!==t?se(this,t,e):this},i.getChildren=function(t,e,i,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===r&&(r=-X);for(var s=[],n=this._first;n;)n._start>=r&&(n instanceof mi?e&&s.push(n):(i&&s.push(n),t&&s.push.apply(s,n.getChildren(!0,e,i)))),n=n._next;return s},i.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},i.remove=function(t){return V(t)?this.removeLabel(t):q(t)?this.killTweensOf(t):(t.parent===this&&$t(this,t),t===this._recent&&(this._recent=this._last),qt(this))},i.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ft(ze.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},i.addLabel=function(t,e){return this.labels[t]=ce(this,e),this},i.removeLabel=function(t){return delete this.labels[t],this},i.addPause=function(t,e,i){var r=mi.delayedCall(0,e||gt,i);return r.data="isPause",this._hasPause=1,se(this,r,ce(this,t))},i.removePause=function(t){var e=this._first;for(t=ce(this,t);e;)e._start===t&&"isPause"===e.data&&Vt(e),e=e._next},i.killTweensOf=function(t,e,i){for(var r=this.getTweensOf(t,i),s=r.length;s--;)ni!==r[s]&&r[s].kill(t,e);return this},i.getTweensOf=function(t,e){for(var i,r=[],s=xe(t),n=this._first,a=Z(e);n;)n instanceof mi?Dt(n._targets,s)&&(a?(!ni||n._initted&&n._ts)&&n.globalTime(0)<=e&&n.globalTime(n.totalDuration())>e:!e||n.isActive())&&r.push(n):(i=n.getTweensOf(s,e)).length&&r.push.apply(r,i),n=n._next;return r},i.tweenTo=function(t,e){e=e||{};var i,r=this,s=ce(r,t),n=e,a=n.startAt,o=n.onStart,h=n.onStartParams,l=n.immediateRender,u=mi.to(r,Ut({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:e.duration||Math.abs((s-(a&&"time"in a?a.time:r._time))/r.timeScale())||U,onStart:function(){if(r.pause(),!i){var t=e.duration||Math.abs((s-(a&&"time"in a?a.time:r._time))/r.timeScale());u._dur!==t&&le(u,t,0,1).render(u._time,!0,!0),i=1}o&&o.apply(u,h||[])}},e));return l?u.render(0):u},i.tweenFromTo=function(t,e,i){return this.tweenTo(e,Ut({startAt:{time:ce(this,t)}},i))},i.recent=function(){return this._recent},i.nextLabel=function(t){return void 0===t&&(t=this._time),Pe(this,ce(this,t))},i.previousLabel=function(t){return void 0===t&&(t=this._time),Pe(this,ce(this,t),1)},i.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+U)},i.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var r,s=this._first,n=this.labels;s;)s._start>=i&&(s._start+=t,s._end+=t),s=s._next;if(e)for(r in n)n[r]>=i&&(n[r]+=t);return qt(this)},i.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},i.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),qt(this)},i.totalDuration=function(t){var e,i,r,s=0,n=this,a=n._last,o=X;if(arguments.length)return n.timeScale((n._repeat<0?n.duration():n.totalDuration())/(n.reversed()?-t:t));if(n._dirty){for(r=n.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(i=a._start)>o&&n._sort&&a._ts&&!n._lock?(n._lock=1,se(n,a,i-a._delay,1)._lock=0):o=i,i<0&&a._ts&&(s-=i,(!r&&!n._dp||r&&r.smoothChildTiming)&&(n._start+=i/n._ts,n._time-=i,n._tTime-=i),n.shiftChildren(-i,!1,-Infinity),o=0),a._end>s&&a._ts&&(s=a._end),a=e;le(n,n===T&&n._time>s?n._time:s,1,1),n._dirty=0}return n._tDur},e.updateRoot=function(t){if(T._ts&&(Yt(T,te(t,T)),P=ze.frame),ze.frame>=Mt){Mt+=Y.autoSleep||120;var e=T._first;if((!e||!e._ts)&&Y.autoSleep&&ze._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||ze.sleep()}}},e}(ri);Ut(si.prototype,{_lock:0,_hasPause:0,_forcing:0});var ni,ai,oi=function(t,e,i,r,s,n,a){var o,h,l,u,d,c,p,f,m=new Pi(this._pt,t,e,0,1,Ai,null,s),_=0,g=0;for(m.b=i,m.e=r,i+="",(p=~(r+="").indexOf("random("))&&(r=ke(r)),n&&(n(f=[i,r],t,e),i=f[0],r=f[1]),h=i.match(ot)||[];o=ot.exec(r);)u=o[0],d=r.substring(_,o.index),l?l=(l+1)%5:"rgba("===d.substr(-5)&&(l=1),u!==h[g++]&&(c=parseFloat(h[g-1])||0,m._pt={_next:m._pt,p:d||1===g?d:",",s:c,c:"="===u.charAt(1)?Bt(c,u)-c:parseFloat(u)-c,m:l&&l<4?Math.round:0},_=ot.lastIndex);return m.c=_<r.length?r.substring(_,r.length):"",m.fp=a,(ht.test(r)||p)&&(m.e=0),this._pt=m,m},hi=function(t,e,i,r,s,n,a,o,h,l){q(r)&&(r=r(s||0,t,n));var u,d=t[e],c="get"!==i?i:q(d)?h?t[e.indexOf("set")||!q(t["get"+e.substr(3)])?e:"get"+e.substr(3)](h):t[e]():d,p=q(d)?h?yi:gi:_i;if(V(r)&&(~r.indexOf("random(")&&(r=ke(r)),"="===r.charAt(1)&&((u=Bt(c,r)+(_e(c)||0))||0===u)&&(r=u)),!l||c!==r||ai)return isNaN(c*r)||""===r?(!d&&!(e in t)&&ft(e,r),oi.call(this,t,e,c,r,p,o||Y.stringFilter,h)):(u=new Pi(this._pt,t,e,+c||0,r-(c||0),"boolean"==typeof d?wi:bi,0,p),h&&(u.fp=h),a&&u.modifier(a,this,t),this._pt=u)},li=function(t,e,i,r,s,n){var a,o,h,l;if(Tt[t]&&!1!==(a=new Tt[t]).init(s,a.rawVars?e[t]:function(t,e,i,r,s){if(q(t)&&(t=ci(t,s,e,i,r)),!K(t)||t.style&&t.nodeType||rt(t)||it(t))return V(t)?ci(t,s,e,i,r):t;var n,a={};for(n in t)a[n]=ci(t[n],s,e,i,r);return a}(e[t],r,s,n,i),i,r,n)&&(i._pt=o=new Pi(i._pt,s,t,0,1,a.render,a,0,a.priority),i!==S))for(h=i._ptLookup[i._targets.indexOf(s)],l=a._props.length;l--;)h[a._props[l]]=o;return a},ui=function t(e,i,r){var s,n,a,o,h,l,u,d,c,p,f,m,_,g=e.vars,y=g.ease,x=g.startAt,v=g.immediateRender,A=g.lazy,C=g.onUpdate,M=g.runBackwards,k=g.yoyoEase,E=g.keyframes,P=g.autoRevert,S=e._dur,R=e._startAt,O=e._targets,I=e.parent,F=I&&"nested"===I.data?I.vars.targets:O,B="auto"===e._overwrite&&!b,D=e.timeline;if(D&&(!E||!y)&&(y="none"),e._ease=Qe(y,G.ease),e._yEase=k?qe(Qe(!0===k?y:k,G.ease)):0,k&&e._yoyo&&!e._repeat&&(k=e._yEase,e._yEase=e._ease,e._ease=k),e._from=!D&&!!g.runBackwards,!D||E&&!g.stagger){if(m=(d=O[0]?St(O[0]).harness:0)&&g[d.prop],s=Ht(g,bt),R&&(R._zTime<0&&R.progress(1),i<0&&M&&v&&!P?R.render(-1,!0):R.revert(M&&S?xt:yt),R._lazy=0),x){if(Vt(e._startAt=mi.set(O,Ut({data:"isStart",overwrite:!1,parent:I,immediateRender:!0,lazy:!R&&J(A),startAt:null,delay:0,onUpdate:C&&function(){return Se(e,"onUpdate")},stagger:0},x))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(w||!v&&!P)&&e._startAt.revert(xt),v&&S&&i<=0&&r<=0)return void(i&&(e._zTime=i))}else if(M&&S&&!R)if(i&&(v=!1),a=Ut({overwrite:!1,data:"isFromStart",lazy:v&&!R&&J(A),immediateRender:v,stagger:0,parent:I},s),m&&(a[d.prop]=m),Vt(e._startAt=mi.set(O,a)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(w?e._startAt.revert(xt):e._startAt.render(-1,!0)),e._zTime=i,v){if(!i)return}else t(e._startAt,U,U);for(e._pt=e._ptCache=0,A=S&&J(A)||A&&!S,n=0;n<O.length;n++){if(u=(h=O[n])._gsap||Pt(O)[n]._gsap,e._ptLookup[n]=p={},At[u.id]&&wt.length&&Lt(),f=F===O?n:F.indexOf(h),d&&!1!==(c=new d).init(h,m||s,e,f,F)&&(e._pt=o=new Pi(e._pt,h,c.name,0,1,c.render,c,0,c.priority),c._props.forEach((function(t){p[t]=o})),c.priority&&(l=1)),!d||m)for(a in s)Tt[a]&&(c=li(a,s,e,f,h,F))?c.priority&&(l=1):p[a]=o=hi.call(e,h,a,"get",s[a],f,F,0,g.stringFilter);e._op&&e._op[n]&&e.kill(h,e._op[n]),B&&e._pt&&(ni=e,T.killTweensOf(h,p,e.globalTime(i)),_=!e.parent,ni=0),e._pt&&A&&(At[u.id]=1)}l&&Ei(e),e._onInit&&e._onInit(e)}e._onUpdate=C,e._initted=(!e._op||e._pt)&&!_,E&&i<=0&&D.render(X,!0,!0)},di=function(t,e,i,r){var s,n,a=e.ease||r||"power1.inOut";if(rt(e))n=i[t]||(i[t]=[]),e.forEach((function(t,i){return n.push({t:i/(e.length-1)*100,v:t,e:a})}));else for(s in e)n=i[s]||(i[s]=[]),"ease"===s||n.push({t:parseFloat(t),v:e[s],e:a})},ci=function(t,e,i,r,s){return q(t)?t.call(e,i,r,s):V(t)&&~t.indexOf("random(")?ke(t):t},pi=Et+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",fi={};Ot(pi+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return fi[t]=1}));var mi=function(t){function e(e,i,r,s){var n;"number"==typeof i&&(r.duration=i,i=r,r=null);var a,o,h,l,u,d,c,p,f=(n=t.call(this,s?i:jt(i))||this).vars,m=f.duration,_=f.delay,g=f.immediateRender,y=f.stagger,v=f.overwrite,w=f.keyframes,A=f.defaults,C=f.scrollTrigger,M=f.yoyoEase,k=i.parent||T,E=(rt(e)||it(e)?Z(e[0]):"length"in i)?[e]:xe(e);if(n._targets=E.length?Pt(E):mt("GSAP target "+e+" not found. https://gsap.com",!Y.nullTargetWarn)||[],n._ptLookup=[],n._overwrite=v,w||y||et(m)||et(_)){if(i=n.vars,(a=n.timeline=new si({data:"nested",defaults:A||{},targets:k&&"nested"===k.data?k.vars.targets:E})).kill(),a.parent=a._dp=x(n),a._start=0,y||et(m)||et(_)){if(l=E.length,c=y&&we(y),K(y))for(u in y)~pi.indexOf(u)&&(p||(p={}),p[u]=y[u]);for(o=0;o<l;o++)(h=Ht(i,fi)).stagger=0,M&&(h.yoyoEase=M),p&&Nt(h,p),d=E[o],h.duration=+ci(m,x(n),o,d,E),h.delay=(+ci(_,x(n),o,d,E)||0)-n._delay,!y&&1===l&&h.delay&&(n._delay=_=h.delay,n._start+=_,h.delay=0),a.to(d,h,c?c(o,d,E):0),a._ease=je.none;a.duration()?m=_=0:n.timeline=0}else if(w){jt(Ut(a.vars.defaults,{ease:"none"})),a._ease=Qe(w.ease||i.ease||"none");var P,S,R,O=0;if(rt(w))w.forEach((function(t){return a.to(E,t,">")})),a.duration();else{for(u in h={},w)"ease"===u||"easeEach"===u||di(u,w[u],h,w.easeEach);for(u in h)for(P=h[u].sort((function(t,e){return t.t-e.t})),O=0,o=0;o<P.length;o++)(R={ease:(S=P[o]).e,duration:(S.t-(o?P[o-1].t:0))/100*m})[u]=S.v,a.to(E,R,O),O+=R.duration;a.duration()<m&&a.to({},{duration:m-a.duration()})}}m||n.duration(m=a.duration())}else n.timeline=0;return!0!==v||b||(ni=x(n),T.killTweensOf(E),ni=0),se(k,x(n),r),i.reversed&&n.reverse(),i.paused&&n.paused(!0),(g||!m&&!w&&n._start===Ft(k._time)&&J(g)&&Qt(x(n))&&"nested"!==k.data)&&(n._tTime=-1e-8,n.render(Math.max(0,-_)||0)),C&&ne(x(n),C),n}v(e,t);var i=e.prototype;return i.render=function(t,e,i){var r,s,n,a,o,h,l,u,d,c=this._time,p=this._tDur,f=this._dur,m=t<0,_=t>p-U&&!m?p:t<U?0:t;if(f){if(_!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m||this._lazy){if(r=_,u=this.timeline,this._repeat){if(a=f+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*a+t,e,i);if(r=Ft(_%a),_===p?(n=this._repeat,r=f):(n=~~(o=Ft(_/a)))&&n===o?(r=f,n--):r>f&&(r=f),(h=this._yoyo&&1&n)&&(d=this._yEase,r=f-r),o=Jt(this._tTime,a),r===c&&!i&&this._initted&&n===o)return this._tTime=_,this;n!==o&&(u&&this._yEase&&Ze(u,h),this.vars.repeatRefresh&&!h&&!this._lock&&r!==a&&this._initted&&(this._lock=i=1,this.render(Ft(a*n),!0).invalidate()._lock=0))}if(!this._initted){if(ae(this,m?t:r,i,e,_))return this._tTime=0,this;if(!(c===this._time||i&&this.vars.repeatRefresh&&n!==o))return this;if(f!==this._dur)return this.render(t,e,i)}if(this._tTime=_,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=l=(d||this._ease)(r/f),this._from&&(this.ratio=l=1-l),r&&!c&&!e&&!n&&(Se(this,"onStart"),this._tTime!==_))return this;for(s=this._pt;s;)s.r(l,s.d),s=s._next;u&&u.render(t<0?t:u._dur*u._ease(r/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Zt(this,t,0,i),Se(this,"onUpdate")),this._repeat&&n!==o&&this.vars.onRepeat&&!e&&this.parent&&Se(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(m&&!this._onUpdate&&Zt(this,t,0,!0),(t||!f)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&Vt(this,1),e||m&&!c||!(_||c||h)||(Se(this,_===p?"onComplete":"onReverseComplete",!0),this._prom&&!(_<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,r){var s,n,a,o=t.ratio,h=e<0||!e&&(!t._start&&oe(t)&&(t._initted||!he(t))||(t._ts<0||t._dp._ts<0)&&!he(t))?0:1,l=t._rDelay,u=0;if(l&&t._repeat&&(u=me(0,t._tDur,e),n=Jt(u,l),t._yoyo&&1&n&&(h=1-h),n!==Jt(t._tTime,l)&&(o=1-h,t.vars.repeatRefresh&&t._initted&&t.invalidate())),h!==o||w||r||t._zTime===U||!e&&t._zTime){if(!t._initted&&ae(t,e,r,i,u))return;for(a=t._zTime,t._zTime=e||(i?U:0),i||(i=e&&!a),t.ratio=h,t._from&&(h=1-h),t._time=0,t._tTime=u,s=t._pt;s;)s.r(h,s.d),s=s._next;e<0&&Zt(t,e,0,!0),t._onUpdate&&!i&&Se(t,"onUpdate"),u&&t._repeat&&!i&&t.parent&&Se(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===h&&(h&&Vt(t,1),i||w||(Se(t,h?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},i.targets=function(){return this._targets},i.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},i.resetTo=function(t,e,i,r,s){R||ze.wake(),this._ts||this.play();var n=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||ui(this,n),function(t,e,i,r,s,n,a,o){var h,l,u,d,c=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!c)for(c=t._ptCache[e]=[],u=t._ptLookup,d=t._targets.length;d--;){if((h=u[d][e])&&h.d&&h.d._pt)for(h=h.d._pt;h&&h.p!==e&&h.fp!==e;)h=h._next;if(!h)return ai=1,t.vars[e]="+=0",ui(t,a),ai=0,o?mt(e+" not eligible for reset"):1;c.push(h)}for(d=c.length;d--;)(h=(l=c[d])._pt||l).s=!r&&0!==r||s?h.s+(r||0)+n*h.c:r,h.c=i-h.s,l.e&&(l.e=It(i)+_e(l.e)),l.b&&(l.b=h.s+_e(l.b))}(this,t,e,i,r,this._ease(n/this._dur),n,s)?this.resetTo(t,e,i,r,1):(ie(this,0),this.parent||Wt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Re(this):this.scrollTrigger&&this.scrollTrigger.kill(!!w),this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,ni&&!0!==ni.vars.overwrite)._first||Re(this),this.parent&&i!==this.timeline.totalDuration()&&le(this,this._dur*this.timeline._tDur/i,0,1),this}var r,s,n,a,o,h,l,u=this._targets,d=t?xe(t):u,c=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,r=i===e.length;r&&i--&&t[i]===e[i];);return i<0}(u,d))return"all"===e&&(this._pt=0),Re(this);for(r=this._op=this._op||[],"all"!==e&&(V(e)&&(o={},Ot(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var i,r,s,n,a=t[0]?St(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(r in i=Nt({},e),o)if(r in i)for(s=(n=o[r].split(",")).length;s--;)i[n[s]]=i[r];return i}(u,e)),l=u.length;l--;)if(~d.indexOf(u[l]))for(o in s=c[l],"all"===e?(r[l]=e,a=s,n={}):(n=r[l]=r[l]||{},a=e),a)(h=s&&s[o])&&("kill"in h.d&&!0!==h.d.kill(o)||$t(this,h,"_pt"),delete s[o]),"all"!==n&&(n[o]=1);return this._initted&&!this._pt&&p&&Re(this),this},e.to=function(t,i){return new e(t,i,arguments[2])},e.from=function(t,e){return pe(1,arguments)},e.delayedCall=function(t,i,r,s){return new e(i,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:i,onReverseComplete:i,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:s})},e.fromTo=function(t,e,i){return pe(2,arguments)},e.set=function(t,i){return i.duration=0,i.repeatDelay||(i.repeat=0),new e(t,i)},e.killTweensOf=function(t,e,i){return T.killTweensOf(t,e,i)},e}(ri);Ut(mi.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Ot("staggerTo,staggerFrom,staggerFromTo",(function(t){mi[t]=function(){var e=new si,i=ge.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var _i=function(t,e,i){return t[e]=i},gi=function(t,e,i){return t[e](i)},yi=function(t,e,i,r){return t[e](r.fp,i)},xi=function(t,e,i){return t.setAttribute(e,i)},vi=function(t,e){return q(t[e])?gi:Q(t[e])&&t.setAttribute?xi:_i},bi=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},wi=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},Ai=function(t,e){var i=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;i;)r=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+r,i=i._next;r+=e.c}e.set(e.t,e.p,r,e)},Ti=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},Ci=function(t,e,i,r){for(var s,n=this._pt;n;)s=n._next,n.p===r&&n.modifier(t,e,i),n=s},Mi=function(t){for(var e,i,r=this._pt;r;)i=r._next,r.p===t&&!r.op||r.op===t?$t(this,r,"_pt"):r.dep||(e=1),r=i;return!e},ki=function(t,e,i,r){r.mSet(t,e,r.m.call(r.tween,i,r.mt),r)},Ei=function(t){for(var e,i,r,s,n=t._pt;n;){for(e=n._next,i=r;i&&i.pr>n.pr;)i=i._next;(n._prev=i?i._prev:s)?n._prev._next=n:r=n,(n._next=i)?i._prev=n:s=n,n=e}t._pt=r},Pi=function(){function t(t,e,i,r,s,n,a,o,h){this.t=e,this.s=r,this.c=s,this.p=i,this.r=n||bi,this.d=a||this,this.set=o||_i,this.pr=h||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=ki,this.m=t,this.mt=i,this.tween=e},t}();Ot(Et+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return bt[t]=1})),dt.TweenMax=dt.TweenLite=mi,dt.TimelineLite=dt.TimelineMax=si,T=new si({sortChildren:!1,defaults:G,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),Y.stringFilter=Ne;var Si=[],Ri={},Oi=[],Ii=0,Fi=0,Bi=function(t){return(Ri[t]||Oi).map((function(t){return t()}))},Di=function(){var t=Date.now(),e=[];t-Ii>2&&(Bi("matchMediaInit"),Si.forEach((function(t){var i,r,s,n,a=t.queries,o=t.conditions;for(r in a)(i=C.matchMedia(a[r]).matches)&&(s=1),i!==o[r]&&(o[r]=i,n=1);n&&(t.revert(),s&&e.push(t))})),Bi("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),Ii=t,Bi("matchMedia"))},Li=function(){function t(t,e){this.selector=e&&ve(e),this.data=[],this._r=[],this.isReverted=!1,this.id=Fi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){q(t)&&(i=e,e=t,t=q);var r=this,s=function(){var t,s=A,n=r.selector;return s&&s!==r&&s.data.push(r),i&&(r.selector=ve(i)),A=r,t=e.apply(r,arguments),q(t)&&r._r.push(t),A=s,r.selector=n,r.isReverted=!1,t};return r.last=s,t===q?s(r,(function(t){return r.add(null,t)})):t?r[t]=s:s},e.ignore=function(t){var e=A;A=null,t(this),A=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof mi&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,r=i.getTweens(),s=i.data.length;s--;)"isFlip"===(e=i.data[s]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return r.splice(r.indexOf(t),1)})));for(r.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),s=i.data.length;s--;)(e=i.data[s])instanceof si?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof mi)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var r=Si.length;r--;)Si[r].id===this.id&&Si.splice(r,1)},e.revert=function(t){this.kill(t||{})},t}(),Yi=function(){function t(t){this.contexts=[],this.scope=t,A&&A.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){K(t)||(t={matches:t});var r,s,n,a=new Li(0,i||this.scope),o=a.conditions={};for(s in A&&!a.selector&&(a.selector=A.selector),this.contexts.push(a),e=a.add("onMatch",e),a.queries=t,t)"all"===s?n=1:(r=C.matchMedia(t[s]))&&(Si.indexOf(a)<0&&Si.push(a),(o[s]=r.matches)&&(n=1),r.addListener?r.addListener(Di):r.addEventListener("change",Di));return n&&e(a,(function(t){return a.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Gi={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return Ie(t)}))},timeline:function(t){return new si(t)},getTweensOf:function(t,e){return T.getTweensOf(t,e)},getProperty:function(t,e,i,r){V(t)&&(t=xe(t)[0]);var s=St(t||{}).get,n=i?Xt:Gt;return"native"===i&&(i=""),t?e?n((Tt[e]&&Tt[e].get||s)(t,e,i,r)):function(e,i,r){return n((Tt[e]&&Tt[e].get||s)(t,e,i,r))}:t},quickSetter:function(t,e,i){if((t=xe(t)).length>1){var r=t.map((function(t){return Ni.quickSetter(t,e,i)})),s=r.length;return function(t){for(var e=s;e--;)r[e](t)}}t=t[0]||{};var n=Tt[e],a=St(t),o=a.harness&&(a.harness.aliases||{})[e]||e,h=n?function(e){var r=new n;S._pt=0,r.init(t,i?e+i:e,S,0,[t]),r.render(1,r),S._pt&&Ti(1,S)}:a.set(t,o);return n?h:function(e){return h(t,o,i?e+i:e,a,1)}},quickTo:function(t,e,i){var r,s=Ni.to(t,Ut(((r={})[e]="+=0.1",r.paused=!0,r.stagger=0,r),i||{})),n=function(t,i,r){return s.resetTo(e,t,i,r)};return n.tween=s,n},isTweening:function(t){return T.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Qe(t.ease,G.ease)),zt(G,t||{})},config:function(t){return zt(Y,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,r=t.plugins,s=t.defaults,n=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!Tt[t]&&!dt[t]&&mt(e+" effect requires "+t+" plugin.")})),Ct[e]=function(t,e,r){return i(xe(t),Ut(e||{},s),r)},n&&(si.prototype[e]=function(t,i,r){return this.add(Ct[e](t,K(i)?i:(r=i)&&{},this),r)})},registerEase:function(t,e){je[t]=Qe(e)},parseEase:function(t,e){return arguments.length?Qe(t,e):je},getById:function(t){return T.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,r,s=new si(t);for(s.smoothChildTiming=J(t.smoothChildTiming),T.remove(s),s._dp=0,s._time=s._tTime=T._time,i=T._first;i;)r=i._next,!e&&!i._dur&&i instanceof mi&&i.vars.onComplete===i._targets[0]||se(s,i,i._start-i._delay),i=r;return se(T,s,0),s},context:function(t,e){return t?new Li(t,e):A},matchMedia:function(t){return new Yi(t)},matchMediaRefresh:function(){return Si.forEach((function(t){var e,i,r=t.conditions;for(i in r)r[i]&&(r[i]=!1,e=1);e&&t.revert()}))||Di()},addEventListener:function(t,e){var i=Ri[t]||(Ri[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=Ri[t],r=i&&i.indexOf(e);r>=0&&i.splice(r,1)},utils:{wrap:function t(e,i,r){var s=i-e;return rt(e)?Me(e,t(0,e.length),i):fe(r,(function(t){return(s+(t-e)%s)%s+e}))},wrapYoyo:function t(e,i,r){var s=i-e,n=2*s;return rt(e)?Me(e,t(0,e.length-1),i):fe(r,(function(t){return e+((t=(n+(t-e)%n)%n||0)>s?n-t:t)}))},distribute:we,random:Ce,snap:Te,normalize:function(t,e,i){return Ee(t,e,0,1,i)},getUnit:_e,clamp:function(t,e,i){return fe(i,(function(i){return me(t,e,i)}))},splitColor:Le,toArray:xe,selector:ve,mapRange:Ee,pipe:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(i){return t(parseFloat(i))+(e||_e(i))}},interpolate:function t(e,i,r,s){var n=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!n){var a,o,h,l,u,d=V(e),c={};if(!0===r&&(s=1)&&(r=null),d)e={p:e},i={p:i};else if(rt(e)&&!rt(i)){for(h=[],l=e.length,u=l-2,o=1;o<l;o++)h.push(t(e[o-1],e[o]));l--,n=function(t){t*=l;var e=Math.min(u,~~t);return h[e](t-e)},r=i}else s||(e=Nt(rt(e)?[]:{},e));if(!h){for(a in i)hi.call(c,e,a,"get",i[a]);n=function(t){return Ti(t,c)||(d?e.p:e)}}}return fe(r,n)},shuffle:be},install:pt,effects:Ct,ticker:ze,updateRoot:si.updateRoot,plugins:Tt,globalTimeline:T,core:{PropTween:Pi,globals:_t,Tween:mi,Timeline:si,Animation:ri,getCache:St,_removeLinkedListItem:$t,reverting:function(){return w},context:function(t){return t&&A&&(A.data.push(t),t._ctx=A),A},suppressOverwrites:function(t){return b=t}}};Ot("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Gi[t]=mi[t]})),ze.add(si.updateRoot),S=Gi.to({},{duration:0});var Xi=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},Ui=function(t,e){return{name:t,rawVars:1,init:function(t,i,r){r._onInit=function(t){var r,s;if(V(i)&&(r={},Ot(i,(function(t){return r[t]=1})),i=r),e){for(s in r={},i)r[s]=e(i[s]);i=r}!function(t,e){var i,r,s,n=t._targets;for(i in e)for(r=n.length;r--;)(s=t._ptLookup[r][i])&&(s=s.d)&&(s._pt&&(s=Xi(s,i)),s&&s.modifier&&s.modifier(e[i],t,n[r],i))}(t,i)}}}},Ni=Gi.registerPlugin({name:"attr",init:function(t,e,i,r,s){var n,a,o;for(n in this.tween=i,e)o=t.getAttribute(n)||"",(a=this.add(t,"setAttribute",(o||0)+"",e[n],r,s,0,0,n)).op=n,a.b=o,this._props.push(n)},render:function(t,e){for(var i=e._pt;i;)w?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},Ui("roundProps",Ae),Ui("modifiers"),Ui("snap",Te))||Gi;mi.version=si.version=Ni.version="3.12.7",E=1,tt()&&He(),je.Power0,je.Power1,je.Power2,je.Power3,je.Power4,je.Linear,je.Quad,je.Cubic,je.Quart,je.Quint,je.Strong,je.Elastic,je.Back,je.SteppedEase,je.Bounce,je.Sine,je.Expo,je.Circ;var zi,Hi,ji,Wi,$i,Vi,qi,Zi,Qi={},Ki=180/Math.PI,Ji=Math.PI/180,tr=Math.atan2,er=/([A-Z])/g,ir=/(left|right|width|margin|padding|x)/i,rr=/[\s,\(]\S/,sr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},nr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},ar=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},or=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},hr=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},lr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},ur=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},dr=function(t,e,i){return t.style[e]=i},cr=function(t,e,i){return t.style.setProperty(e,i)},pr=function(t,e,i){return t._gsap[e]=i},fr=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},mr=function(t,e,i,r,s){var n=t._gsap;n.scaleX=n.scaleY=i,n.renderTransform(s,n)},_r=function(t,e,i,r,s){var n=t._gsap;n[e]=i,n.renderTransform(s,n)},gr="transform",yr=gr+"Origin",xr=function t(e,i){var r=this,s=this.target,n=s.style,a=s._gsap;if(e in Qi&&n){if(this.tfm=this.tfm||{},"transform"===e)return sr.transform.split(",").forEach((function(e){return t.call(r,e,i)}));if(~(e=sr[e]||e).indexOf(",")?e.split(",").forEach((function(t){return r.tfm[t]=Lr(s,t)})):this.tfm[e]=a.x?a[e]:Lr(s,e),e===yr&&(this.tfm.zOrigin=a.zOrigin),this.props.indexOf(gr)>=0)return;a.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(yr,i,"")),e=gr}(n||i)&&this.props.push(e,i,n[e])},vr=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},br=function(){var t,e,i=this.props,r=this.target,s=r.style,n=r._gsap;for(t=0;t<i.length;t+=3)i[t+1]?2===i[t+1]?r[i[t]](i[t+2]):r[i[t]]=i[t+2]:i[t+2]?s[i[t]]=i[t+2]:s.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(er,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)n[e]=this.tfm[e];n.svg&&(n.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(t=qi())&&t.isStart||s[gr]||(vr(s),n.zOrigin&&s[yr]&&(s[yr]+=" "+n.zOrigin+"px",n.zOrigin=0,n.renderTransform()),n.uncache=1)}},wr=function(t,e){var i={target:t,props:[],revert:br,save:xr};return t._gsap||Ni.core.getCache(t),e&&t.style&&t.nodeType&&e.split(",").forEach((function(t){return i.save(t)})),i},Ar=function(t,e){var i=Hi.createElementNS?Hi.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Hi.createElement(t);return i&&i.style?i:Hi.createElement(t)},Tr=function t(e,i,r){var s=getComputedStyle(e);return s[i]||s.getPropertyValue(i.replace(er,"-$1").toLowerCase())||s.getPropertyValue(i)||!r&&t(e,Mr(i)||i,1)||""},Cr="O,Moz,ms,Ms,Webkit".split(","),Mr=function(t,e,i){var r=(e||$i).style,s=5;if(t in r&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);s--&&!(Cr[s]+t in r););return s<0?null:(3===s?"ms":s>=0?Cr[s]:"")+t},kr=function(){"undefined"!=typeof window&&window.document&&(zi=window,Hi=zi.document,ji=Hi.documentElement,$i=Ar("div")||{style:{}},Ar("div"),gr=Mr(gr),yr=gr+"Origin",$i.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Zi=!!Mr("perspective"),qi=Ni.core.reverting,Wi=1)},Er=function(t){var e,i=t.ownerSVGElement,r=Ar("svg",i&&i.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=t.cloneNode(!0);s.style.display="block",r.appendChild(s),ji.appendChild(r);try{e=s.getBBox()}catch(t){}return r.removeChild(s),ji.removeChild(r),e},Pr=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},Sr=function(t){var e,i;try{e=t.getBBox()}catch(r){e=Er(t),i=1}return e&&(e.width||e.height)||i||(e=Er(t)),!e||e.width||e.x||e.y?e:{x:+Pr(t,["x","cx","x1"])||0,y:+Pr(t,["y","cy","y1"])||0,width:0,height:0}},Rr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Sr(t))},Or=function(t,e){if(e){var i,r=t.style;e in Qi&&e!==yr&&(e=gr),r.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty("--"===i?e:e.replace(er,"-$1").toLowerCase())):r.removeAttribute(e)}},Ir=function(t,e,i,r,s,n){var a=new Pi(t._pt,e,i,0,1,n?ur:lr);return t._pt=a,a.b=r,a.e=s,t._props.push(i),a},Fr={deg:1,rad:1,turn:1},Br={grid:1,flex:1},Dr=function t(e,i,r,s){var n,a,o,h,l=parseFloat(r)||0,u=(r+"").trim().substr((l+"").length)||"px",d=$i.style,c=ir.test(i),p="svg"===e.tagName.toLowerCase(),f=(p?"client":"offset")+(c?"Width":"Height"),m=100,_="px"===s,g="%"===s;if(s===u||!l||Fr[s]||Fr[u])return l;if("px"!==u&&!_&&(l=t(e,i,r,"px")),h=e.getCTM&&Rr(e),(g||"%"===u)&&(Qi[i]||~i.indexOf("adius")))return n=h?e.getBBox()[c?"width":"height"]:e[f],It(g?l/n*m:l/100*n);if(d[c?"width":"height"]=m+(_?u:s),a="rem"!==s&&~i.indexOf("adius")||"em"===s&&e.appendChild&&!p?e:e.parentNode,h&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==Hi&&a.appendChild||(a=Hi.body),(o=a._gsap)&&g&&o.width&&c&&o.time===ze.time&&!o.uncache)return It(l/o.width*m);if(!g||"height"!==i&&"width"!==i)(g||"%"===u)&&!Br[Tr(a,"display")]&&(d.position=Tr(e,"position")),a===e&&(d.position="static"),a.appendChild($i),n=$i[f],a.removeChild($i),d.position="absolute";else{var y=e.style[i];e.style[i]=m+s,n=e[f],y?e.style[i]=y:Or(e,i)}return c&&g&&((o=St(a)).time=ze.time,o.width=a[f]),It(_?n*l/m:n&&l?m/n*l:0)},Lr=function(t,e,i,r){var s;return Wi||kr(),e in sr&&"transform"!==e&&~(e=sr[e]).indexOf(",")&&(e=e.split(",")[0]),Qi[e]&&"transform"!==e?(s=Vr(t,r),s="transformOrigin"!==e?s[e]:s.svg?s.origin:qr(Tr(t,yr))+" "+s.zOrigin+"px"):(!(s=t.style[e])||"auto"===s||r||~(s+"").indexOf("calc("))&&(s=Ur[e]&&Ur[e](t,e,i)||Tr(t,e)||Rt(t,e)||("opacity"===e?1:0)),i&&!~(s+"").trim().indexOf(" ")?Dr(t,e,s,i)+i:s},Yr=function(t,e,i,r){if(!i||"none"===i){var s=Mr(e,t,1),n=s&&Tr(t,s,1);n&&n!==i?(e=s,i=n):"borderColor"===e&&(i=Tr(t,"borderTopColor"))}var a,o,h,l,u,d,c,p,f,m,_,g=new Pi(this._pt,t.style,e,0,1,Ai),y=0,x=0;if(g.b=i,g.e=r,i+="","auto"==(r+="")&&(d=t.style[e],t.style[e]=r,r=Tr(t,e)||r,d?t.style[e]=d:Or(t,e)),Ne(a=[i,r]),r=a[1],h=(i=a[0]).match(at)||[],(r.match(at)||[]).length){for(;o=at.exec(r);)c=o[0],f=r.substring(y,o.index),u?u=(u+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(u=1),c!==(d=h[x++]||"")&&(l=parseFloat(d)||0,_=d.substr((l+"").length),"="===c.charAt(1)&&(c=Bt(l,c)+_),p=parseFloat(c),m=c.substr((p+"").length),y=at.lastIndex-m.length,m||(m=m||Y.units[e]||_,y===r.length&&(r+=m,g.e+=m)),_!==m&&(l=Dr(t,e,d,m)||0),g._pt={_next:g._pt,p:f||1===x?f:",",s:l,c:p-l,m:u&&u<4||"zIndex"===e?Math.round:0});g.c=y<r.length?r.substring(y,r.length):""}else g.r="display"===e&&"none"===r?ur:lr;return ht.test(r)&&(g.e=0),this._pt=g,g},Gr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Xr=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,r,s,n=e.t,a=n.style,o=e.u,h=n._gsap;if("all"===o||!0===o)a.cssText="",r=1;else for(s=(o=o.split(",")).length;--s>-1;)i=o[s],Qi[i]&&(r=1,i="transformOrigin"===i?yr:gr),Or(n,i);r&&(Or(n,gr),h&&(h.svg&&n.removeAttribute("transform"),a.scale=a.rotate=a.translate="none",Vr(n,1),h.uncache=1,vr(a)))}},Ur={clearProps:function(t,e,i,r,s){if("isFromStart"!==s.data){var n=t._pt=new Pi(t._pt,e,i,0,0,Xr);return n.u=r,n.pr=-10,n.tween=s,t._props.push(i),1}}},Nr=[1,0,0,1,0,0],zr={},Hr=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},jr=function(t){var e=Tr(t,gr);return Hr(e)?Nr:e.substr(7).match(nt).map(It)},Wr=function(t,e){var i,r,s,n,a=t._gsap||St(t),o=t.style,h=jr(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(h=[(s=t.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?Nr:h:(h!==Nr||t.offsetParent||t===ji||a.svg||(s=o.display,o.display="block",(i=t.parentNode)&&(t.offsetParent||t.getBoundingClientRect().width)||(n=1,r=t.nextElementSibling,ji.appendChild(t)),h=jr(t),s?o.display=s:Or(t,"display"),n&&(r?i.insertBefore(t,r):i?i.appendChild(t):ji.removeChild(t))),e&&h.length>6?[h[0],h[1],h[4],h[5],h[12],h[13]]:h)},$r=function(t,e,i,r,s,n){var a,o,h,l=t._gsap,u=s||Wr(t,!0),d=l.xOrigin||0,c=l.yOrigin||0,p=l.xOffset||0,f=l.yOffset||0,m=u[0],_=u[1],g=u[2],y=u[3],x=u[4],v=u[5],b=e.split(" "),w=parseFloat(b[0])||0,A=parseFloat(b[1])||0;i?u!==Nr&&(o=m*y-_*g)&&(h=w*(-_/o)+A*(m/o)-(m*v-_*x)/o,w=w*(y/o)+A*(-g/o)+(g*v-y*x)/o,A=h):(w=(a=Sr(t)).x+(~b[0].indexOf("%")?w/100*a.width:w),A=a.y+(~(b[1]||b[0]).indexOf("%")?A/100*a.height:A)),r||!1!==r&&l.smooth?(x=w-d,v=A-c,l.xOffset=p+(x*m+v*g)-x,l.yOffset=f+(x*_+v*y)-v):l.xOffset=l.yOffset=0,l.xOrigin=w,l.yOrigin=A,l.smooth=!!r,l.origin=e,l.originIsAbsolute=!!i,t.style[yr]="0px 0px",n&&(Ir(n,l,"xOrigin",d,w),Ir(n,l,"yOrigin",c,A),Ir(n,l,"xOffset",p,l.xOffset),Ir(n,l,"yOffset",f,l.yOffset)),t.setAttribute("data-svg-origin",w+" "+A)},Vr=function(t,e){var i=t._gsap||new ii(t);if("x"in i&&!e&&!i.uncache)return i;var r,s,n,a,o,h,l,u,d,c,p,f,m,_,g,y,x,v,b,w,A,T,C,M,k,E,P,S,R,O,I,F,B=t.style,D=i.scaleX<0,L="px",G="deg",X=getComputedStyle(t),U=Tr(t,yr)||"0";return r=s=n=h=l=u=d=c=p=0,a=o=1,i.svg=!(!t.getCTM||!Rr(t)),X.translate&&("none"===X.translate&&"none"===X.scale&&"none"===X.rotate||(B[gr]=("none"!==X.translate?"translate3d("+(X.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==X.rotate?"rotate("+X.rotate+") ":"")+("none"!==X.scale?"scale("+X.scale.split(" ").join(",")+") ":"")+("none"!==X[gr]?X[gr]:"")),B.scale=B.rotate=B.translate="none"),_=Wr(t,i.svg),i.svg&&(i.uncache?(k=t.getBBox(),U=i.xOrigin-k.x+"px "+(i.yOrigin-k.y)+"px",M=""):M=!e&&t.getAttribute("data-svg-origin"),$r(t,M||U,!!M||i.originIsAbsolute,!1!==i.smooth,_)),f=i.xOrigin||0,m=i.yOrigin||0,_!==Nr&&(v=_[0],b=_[1],w=_[2],A=_[3],r=T=_[4],s=C=_[5],6===_.length?(a=Math.sqrt(v*v+b*b),o=Math.sqrt(A*A+w*w),h=v||b?tr(b,v)*Ki:0,(d=w||A?tr(w,A)*Ki+h:0)&&(o*=Math.abs(Math.cos(d*Ji))),i.svg&&(r-=f-(f*v+m*w),s-=m-(f*b+m*A))):(F=_[6],O=_[7],P=_[8],S=_[9],R=_[10],I=_[11],r=_[12],s=_[13],n=_[14],l=(g=tr(F,R))*Ki,g&&(M=T*(y=Math.cos(-g))+P*(x=Math.sin(-g)),k=C*y+S*x,E=F*y+R*x,P=T*-x+P*y,S=C*-x+S*y,R=F*-x+R*y,I=O*-x+I*y,T=M,C=k,F=E),u=(g=tr(-w,R))*Ki,g&&(y=Math.cos(-g),I=A*(x=Math.sin(-g))+I*y,v=M=v*y-P*x,b=k=b*y-S*x,w=E=w*y-R*x),h=(g=tr(b,v))*Ki,g&&(M=v*(y=Math.cos(g))+b*(x=Math.sin(g)),k=T*y+C*x,b=b*y-v*x,C=C*y-T*x,v=M,T=k),l&&Math.abs(l)+Math.abs(h)>359.9&&(l=h=0,u=180-u),a=It(Math.sqrt(v*v+b*b+w*w)),o=It(Math.sqrt(C*C+F*F)),g=tr(T,C),d=Math.abs(g)>2e-4?g*Ki:0,p=I?1/(I<0?-I:I):0),i.svg&&(M=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!Hr(Tr(t,gr)),M&&t.setAttribute("transform",M))),Math.abs(d)>90&&Math.abs(d)<270&&(D?(a*=-1,d+=h<=0?180:-180,h+=h<=0?180:-180):(o*=-1,d+=d<=0?180:-180)),e=e||i.uncache,i.x=r-((i.xPercent=r&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+L,i.y=s-((i.yPercent=s&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-s)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+L,i.z=n+L,i.scaleX=It(a),i.scaleY=It(o),i.rotation=It(h)+G,i.rotationX=It(l)+G,i.rotationY=It(u)+G,i.skewX=d+G,i.skewY=c+G,i.transformPerspective=p+L,(i.zOrigin=parseFloat(U.split(" ")[2])||!e&&i.zOrigin||0)&&(B[yr]=qr(U)),i.xOffset=i.yOffset=0,i.force3D=Y.force3D,i.renderTransform=i.svg?is:Zi?es:Qr,i.uncache=0,i},qr=function(t){return(t=t.split(" "))[0]+" "+t[1]},Zr=function(t,e,i){var r=_e(e);return It(parseFloat(e)+parseFloat(Dr(t,"x",i+"px",r)))+r},Qr=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,es(t,e)},Kr="0deg",Jr="0px",ts=") ",es=function(t,e){var i=e||this,r=i.xPercent,s=i.yPercent,n=i.x,a=i.y,o=i.z,h=i.rotation,l=i.rotationY,u=i.rotationX,d=i.skewX,c=i.skewY,p=i.scaleX,f=i.scaleY,m=i.transformPerspective,_=i.force3D,g=i.target,y=i.zOrigin,x="",v="auto"===_&&t&&1!==t||!0===_;if(y&&(u!==Kr||l!==Kr)){var b,w=parseFloat(l)*Ji,A=Math.sin(w),T=Math.cos(w);w=parseFloat(u)*Ji,b=Math.cos(w),n=Zr(g,n,A*b*-y),a=Zr(g,a,-Math.sin(w)*-y),o=Zr(g,o,T*b*-y+y)}m!==Jr&&(x+="perspective("+m+ts),(r||s)&&(x+="translate("+r+"%, "+s+"%) "),(v||n!==Jr||a!==Jr||o!==Jr)&&(x+=o!==Jr||v?"translate3d("+n+", "+a+", "+o+") ":"translate("+n+", "+a+ts),h!==Kr&&(x+="rotate("+h+ts),l!==Kr&&(x+="rotateY("+l+ts),u!==Kr&&(x+="rotateX("+u+ts),d===Kr&&c===Kr||(x+="skew("+d+", "+c+ts),1===p&&1===f||(x+="scale("+p+", "+f+ts),g.style[gr]=x||"translate(0, 0)"},is=function(t,e){var i,r,s,n,a,o=e||this,h=o.xPercent,l=o.yPercent,u=o.x,d=o.y,c=o.rotation,p=o.skewX,f=o.skewY,m=o.scaleX,_=o.scaleY,g=o.target,y=o.xOrigin,x=o.yOrigin,v=o.xOffset,b=o.yOffset,w=o.forceCSS,A=parseFloat(u),T=parseFloat(d);c=parseFloat(c),p=parseFloat(p),(f=parseFloat(f))&&(p+=f=parseFloat(f),c+=f),c||p?(c*=Ji,p*=Ji,i=Math.cos(c)*m,r=Math.sin(c)*m,s=Math.sin(c-p)*-_,n=Math.cos(c-p)*_,p&&(f*=Ji,a=Math.tan(p-f),s*=a=Math.sqrt(1+a*a),n*=a,f&&(a=Math.tan(f),i*=a=Math.sqrt(1+a*a),r*=a)),i=It(i),r=It(r),s=It(s),n=It(n)):(i=m,n=_,r=s=0),(A&&!~(u+"").indexOf("px")||T&&!~(d+"").indexOf("px"))&&(A=Dr(g,"x",u,"px"),T=Dr(g,"y",d,"px")),(y||x||v||b)&&(A=It(A+y-(y*i+x*s)+v),T=It(T+x-(y*r+x*n)+b)),(h||l)&&(a=g.getBBox(),A=It(A+h/100*a.width),T=It(T+l/100*a.height)),a="matrix("+i+","+r+","+s+","+n+","+A+","+T+")",g.setAttribute("transform",a),w&&(g.style[gr]=a)},rs=function(t,e,i,r,s){var n,a,o=360,h=V(s),l=parseFloat(s)*(h&&~s.indexOf("rad")?Ki:1)-r,u=r+l+"deg";return h&&("short"===(n=s.split("_")[1])&&(l%=o)!=l%180&&(l+=l<0?o:-360),"cw"===n&&l<0?l=(l+36e9)%o-~~(l/o)*o:"ccw"===n&&l>0&&(l=(l-36e9)%o-~~(l/o)*o)),t._pt=a=new Pi(t._pt,e,i,r,l,ar),a.e=u,a.u="deg",t._props.push(i),a},ss=function(t,e){for(var i in e)t[i]=e[i];return t},ns=function(t,e,i){var r,s,n,a,o,h,l,u=ss({},i._gsap),d=i.style;for(s in u.svg?(n=i.getAttribute("transform"),i.setAttribute("transform",""),d[gr]=e,r=Vr(i,1),Or(i,gr),i.setAttribute("transform",n)):(n=getComputedStyle(i)[gr],d[gr]=e,r=Vr(i,1),d[gr]=n),Qi)(n=u[s])!==(a=r[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(o=_e(n)!==(l=_e(a))?Dr(i,s,n,l):parseFloat(n),h=parseFloat(a),t._pt=new Pi(t._pt,r,s,o,h-o,nr),t._pt.u=l||0,t._props.push(s));ss(r,u)};Ot("padding,margin,Width,Radius",(function(t,e){var i="Top",r="Right",s="Bottom",n="Left",a=(e<3?[i,r,s,n]:[i+n,i+r,s+r,s+n]).map((function(i){return e<2?t+i:"border"+i+t}));Ur[e>1?"border"+t:t]=function(t,e,i,r,s){var n,o;if(arguments.length<4)return n=a.map((function(e){return Lr(t,e,i)})),5===(o=n.join(" ")).split(n[0]).length?n[0]:o;n=(r+"").split(" "),o={},a.forEach((function(t,e){return o[t]=n[e]=n[e]||n[(e-1)/2|0]})),t.init(e,o,s)}}));var as,os,hs={name:"css",register:kr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,r,s){var n,a,o,h,l,u,d,c,p,f,m,_,g,y,x,v,b,w,A,T,C=this._props,M=t.style,k=i.vars.startAt;for(d in Wi||kr(),this.styles=this.styles||wr(t),v=this.styles.props,this.tween=i,e)if("autoRound"!==d&&(a=e[d],!Tt[d]||!li(d,e,i,r,t,s)))if(l=typeof a,u=Ur[d],"function"===l&&(l=typeof(a=a.call(i,r,t,s))),"string"===l&&~a.indexOf("random(")&&(a=ke(a)),u)u(this,t,d,a,i)&&(x=1);else if("--"===d.substr(0,2))n=(getComputedStyle(t).getPropertyValue(d)+"").trim(),a+="",Xe.lastIndex=0,Xe.test(n)||(c=_e(n),p=_e(a)),p?c!==p&&(n=Dr(t,d,n,p)+p):c&&(a+=c),this.add(M,"setProperty",n,a,r,s,0,0,d),C.push(d),v.push(d,0,M[d]);else if("undefined"!==l){if(k&&d in k?(n="function"==typeof k[d]?k[d].call(i,r,t,s):k[d],V(n)&&~n.indexOf("random(")&&(n=ke(n)),_e(n+"")||"auto"===n||(n+=Y.units[d]||_e(Lr(t,d))||""),"="===(n+"").charAt(1)&&(n=Lr(t,d))):n=Lr(t,d),h=parseFloat(n),(f="string"===l&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),o=parseFloat(a),d in sr&&("autoAlpha"===d&&(1===h&&"hidden"===Lr(t,"visibility")&&o&&(h=0),v.push("visibility",0,M.visibility),Ir(this,M,"visibility",h?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==d&&"transform"!==d&&~(d=sr[d]).indexOf(",")&&(d=d.split(",")[0])),m=d in Qi)if(this.styles.save(d),_||((g=t._gsap).renderTransform&&!e.parseTransform||Vr(t,e.parseTransform),y=!1!==e.smoothOrigin&&g.smooth,(_=this._pt=new Pi(this._pt,M,gr,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===d)this._pt=new Pi(this._pt,g,"scaleY",g.scaleY,(f?Bt(g.scaleY,f+o):o)-g.scaleY||0,nr),this._pt.u=0,C.push("scaleY",d),d+="X";else{if("transformOrigin"===d){v.push(yr,0,M[yr]),w=void 0,A=void 0,T=void 0,A=(w=(b=a).split(" "))[0],T=w[1]||"50%","top"!==A&&"bottom"!==A&&"left"!==T&&"right"!==T||(b=A,A=T,T=b),w[0]=Gr[A]||A,w[1]=Gr[T]||T,a=w.join(" "),g.svg?$r(t,a,0,y,0,this):((p=parseFloat(a.split(" ")[2])||0)!==g.zOrigin&&Ir(this,g,"zOrigin",g.zOrigin,p),Ir(this,M,d,qr(n),qr(a)));continue}if("svgOrigin"===d){$r(t,a,1,y,0,this);continue}if(d in zr){rs(this,g,d,h,f?Bt(h,f+a):a);continue}if("smoothOrigin"===d){Ir(this,g,"smooth",g.smooth,a);continue}if("force3D"===d){g[d]=a;continue}if("transform"===d){ns(this,a,t);continue}}else d in M||(d=Mr(d)||d);if(m||(o||0===o)&&(h||0===h)&&!rr.test(a)&&d in M)o||(o=0),(c=(n+"").substr((h+"").length))!==(p=_e(a)||(d in Y.units?Y.units[d]:c))&&(h=Dr(t,d,n,p)),this._pt=new Pi(this._pt,m?g:M,d,h,(f?Bt(h,f+o):o)-h,m||"px"!==p&&"zIndex"!==d||!1===e.autoRound?nr:hr),this._pt.u=p||0,c!==p&&"%"!==p&&(this._pt.b=n,this._pt.r=or);else if(d in M)Yr.call(this,t,d,n,f?f+a:a);else if(d in t)this.add(t,d,n||t[d],f?f+a:a,r,s);else if("parseTransform"!==d){ft(d,a);continue}m||(d in M?v.push(d,0,M[d]):"function"==typeof t[d]?v.push(d,2,t[d]()):v.push(d,1,n||t[d])),C.push(d)}x&&Ei(this)},render:function(t,e){if(e.tween._time||!qi())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:Lr,aliases:sr,getSetter:function(t,e,i){var r=sr[e];return r&&r.indexOf(",")<0&&(e=r),e in Qi&&e!==yr&&(t._gsap.x||Lr(t,"x"))?i&&Vi===i?"scale"===e?fr:pr:(Vi=i||{})&&("scale"===e?mr:_r):t.style&&!Q(t.style[e])?dr:~e.indexOf("-")?cr:vi(t,e)},core:{_removeProperty:Or,_getMatrix:Wr}};Ni.utils.checkPrefix=Mr,Ni.core.getStyleSaver=wr,os=Ot("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(as="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Qi[t]=1})),Ot(as,(function(t){Y.units[t]="deg",zr[t]=1})),sr[os[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+as,Ot("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");sr[e[1]]=os[e[0]]})),Ot("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){Y.units[t]="px"})),Ni.registerPlugin(hs);var ls=Ni.registerPlugin(hs)||Ni,us=(ls.core.Tween,function(){function t(){this.app=new g({width:window.innerWidth,height:window.innerHeight,backgroundColor:1087931,resolution:window.devicePixelRatio||1}),document.body.appendChild(this.app.view),window.addEventListener("resize",this.resize.bind(this)),this.resize(),this.init()}return t.prototype.resize=function(){this.app.renderer.resize(window.innerWidth,window.innerHeight)},t.prototype.init=function(){var t=y.k.from("https://pixijs.io/examples/examples/assets/bunny.png");t.anchor.set(.5),t.x=this.app.screen.width/2,t.y=this.app.screen.height/2,this.app.stage.addChild(t),ls.to(t,{rotation:2*Math.PI,duration:2,repeat:-1,ease:"none"})},t}());window.onload=function(){new us}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,